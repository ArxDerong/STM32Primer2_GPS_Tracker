   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_msc_bot.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Bot_Abort.part.1,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	Bot_Abort.part.1:
  24              	.LFB64:
  25              		.file 1 "lib/USB_Functions/msc/src/usb_msc_bot.c"
   1:lib/USB_Functions/msc/src/usb_msc_bot.c **** /********************************************************************************/
   2:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*!
   3:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@file			usb_msc_bot.c
   4:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @version        1.00
   6:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @date           2012.01.30
   7:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@brief          BOT State Machine management.
   8:lib/USB_Functions/msc/src/usb_msc_bot.c **** 					Based On STMicro's Sample Thanks!
   9:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  10:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @section HISTORY
  11:lib/USB_Functions/msc/src/usb_msc_bot.c **** 		2012.01.30	V1.00	Start Here.
  12:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  13:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @section LICENSE
  14:lib/USB_Functions/msc/src/usb_msc_bot.c **** 		BSD License. See Copyright.txt
  15:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
  16:lib/USB_Functions/msc/src/usb_msc_bot.c **** /********************************************************************************/
  17:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  18:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Includes ------------------------------------------------------------------*/
  19:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_msc_scsi.h"
  20:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_regs.h"
  21:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_mem.h"
  22:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_msc_conf.h"
  23:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_msc_bot.h"
  24:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_msc_memory.h"
  25:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "usb_lib.h"
  26:lib/USB_Functions/msc/src/usb_msc_bot.c **** #include "hw_config.h"
  27:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  28:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Defines -------------------------------------------------------------------*/
  29:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  30:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Variables -----------------------------------------------------------------*/
  31:lib/USB_Functions/msc/src/usb_msc_bot.c **** uint8_t Bot_State;
  32:lib/USB_Functions/msc/src/usb_msc_bot.c **** uint8_t Bulk_Data_Buff[BULK_MAX_PACKET_SIZE];  /* data buffer*/
  33:lib/USB_Functions/msc/src/usb_msc_bot.c **** uint16_t Data_Len;
  34:lib/USB_Functions/msc/src/usb_msc_bot.c **** Bulk_Only_CBW CBW;
  35:lib/USB_Functions/msc/src/usb_msc_bot.c **** Bulk_Only_CSW CSW;
  36:lib/USB_Functions/msc/src/usb_msc_bot.c **** uint32_t SCSI_LBA , SCSI_BlkLen;
  37:lib/USB_Functions/msc/src/usb_msc_bot.c **** extern uint32_t Max_Lun;
  38:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  39:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Constants -----------------------------------------------------------------*/
  40:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  41:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Function prototypes -------------------------------------------------------*/
  42:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  43:lib/USB_Functions/msc/src/usb_msc_bot.c **** /* Functions -----------------------------------------------------------------*/
  44:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  45:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
  46:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
  47:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Mass Storage IN transfer.
  48:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  None.
  49:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
  50:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
  51:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
  52:lib/USB_Functions/msc/src/usb_msc_bot.c **** void Mass_Storage_In (void)
  53:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
  54:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Bot_State)
  55:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
  56:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_CSW_Send:
  57:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_ERROR:
  58:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_State = BOT_IDLE;
  59:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #ifndef STM32F10X_CL
  60:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
  61:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #else
  62:lib/USB_Functions/msc/src/usb_msc_bot.c ****       if (GetEPRxStatus(EP2_OUT) == EP_RX_STALL)
  63:lib/USB_Functions/msc/src/usb_msc_bot.c ****       {
  64:lib/USB_Functions/msc/src/usb_msc_bot.c ****         SetEPRxStatus(EP2_OUT, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
  65:lib/USB_Functions/msc/src/usb_msc_bot.c ****       }
  66:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #endif /* STM32F10X_CL */
  67:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
  68:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_DATA_IN:
  69:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
  70:lib/USB_Functions/msc/src/usb_msc_bot.c ****       {
  71:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ10:
  72:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
  73:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
  74:lib/USB_Functions/msc/src/usb_msc_bot.c ****       }
  75:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
  76:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_DATA_IN_LAST:
  77:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
  78:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #ifndef STM32F10X_CL
  79:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_VALID);
  80:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #else
  81:lib/USB_Functions/msc/src/usb_msc_bot.c ****       if (GetEPRxStatus(EP2_OUT) == EP_RX_STALL)
  82:lib/USB_Functions/msc/src/usb_msc_bot.c ****       {
  83:lib/USB_Functions/msc/src/usb_msc_bot.c ****         SetEPRxStatus(EP2_OUT, EP_RX_VALID);/* enable the Endpoint to receive the next cmd*/
  84:lib/USB_Functions/msc/src/usb_msc_bot.c ****       }      
  85:lib/USB_Functions/msc/src/usb_msc_bot.c ****     #endif /* STM32F10X_CL */
  86:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
  87:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  88:lib/USB_Functions/msc/src/usb_msc_bot.c ****     default:
  89:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
  90:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
  91:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
  92:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
  93:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
  94:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
  95:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Mass Storage OUT transfer.
  96:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  None.
  97:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
  98:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
  99:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 100:lib/USB_Functions/msc/src/usb_msc_bot.c **** void Mass_Storage_Out (void)
 101:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 102:lib/USB_Functions/msc/src/usb_msc_bot.c ****   uint8_t CMD;
 103:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CMD = CBW.CB[0];
 104:lib/USB_Functions/msc/src/usb_msc_bot.c ****   /* Nemui Changed  */
 105:lib/USB_Functions/msc/src/usb_msc_bot.c ****   /* Data_Len = USB_SIL_Read(EP2_OUT, Bulk_Data_Buff); */
 106:lib/USB_Functions/msc/src/usb_msc_bot.c ****   /* Nemui Added */
 107:lib/USB_Functions/msc/src/usb_msc_bot.c ****   
 108:lib/USB_Functions/msc/src/usb_msc_bot.c ****   SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction */
 109:lib/USB_Functions/msc/src/usb_msc_bot.c ****   
 110:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (GetENDPOINT(ENDP2) & EP_DTOG_TX)
 111:lib/USB_Functions/msc/src/usb_msc_bot.c ****   { 
 112:lib/USB_Functions/msc/src/usb_msc_bot.c ****     FreeUserBuffer(ENDP2, EP_DBUF_OUT);
 113:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Data_Len = GetEPDblBuf0Count(ENDP2);
 114:lib/USB_Functions/msc/src/usb_msc_bot.c ****     PMAToUserBufferCopy(Bulk_Data_Buff, MSC_ENDP2_BUF0Addr, Data_Len); 
 115:lib/USB_Functions/msc/src/usb_msc_bot.c ****   } 
 116:lib/USB_Functions/msc/src/usb_msc_bot.c ****   else   { 
 117:lib/USB_Functions/msc/src/usb_msc_bot.c ****     FreeUserBuffer(ENDP2, EP_DBUF_OUT);  
 118:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Data_Len= GetEPDblBuf1Count(ENDP2); 
 119:lib/USB_Functions/msc/src/usb_msc_bot.c ****     PMAToUserBufferCopy(Bulk_Data_Buff, MSC_ENDP2_BUF1Addr, Data_Len); 
 120:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 121:lib/USB_Functions/msc/src/usb_msc_bot.c ****  
 122:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Bot_State)
 123:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 124:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_IDLE:
 125:lib/USB_Functions/msc/src/usb_msc_bot.c ****       CBW_Decode();
 126:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 127:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOT_DATA_OUT:
 128:lib/USB_Functions/msc/src/usb_msc_bot.c ****       if (CMD == SCSI_WRITE10)
 129:lib/USB_Functions/msc/src/usb_msc_bot.c ****       {
 130:lib/USB_Functions/msc/src/usb_msc_bot.c ****         SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 131:lib/USB_Functions/msc/src/usb_msc_bot.c ****         break;
 132:lib/USB_Functions/msc/src/usb_msc_bot.c ****       }
 133:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_Abort(DIR_OUT);
 134:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 135:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
 136:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 137:lib/USB_Functions/msc/src/usb_msc_bot.c ****     default:
 138:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_Abort(BOTH_DIR);
 139:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 140:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
 141:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 142:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 143:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 144:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 145:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 146:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
 147:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Decode the received CBW and call the related SCSI command
 148:lib/USB_Functions/msc/src/usb_msc_bot.c ****             routine.
 149:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  None.
 150:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
 151:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
 152:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 153:lib/USB_Functions/msc/src/usb_msc_bot.c **** void CBW_Decode(void)
 154:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 155:lib/USB_Functions/msc/src/usb_msc_bot.c ****   uint32_t Counter;
 156:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 157:lib/USB_Functions/msc/src/usb_msc_bot.c ****   for (Counter = 0; Counter < Data_Len; Counter++)
 158:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 159:lib/USB_Functions/msc/src/usb_msc_bot.c ****     *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 160:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 161:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dTag = CBW.dTag;
 162:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dDataResidue = CBW.dDataLength;
 163:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (Data_Len != BOT_CBW_PACKET_LENGTH)
 164:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 165:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Bot_Abort(BOTH_DIR);
 166:lib/USB_Functions/msc/src/usb_msc_bot.c ****     /* reset the CBW.dSignature to disable the clear feature until receiving a Mass storage reset*/
 167:lib/USB_Functions/msc/src/usb_msc_bot.c ****     CBW.dSignature = 0;
 168:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
 169:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 170:lib/USB_Functions/msc/src/usb_msc_bot.c ****     return;
 171:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 172:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 173:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
 174:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 175:lib/USB_Functions/msc/src/usb_msc_bot.c ****     /* Calculate Logical Block Address */
 176:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
 177:lib/USB_Functions/msc/src/usb_msc_bot.c ****     /* Calculate the Number of Blocks to transfer */
 178:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
 179:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 180:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 181:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (CBW.dSignature == BOT_CBW_SIGNATURE)
 182:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 183:lib/USB_Functions/msc/src/usb_msc_bot.c ****     /* Valid CBW */
 184:lib/USB_Functions/msc/src/usb_msc_bot.c ****     if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
 185:lib/USB_Functions/msc/src/usb_msc_bot.c ****     {
 186:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_Abort(BOTH_DIR);
 187:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 188:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 189:lib/USB_Functions/msc/src/usb_msc_bot.c ****     }
 190:lib/USB_Functions/msc/src/usb_msc_bot.c ****     else
 191:lib/USB_Functions/msc/src/usb_msc_bot.c ****     {
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 193:lib/USB_Functions/msc/src/usb_msc_bot.c ****       {
 194:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_REQUEST_SENSE:
 195:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_RequestSense_Cmd (CBW.bLUN);
 196:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 197:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_INQUIRY:
 198:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Inquiry_Cmd(CBW.bLUN);
 199:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 200:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_START_STOP_UNIT:
 201:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
 202:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 203:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_ALLOW_MEDIUM_REMOVAL:
 204:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
 205:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 206:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_MODE_SENSE6:
 207:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ModeSense6_Cmd (CBW.bLUN);
 208:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 209:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_MODE_SENSE10:
 210:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ModeSense10_Cmd (CBW.bLUN);
 211:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 212:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ_FORMAT_CAPACITIES:
 213:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ReadFormatCapacity_Cmd(CBW.bLUN);
 214:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 215:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ_CAPACITY10:
 216:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ReadCapacity10_Cmd(CBW.bLUN);
 217:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 218:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_TEST_UNIT_READY:
 219:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_TestUnitReady_Cmd(CBW.bLUN);
 220:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 221:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ10:
 222:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 223:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 224:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_WRITE10:
 225:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 226:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 227:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_VERIFY10:
 228:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Verify10_Cmd(CBW.bLUN);
 229:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 230:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_FORMAT_UNIT:
 231:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Format_Cmd(CBW.bLUN);
 232:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 233:lib/USB_Functions/msc/src/usb_msc_bot.c ****           /*Unsupported command*/
 234:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 235:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_MODE_SELECT10:
 236:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Mode_Select10_Cmd(CBW.bLUN);
 237:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 238:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_MODE_SELECT6:
 239:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Mode_Select6_Cmd(CBW.bLUN);
 240:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 241:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 242:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_SEND_DIAGNOSTIC:
 243:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Send_Diagnostic_Cmd(CBW.bLUN);
 244:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 245:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ6:
 246:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read6_Cmd(CBW.bLUN);
 247:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 248:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ12:
 249:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read12_Cmd(CBW.bLUN);
 250:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 251:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ16:
 252:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read16_Cmd(CBW.bLUN);
 253:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 254:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_READ_CAPACITY16:
 255:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_READ_CAPACITY16_Cmd(CBW.bLUN);
 256:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 257:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_WRITE6:
 258:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write6_Cmd(CBW.bLUN);
 259:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 260:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_WRITE12:
 261:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write12_Cmd(CBW.bLUN);
 262:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 263:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_WRITE16:
 264:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write16_Cmd(CBW.bLUN);
 265:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 266:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_VERIFY12:
 267:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Verify12_Cmd(CBW.bLUN);
 268:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 269:lib/USB_Functions/msc/src/usb_msc_bot.c ****         case SCSI_VERIFY16:
 270:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Verify16_Cmd(CBW.bLUN);
 271:lib/USB_Functions/msc/src/usb_msc_bot.c ****           break;
 272:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 273:lib/USB_Functions/msc/src/usb_msc_bot.c ****         default:
 274:lib/USB_Functions/msc/src/usb_msc_bot.c ****         {
 275:lib/USB_Functions/msc/src/usb_msc_bot.c ****           Bot_Abort(BOTH_DIR);
 276:lib/USB_Functions/msc/src/usb_msc_bot.c ****           Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 277:lib/USB_Functions/msc/src/usb_msc_bot.c ****           Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 278:lib/USB_Functions/msc/src/usb_msc_bot.c ****         }
 279:lib/USB_Functions/msc/src/usb_msc_bot.c ****       }
 280:lib/USB_Functions/msc/src/usb_msc_bot.c ****     }
 281:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 282:lib/USB_Functions/msc/src/usb_msc_bot.c ****   else
 283:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 284:lib/USB_Functions/msc/src/usb_msc_bot.c ****     /* Invalid CBW */
 285:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Bot_Abort(BOTH_DIR);
 286:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 287:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 288:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 290:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 291:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 292:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
 293:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Send the request response to the PC HOST.
 294:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  uint8_t* Data_Address : point to the data to transfer.
 295:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  uint16_t Data_Length  : the number of Bytes to transfer.
 296:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
 297:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
 298:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 299:lib/USB_Functions/msc/src/usb_msc_bot.c **** void Transfer_Data_Request(uint8_t* Data_Pointer, uint16_t Data_Len)
 300:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 301:lib/USB_Functions/msc/src/usb_msc_bot.c ****   USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);
 302:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 303:lib/USB_Functions/msc/src/usb_msc_bot.c **** #ifndef USE_STM3210C_EVAL
 304:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
 305:lib/USB_Functions/msc/src/usb_msc_bot.c **** #endif  
 306:lib/USB_Functions/msc/src/usb_msc_bot.c ****   Bot_State = BOT_DATA_IN_LAST;
 307:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dDataResidue -= Data_Len;
 308:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.bStatus = CSW_CMD_PASSED;
 309:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 310:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 311:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 312:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
 313:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Set the SCW with the needed fields.
 314:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  uint8_t CSW_Status this filed can be CSW_CMD_PASSED,CSW_CMD_FAILED,
 315:lib/USB_Functions/msc/src/usb_msc_bot.c ****             or CSW_PHASE_ERROR.
 316:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
 317:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
 318:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 319:lib/USB_Functions/msc/src/usb_msc_bot.c **** void Set_CSW (uint8_t CSW_Status, uint8_t Send_Permission)
 320:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 321:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dSignature = BOT_CSW_SIGNATURE;
 322:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.bStatus = CSW_Status;
 323:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 324:lib/USB_Functions/msc/src/usb_msc_bot.c ****   USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 325:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 326:lib/USB_Functions/msc/src/usb_msc_bot.c ****   Bot_State = BOT_ERROR;
 327:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (Send_Permission)
 328:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 329:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Bot_State = BOT_CSW_Send;
 330:lib/USB_Functions/msc/src/usb_msc_bot.c **** #ifndef USE_STM3210C_EVAL
 331:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
 332:lib/USB_Functions/msc/src/usb_msc_bot.c **** #endif  
 333:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 334:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 335:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 336:lib/USB_Functions/msc/src/usb_msc_bot.c **** 
 337:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 338:lib/USB_Functions/msc/src/usb_msc_bot.c **** /*! 
 339:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @brief  Stall the needed Endpoint according to the selected direction.
 340:lib/USB_Functions/msc/src/usb_msc_bot.c **** 	@param  uint8_t Endpoint direction IN, OUT or both directions
 341:lib/USB_Functions/msc/src/usb_msc_bot.c ****     @retval None.
 342:lib/USB_Functions/msc/src/usb_msc_bot.c **** */
 343:lib/USB_Functions/msc/src/usb_msc_bot.c **** /**************************************************************************/
 344:lib/USB_Functions/msc/src/usb_msc_bot.c **** void Bot_Abort(uint8_t Direction)
  26              		.loc 1 344 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 345:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 346:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Direction)
 347:lib/USB_Functions/msc/src/usb_msc_bot.c ****   {
 348:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case DIR_IN :
 349:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPTxStatus(ENDP1, EP_TX_STALL);
 350:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 351:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case DIR_OUT :
 352:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_STALL);
 353:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 354:lib/USB_Functions/msc/src/usb_msc_bot.c ****     case BOTH_DIR :
 355:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPTxStatus(ENDP1, EP_TX_STALL);
  35              		.loc 1 355 0
  36 0002 0120     		movs	r0, #1
  37 0004 1021     		movs	r1, #16
  38 0006 FFF7FEFF 		bl	SetEPTxStatus
  39              	.LVL0:
 356:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_STALL);
  40              		.loc 1 356 0
  41 000a 0220     		movs	r0, #2
  42 000c 4FF48051 		mov	r1, #4096
 357:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 358:lib/USB_Functions/msc/src/usb_msc_bot.c ****     default:
 359:lib/USB_Functions/msc/src/usb_msc_bot.c ****       break;
 360:lib/USB_Functions/msc/src/usb_msc_bot.c ****   }
 361:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
  43              		.loc 1 361 0
  44 0010 BDE80840 		pop	{r3, lr}
 356:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_STALL);
  45              		.loc 1 356 0
  46 0014 FFF7FEBF 		b	SetEPRxStatus
  47              	.LVL1:
  48              		.cfi_endproc
  49              	.LFE64:
  51              		.section	.text.Transfer_Data_Request,"ax",%progbits
  52              		.align	1
  53              		.global	Transfer_Data_Request
  54              		.thumb
  55              		.thumb_func
  57              	Transfer_Data_Request:
  58              	.LFB60:
 300:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
  59              		.loc 1 300 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL2:
  64 0000 10B5     		push	{r4, lr}
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 0346     		mov	r3, r0
  70 0004 0C46     		mov	r4, r1
 301:lib/USB_Functions/msc/src/usb_msc_bot.c ****   USB_SIL_Write(EP1_IN, Data_Pointer, Data_Len);
  71              		.loc 1 301 0
  72 0006 8120     		movs	r0, #129
  73              	.LVL3:
  74 0008 1946     		mov	r1, r3
  75              	.LVL4:
  76 000a 2246     		mov	r2, r4
  77 000c FFF7FEFF 		bl	USB_SIL_Write
  78              	.LVL5:
 304:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
  79              		.loc 1 304 0
  80 0010 0120     		movs	r0, #1
  81 0012 3021     		movs	r1, #48
  82 0014 FFF7FEFF 		bl	SetEPTxStatus
  83              	.LVL6:
 306:lib/USB_Functions/msc/src/usb_msc_bot.c ****   Bot_State = BOT_DATA_IN_LAST;
  84              		.loc 1 306 0
  85 0018 0322     		movs	r2, #3
  86 001a 0448     		ldr	r0, .L3
  87 001c 0270     		strb	r2, [r0, #0]
 307:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dDataResidue -= Data_Len;
  88              		.loc 1 307 0
  89 001e 0449     		ldr	r1, .L3+4
  90 0020 8B68     		ldr	r3, [r1, #8]
  91 0022 1C1B     		subs	r4, r3, r4
  92 0024 8C60     		str	r4, [r1, #8]
 308:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.bStatus = CSW_CMD_PASSED;
  93              		.loc 1 308 0
  94 0026 0022     		movs	r2, #0
  95 0028 0A73     		strb	r2, [r1, #12]
  96 002a 10BD     		pop	{r4, pc}
  97              	.L4:
  98              		.align	2
  99              	.L3:
 100 002c 00000000 		.word	.LANCHOR0
 101 0030 00000000 		.word	.LANCHOR1
 102              		.cfi_endproc
 103              	.LFE60:
 105              		.section	.text.Set_CSW,"ax",%progbits
 106              		.align	1
 107              		.global	Set_CSW
 108              		.thumb
 109              		.thumb_func
 111              	Set_CSW:
 112              	.LFB61:
 320:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 113              		.loc 1 320 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL7:
 118 0000 10B5     		push	{r4, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 4, -8
 122              		.cfi_offset 14, -4
 123 0002 0C46     		mov	r4, r1
 321:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dSignature = BOT_CSW_SIGNATURE;
 124              		.loc 1 321 0
 125 0004 0A49     		ldr	r1, .L10
 126              	.LVL8:
 127 0006 0B4A     		ldr	r2, .L10+4
 128 0008 0A60     		str	r2, [r1, #0]
 322:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.bStatus = CSW_Status;
 129              		.loc 1 322 0
 130 000a 0873     		strb	r0, [r1, #12]
 324:lib/USB_Functions/msc/src/usb_msc_bot.c ****   USB_SIL_Write(EP1_IN, ((uint8_t *)& CSW), CSW_DATA_LENGTH);
 131              		.loc 1 324 0
 132 000c 8120     		movs	r0, #129
 133              	.LVL9:
 134 000e 0D22     		movs	r2, #13
 135 0010 FFF7FEFF 		bl	USB_SIL_Write
 136              	.LVL10:
 137 0014 084B     		ldr	r3, .L10+8
 327:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (Send_Permission)
 138              		.loc 1 327 0
 139 0016 14B9     		cbnz	r4, .L6
 326:lib/USB_Functions/msc/src/usb_msc_bot.c ****   Bot_State = BOT_ERROR;
 140              		.loc 1 326 0
 141 0018 0520     		movs	r0, #5
 142 001a 1870     		strb	r0, [r3, #0]
 143 001c 10BD     		pop	{r4, pc}
 144              	.L6:
 145              	.LBB4:
 146              	.LBB5:
 329:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Bot_State = BOT_CSW_Send;
 147              		.loc 1 329 0
 148 001e 0421     		movs	r1, #4
 149 0020 1970     		strb	r1, [r3, #0]
 331:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
 150              		.loc 1 331 0
 151 0022 0120     		movs	r0, #1
 152 0024 3021     		movs	r1, #48
 153              	.LBE5:
 154              	.LBE4:
 335:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 155              		.loc 1 335 0
 156 0026 BDE81040 		pop	{r4, lr}
 157              	.LBB7:
 158              	.LBB6:
 331:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
 159              		.loc 1 331 0
 160 002a FFF7FEBF 		b	SetEPTxStatus
 161              	.LVL11:
 162              	.L11:
 163 002e 00BF     		.align	2
 164              	.L10:
 165 0030 00000000 		.word	.LANCHOR1
 166 0034 55534253 		.word	1396855637
 167 0038 00000000 		.word	.LANCHOR0
 168              	.LBE6:
 169              	.LBE7:
 170              		.cfi_endproc
 171              	.LFE61:
 173              		.section	.text.Mass_Storage_In,"ax",%progbits
 174              		.align	1
 175              		.global	Mass_Storage_In
 176              		.thumb
 177              		.thumb_func
 179              	Mass_Storage_In:
 180              	.LFB57:
  53:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 181              		.loc 1 53 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185 0000 08B5     		push	{r3, lr}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 3, -8
 189              		.cfi_offset 14, -4
  54:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Bot_State)
 190              		.loc 1 54 0
 191 0002 124A     		ldr	r2, .L20
 192 0004 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 193 0006 981E     		subs	r0, r3, #2
 194 0008 0328     		cmp	r0, #3
 195 000a 1ED8     		bhi	.L12
 196 000c DFE800F0 		tbb	[pc, r0]
 197              	.L17:
 198 0010 05       		.byte	(.L14-.L17)/2
 199 0011 12       		.byte	(.L15-.L17)/2
 200 0012 02       		.byte	(.L16-.L17)/2
 201 0013 02       		.byte	(.L16-.L17)/2
 202              		.align	1
 203              	.L16:
  58:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_State = BOT_IDLE;
 204              		.loc 1 58 0
 205 0014 0021     		movs	r1, #0
 206 0016 1170     		strb	r1, [r2, #0]
 207 0018 10E0     		b	.L19
 208              	.L14:
  69:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 209              		.loc 1 69 0
 210 001a 0D4B     		ldr	r3, .L20+4
 211 001c DA7B     		ldrb	r2, [r3, #15]	@ zero_extendqisi2
 212 001e 282A     		cmp	r2, #40
 213 0020 13D1     		bne	.L12
  72:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 214              		.loc 1 72 0
 215 0022 587B     		ldrb	r0, [r3, #13]	@ zero_extendqisi2
 216 0024 0B49     		ldr	r1, .L20+8
 217 0026 0968     		ldr	r1, [r1, #0]
 218 0028 0B4B     		ldr	r3, .L20+12
 219 002a 1A68     		ldr	r2, [r3, #0]
  91:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 220              		.loc 1 91 0
 221 002c BDE80840 		pop	{r3, lr}
  72:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 222              		.loc 1 72 0
 223 0030 FFF7FEBF 		b	SCSI_Read10_Cmd
 224              	.LVL12:
 225              	.L15:
  77:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 226              		.loc 1 77 0
 227 0034 0020     		movs	r0, #0
 228 0036 0121     		movs	r1, #1
 229 0038 FFF7FEFF 		bl	Set_CSW
 230              	.LVL13:
 231              	.L19:
  79:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_VALID);
 232              		.loc 1 79 0
 233 003c 0220     		movs	r0, #2
 234 003e 4FF44051 		mov	r1, #12288
  91:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 235              		.loc 1 91 0
 236 0042 BDE80840 		pop	{r3, lr}
  79:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_VALID);
 237              		.loc 1 79 0
 238 0046 FFF7FEBF 		b	SetEPRxStatus
 239              	.LVL14:
 240              	.L12:
 241 004a 08BD     		pop	{r3, pc}
 242              	.L21:
 243              		.align	2
 244              	.L20:
 245 004c 00000000 		.word	.LANCHOR0
 246 0050 00000000 		.word	.LANCHOR2
 247 0054 00000000 		.word	.LANCHOR3
 248 0058 00000000 		.word	.LANCHOR4
 249              		.cfi_endproc
 250              	.LFE57:
 252              		.section	.text.CBW_Decode,"ax",%progbits
 253              		.align	1
 254              		.global	CBW_Decode
 255              		.thumb
 256              		.thumb_func
 258              	CBW_Decode:
 259              	.LFB59:
 154:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 260              		.loc 1 154 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264 0000 38B5     		push	{r3, r4, r5, lr}
 265              	.LCFI4:
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 3, -16
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 5, -8
 270              		.cfi_offset 14, -4
 271              	.LVL15:
 157:lib/USB_Functions/msc/src/usb_msc_bot.c ****   for (Counter = 0; Counter < Data_Len; Counter++)
 272              		.loc 1 157 0
 273 0002 5D4B     		ldr	r3, .L79
 274 0004 1A88     		ldrh	r2, [r3, #0]
 275 0006 0023     		movs	r3, #0
 276              	.LVL16:
 277              	.L23:
 157:lib/USB_Functions/msc/src/usb_msc_bot.c ****   for (Counter = 0; Counter < Data_Len; Counter++)
 278              		.loc 1 157 0 is_stmt 0 discriminator 1
 279 0008 9342     		cmp	r3, r2
 280 000a 5C4C     		ldr	r4, .L79+4
 281 000c 04D2     		bcs	.L78
 282              	.L24:
 159:lib/USB_Functions/msc/src/usb_msc_bot.c ****     *((uint8_t *)&CBW + Counter) = Bulk_Data_Buff[Counter];
 283              		.loc 1 159 0 is_stmt 1 discriminator 2
 284 000e 5C49     		ldr	r1, .L79+8
 285 0010 585C     		ldrb	r0, [r3, r1]	@ zero_extendqisi2
 286 0012 E054     		strb	r0, [r4, r3]
 157:lib/USB_Functions/msc/src/usb_msc_bot.c ****   for (Counter = 0; Counter < Data_Len; Counter++)
 287              		.loc 1 157 0 discriminator 2
 288 0014 0133     		adds	r3, r3, #1
 289              	.LVL17:
 290 0016 F7E7     		b	.L23
 291              	.L78:
 161:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dTag = CBW.dTag;
 292              		.loc 1 161 0
 293 0018 5A48     		ldr	r0, .L79+12
 294 001a 6168     		ldr	r1, [r4, #4]
 295 001c 4160     		str	r1, [r0, #4]
 162:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CSW.dDataResidue = CBW.dDataLength;
 296              		.loc 1 162 0
 297 001e A368     		ldr	r3, [r4, #8]
 298              	.LVL18:
 299 0020 8360     		str	r3, [r0, #8]
 163:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (Data_Len != BOT_CBW_PACKET_LENGTH)
 300              		.loc 1 163 0
 301 0022 1F2A     		cmp	r2, #31
 302 0024 0BD0     		beq	.L25
 303              	.LVL19:
 304 0026 FFF7FEFF 		bl	Bot_Abort.part.1
 305              	.LVL20:
 167:lib/USB_Functions/msc/src/usb_msc_bot.c ****     CBW.dSignature = 0;
 306              		.loc 1 167 0
 307 002a 0025     		movs	r5, #0
 308 002c 2560     		str	r5, [r4, #0]
 168:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
 309              		.loc 1 168 0
 310 002e 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 311 0030 0521     		movs	r1, #5
 312 0032 1A22     		movs	r2, #26
 313 0034 FFF7FEFF 		bl	Set_Scsi_Sense_Data
 314              	.LVL21:
 169:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 315              		.loc 1 169 0
 316 0038 0120     		movs	r0, #1
 317 003a 2946     		mov	r1, r5
 318 003c C2E0     		b	.L70
 319              	.LVL22:
 320              	.L25:
 173:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
 321              		.loc 1 173 0
 322 003e E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 323 0040 282B     		cmp	r3, #40
 324 0042 01D0     		beq	.L26
 173:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if ((CBW.CB[0] == SCSI_READ10 ) || (CBW.CB[0] == SCSI_WRITE10 ))
 325              		.loc 1 173 0 is_stmt 0 discriminator 1
 326 0044 2A2B     		cmp	r3, #42
 327 0046 12D1     		bne	.L27
 328              	.L26:
 176:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SCSI_LBA = (CBW.CB[2] << 24) | (CBW.CB[3] << 16) | (CBW.CB[4] <<  8) | CBW.CB[5];
 329              		.loc 1 176 0 is_stmt 1
 330 0048 4C4A     		ldr	r2, .L79+4
 331 004a 547C     		ldrb	r4, [r2, #17]	@ zero_extendqisi2
 332 004c 907C     		ldrb	r0, [r2, #18]	@ zero_extendqisi2
 333 004e 0104     		lsls	r1, r0, #16
 334 0050 41EA0464 		orr	r4, r1, r4, lsl #24
 335 0054 107D     		ldrb	r0, [r2, #20]	@ zero_extendqisi2
 336 0056 0443     		orrs	r4, r4, r0
 337 0058 D17C     		ldrb	r1, [r2, #19]	@ zero_extendqisi2
 338 005a 44EA0124 		orr	r4, r4, r1, lsl #8
 339 005e 4A48     		ldr	r0, .L79+16
 340 0060 0460     		str	r4, [r0, #0]
 178:lib/USB_Functions/msc/src/usb_msc_bot.c ****     SCSI_BlkLen = (CBW.CB[7] <<  8) | CBW.CB[8];
 341              		.loc 1 178 0
 342 0062 917D     		ldrb	r1, [r2, #22]	@ zero_extendqisi2
 343 0064 D27D     		ldrb	r2, [r2, #23]	@ zero_extendqisi2
 344 0066 42EA0124 		orr	r4, r2, r1, lsl #8
 345 006a 4848     		ldr	r0, .L79+20
 346 006c 0460     		str	r4, [r0, #0]
 347              	.L27:
 181:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (CBW.dSignature == BOT_CBW_SIGNATURE)
 348              		.loc 1 181 0
 349 006e 434C     		ldr	r4, .L79+4
 350 0070 2268     		ldr	r2, [r4, #0]
 351 0072 4749     		ldr	r1, .L79+24
 352 0074 8A42     		cmp	r2, r1
 353 0076 40F09C80 		bne	.L28
 184:lib/USB_Functions/msc/src/usb_msc_bot.c ****     if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
 354              		.loc 1 184 0
 355 007a 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 356 007c 454A     		ldr	r2, .L79+28
 357 007e 1168     		ldr	r1, [r2, #0]
 358 0080 8842     		cmp	r0, r1
 359 0082 03D8     		bhi	.L29
 184:lib/USB_Functions/msc/src/usb_msc_bot.c ****     if ((CBW.bLUN > Max_Lun) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
 360              		.loc 1 184 0 is_stmt 0 discriminator 1
 361 0084 A27B     		ldrb	r2, [r4, #14]	@ zero_extendqisi2
 362 0086 0AB1     		cbz	r2, .L29
 363 0088 102A     		cmp	r2, #16
 364 008a 06D9     		bls	.L30
 365              	.L29:
 366              	.LVL23:
 367 008c FFF7FEFF 		bl	Bot_Abort.part.1
 368              	.LVL24:
 187:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 369              		.loc 1 187 0 is_stmt 1
 370 0090 3A4A     		ldr	r2, .L79+4
 371 0092 507B     		ldrb	r0, [r2, #13]	@ zero_extendqisi2
 372 0094 0521     		movs	r1, #5
 373 0096 2422     		movs	r2, #36
 374 0098 90E0     		b	.L72
 375              	.LVL25:
 376              	.L30:
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 377              		.loc 1 192 0
 378 009a 252B     		cmp	r3, #37
 379 009c 57D0     		beq	.L44
 380 009e 22D8     		bhi	.L57
 381 00a0 122B     		cmp	r3, #18
 382 00a2 48D0     		beq	.L37
 383 00a4 0ED8     		bhi	.L58
 384 00a6 042B     		cmp	r3, #4
 385 00a8 76D0     		beq	.L34
 386 00aa 07D8     		bhi	.L59
 387 00ac 002B     		cmp	r3, #0
 388 00ae 52D0     		beq	.L32
 389 00b0 032B     		cmp	r3, #3
 390 00b2 79D1     		bne	.L31
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 391              		.loc 1 289 0
 392 00b4 BDE83840 		pop	{r3, r4, r5, lr}
 195:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_RequestSense_Cmd (CBW.bLUN);
 393              		.loc 1 195 0
 394 00b8 FFF7FEBF 		b	SCSI_RequestSense_Cmd
 395              	.LVL26:
 396              	.L59:
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 397              		.loc 1 192 0
 398 00bc 082B     		cmp	r3, #8
 399 00be 6FD0     		beq	.L52
 400 00c0 0A2B     		cmp	r3, #10
 401 00c2 36E0     		b	.L74
 402              	.L58:
 403 00c4 1B2B     		cmp	r3, #27
 404 00c6 3AD0     		beq	.L42
 405 00c8 07D8     		bhi	.L60
 406 00ca 152B     		cmp	r3, #21
 407 00cc 68D0     		beq	.L52
 408 00ce 1A2B     		cmp	r3, #26
 409 00d0 6AD1     		bne	.L31
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 410              		.loc 1 289 0
 411 00d2 BDE83840 		pop	{r3, r4, r5, lr}
 207:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ModeSense6_Cmd (CBW.bLUN);
 412              		.loc 1 207 0
 413 00d6 FFF7FEBF 		b	SCSI_ModeSense6_Cmd
 414              	.LVL27:
 415              	.L60:
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 416              		.loc 1 192 0
 417 00da 1E2B     		cmp	r3, #30
 418 00dc 2FD0     		beq	.L42
 419 00de 232B     		cmp	r3, #35
 420 00e0 31D0     		beq	.L43
 421 00e2 1D2B     		cmp	r3, #29
 422 00e4 25E0     		b	.L74
 423              	.L57:
 424 00e6 882B     		cmp	r3, #136
 425 00e8 5AD0     		beq	.L52
 426 00ea 16D8     		bhi	.L61
 427 00ec 2F2B     		cmp	r3, #47
 428 00ee 3ED0     		beq	.L47
 429 00f0 0BD8     		bhi	.L62
 430 00f2 282B     		cmp	r3, #40
 431 00f4 33D0     		beq	.L45
 432 00f6 2A2B     		cmp	r3, #42
 433 00f8 56D1     		bne	.L31
 225:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 434              		.loc 1 225 0
 435 00fa 234B     		ldr	r3, .L79+16
 436 00fc 1968     		ldr	r1, [r3, #0]
 437 00fe 234A     		ldr	r2, .L79+20
 438 0100 1268     		ldr	r2, [r2, #0]
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 439              		.loc 1 289 0
 440 0102 BDE83840 		pop	{r3, r4, r5, lr}
 225:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Write10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 441              		.loc 1 225 0
 442 0106 FFF7FEBF 		b	SCSI_Write10_Cmd
 443              	.LVL28:
 444              	.L62:
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 445              		.loc 1 192 0
 446 010a 552B     		cmp	r3, #85
 447 010c 48D0     		beq	.L52
 448 010e 5A2B     		cmp	r3, #90
 449 0110 4AD1     		bne	.L31
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 450              		.loc 1 289 0
 451 0112 BDE83840 		pop	{r3, r4, r5, lr}
 210:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ModeSense10_Cmd (CBW.bLUN);
 452              		.loc 1 210 0
 453 0116 FFF7FEBF 		b	SCSI_ModeSense10_Cmd
 454              	.LVL29:
 455              	.L61:
 192:lib/USB_Functions/msc/src/usb_msc_bot.c ****       switch (CBW.CB[0])
 456              		.loc 1 192 0
 457 011a 9E2B     		cmp	r3, #158
 458 011c 40D0     		beq	.L52
 459 011e 03D8     		bhi	.L63
 460 0120 8A2B     		cmp	r3, #138
 461 0122 3DD0     		beq	.L52
 462 0124 8F2B     		cmp	r3, #143
 463 0126 04E0     		b	.L74
 464              	.L63:
 465 0128 AA2B     		cmp	r3, #170
 466 012a 39D0     		beq	.L52
 467 012c AF2B     		cmp	r3, #175
 468 012e 37D0     		beq	.L52
 469 0130 A82B     		cmp	r3, #168
 470              	.L74:
 471 0132 39D1     		bne	.L31
 472 0134 34E0     		b	.L52
 473              	.L37:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 474              		.loc 1 289 0
 475 0136 BDE83840 		pop	{r3, r4, r5, lr}
 198:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Inquiry_Cmd(CBW.bLUN);
 476              		.loc 1 198 0
 477 013a FFF7FEBF 		b	SCSI_Inquiry_Cmd
 478              	.LVL30:
 479              	.L42:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 480              		.loc 1 289 0
 481 013e BDE83840 		pop	{r3, r4, r5, lr}
 204:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Start_Stop_Unit_Cmd(CBW.bLUN);
 482              		.loc 1 204 0
 483 0142 FFF7FEBF 		b	SCSI_Start_Stop_Unit_Cmd
 484              	.LVL31:
 485              	.L43:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 486              		.loc 1 289 0
 487 0146 BDE83840 		pop	{r3, r4, r5, lr}
 213:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ReadFormatCapacity_Cmd(CBW.bLUN);
 488              		.loc 1 213 0
 489 014a FFF7FEBF 		b	SCSI_ReadFormatCapacity_Cmd
 490              	.LVL32:
 491              	.L44:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 492              		.loc 1 289 0
 493 014e BDE83840 		pop	{r3, r4, r5, lr}
 216:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_ReadCapacity10_Cmd(CBW.bLUN);
 494              		.loc 1 216 0
 495 0152 FFF7FEBF 		b	SCSI_ReadCapacity10_Cmd
 496              	.LVL33:
 497              	.L32:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 498              		.loc 1 289 0
 499 0156 BDE83840 		pop	{r3, r4, r5, lr}
 219:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_TestUnitReady_Cmd(CBW.bLUN);
 500              		.loc 1 219 0
 501 015a FFF7FEBF 		b	SCSI_TestUnitReady_Cmd
 502              	.LVL34:
 503              	.L45:
 222:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 504              		.loc 1 222 0
 505 015e 0A49     		ldr	r1, .L79+16
 506 0160 0968     		ldr	r1, [r1, #0]
 507 0162 0A4B     		ldr	r3, .L79+20
 508 0164 1A68     		ldr	r2, [r3, #0]
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 509              		.loc 1 289 0
 510 0166 BDE83840 		pop	{r3, r4, r5, lr}
 222:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Read10_Cmd(CBW.bLUN, SCSI_LBA , SCSI_BlkLen);
 511              		.loc 1 222 0
 512 016a FFF7FEBF 		b	SCSI_Read10_Cmd
 513              	.LVL35:
 514              	.L47:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 515              		.loc 1 289 0
 516 016e BDE83840 		pop	{r3, r4, r5, lr}
 228:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Verify10_Cmd(CBW.bLUN);
 517              		.loc 1 228 0
 518 0172 FFF7FEBF 		b	SCSI_Verify10_Cmd
 519              	.LVL36:
 520              	.L80:
 521 0176 00BF     		.align	2
 522              	.L79:
 523 0178 00000000 		.word	.LANCHOR5
 524 017c 00000000 		.word	.LANCHOR2
 525 0180 00000000 		.word	.LANCHOR6
 526 0184 00000000 		.word	.LANCHOR1
 527 0188 00000000 		.word	.LANCHOR3
 528 018c 00000000 		.word	.LANCHOR4
 529 0190 55534243 		.word	1128420181
 530 0194 00000000 		.word	Max_Lun
 531              	.L34:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 532              		.loc 1 289 0
 533 0198 BDE83840 		pop	{r3, r4, r5, lr}
 231:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Format_Cmd(CBW.bLUN);
 534              		.loc 1 231 0
 535 019c FFF7FEBF 		b	SCSI_Format_Cmd
 536              	.LVL37:
 537              	.L52:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 538              		.loc 1 289 0
 539 01a0 BDE83840 		pop	{r3, r4, r5, lr}
 270:lib/USB_Functions/msc/src/usb_msc_bot.c ****           SCSI_Verify16_Cmd(CBW.bLUN);
 540              		.loc 1 270 0
 541 01a4 FFF7FEBF 		b	SCSI_Invalid_Cmd
 542              	.LVL38:
 543              	.L31:
 544 01a8 FFF7FEFF 		bl	Bot_Abort.part.1
 545              	.LVL39:
 276:lib/USB_Functions/msc/src/usb_msc_bot.c ****           Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 546              		.loc 1 276 0
 547 01ac 0748     		ldr	r0, .L81
 548 01ae 407B     		ldrb	r0, [r0, #13]	@ zero_extendqisi2
 549 01b0 02E0     		b	.L71
 550              	.LVL40:
 551              	.L28:
 552 01b2 FFF7FEFF 		bl	Bot_Abort.part.1
 553              	.LVL41:
 286:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_COMMAND);
 554              		.loc 1 286 0
 555 01b6 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 556              	.LVL42:
 557              	.L71:
 558 01b8 0521     		movs	r1, #5
 559 01ba 2022     		movs	r2, #32
 560              	.L72:
 561 01bc FFF7FEFF 		bl	Set_Scsi_Sense_Data
 562              	.LVL43:
 287:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 563              		.loc 1 287 0
 564 01c0 0120     		movs	r0, #1
 565 01c2 0021     		movs	r1, #0
 566              	.L70:
 289:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 567              		.loc 1 289 0
 568 01c4 BDE83840 		pop	{r3, r4, r5, lr}
 287:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
 569              		.loc 1 287 0
 570 01c8 FFF7FEBF 		b	Set_CSW
 571              	.LVL44:
 572              	.L82:
 573              		.align	2
 574              	.L81:
 575 01cc 00000000 		.word	.LANCHOR2
 576              		.cfi_endproc
 577              	.LFE59:
 579              		.section	.text.Bot_Abort,"ax",%progbits
 580              		.align	1
 581              		.global	Bot_Abort
 582              		.thumb
 583              		.thumb_func
 585              	Bot_Abort:
 586              	.LFB62:
 345:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 587              		.loc 1 345 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592              	.LVL45:
 346:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Direction)
 593              		.loc 1 346 0
 594 0000 0128     		cmp	r0, #1
 595 0002 08D0     		beq	.L86
 596 0004 03D3     		bcc	.L85
 597 0006 0228     		cmp	r0, #2
 598 0008 0AD1     		bne	.L88
 599              		.loc 1 361 0
 600 000a FFF7FEBF 		b	Bot_Abort.part.1
 601              	.LVL46:
 602              	.L85:
 349:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPTxStatus(ENDP1, EP_TX_STALL);
 603              		.loc 1 349 0
 604 000e 0120     		movs	r0, #1
 605              	.LVL47:
 606 0010 1021     		movs	r1, #16
 607              		.loc 1 361 0
 349:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPTxStatus(ENDP1, EP_TX_STALL);
 608              		.loc 1 349 0
 609 0012 FFF7FEBF 		b	SetEPTxStatus
 610              	.LVL48:
 611              	.L86:
 352:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_STALL);
 612              		.loc 1 352 0
 613 0016 0220     		movs	r0, #2
 614              	.LVL49:
 615 0018 4FF48051 		mov	r1, #4096
 616              		.loc 1 361 0
 352:lib/USB_Functions/msc/src/usb_msc_bot.c ****       SetEPRxStatus(ENDP2, EP_RX_STALL);
 617              		.loc 1 352 0
 618 001c FFF7FEBF 		b	SetEPRxStatus
 619              	.LVL50:
 620              	.L88:
 621 0020 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE62:
 625              		.section	.text.Mass_Storage_Out,"ax",%progbits
 626              		.align	1
 627              		.global	Mass_Storage_Out
 628              		.thumb
 629              		.thumb_func
 631              	Mass_Storage_Out:
 632              	.LFB58:
 101:lib/USB_Functions/msc/src/usb_msc_bot.c **** {
 633              		.loc 1 101 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637 0000 38B5     		push	{r3, r4, r5, lr}
 638              	.LCFI5:
 639              		.cfi_def_cfa_offset 16
 640              		.cfi_offset 3, -16
 641              		.cfi_offset 4, -12
 642              		.cfi_offset 5, -8
 643              		.cfi_offset 14, -4
 103:lib/USB_Functions/msc/src/usb_msc_bot.c ****   CMD = CBW.CB[0];
 644              		.loc 1 103 0
 645 0002 274B     		ldr	r3, .L100
 646 0004 DD7B     		ldrb	r5, [r3, #15]	@ zero_extendqisi2
 647              	.LVL51:
 108:lib/USB_Functions/msc/src/usb_msc_bot.c ****   SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction */
 648              		.loc 1 108 0
 649 0006 0220     		movs	r0, #2
 650 0008 4FF44051 		mov	r1, #12288
 651 000c FFF7FEFF 		bl	SetEPRxStatus
 652              	.LVL52:
 110:lib/USB_Functions/msc/src/usb_msc_bot.c ****   if (GetENDPOINT(ENDP2) & EP_DTOG_TX)
 653              		.loc 1 110 0
 654 0010 0220     		movs	r0, #2
 655 0012 FFF7FEFF 		bl	GetENDPOINT
 656              	.LVL53:
 657 0016 00F04000 		and	r0, r0, #64
 658 001a 81B2     		uxth	r1, r0
 659 001c 214C     		ldr	r4, .L100+4
 660 001e 59B1     		cbz	r1, .L90
 112:lib/USB_Functions/msc/src/usb_msc_bot.c ****     FreeUserBuffer(ENDP2, EP_DBUF_OUT);
 661              		.loc 1 112 0
 662 0020 0220     		movs	r0, #2
 663 0022 0121     		movs	r1, #1
 664 0024 FFF7FEFF 		bl	FreeUserBuffer
 665              	.LVL54:
 113:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Data_Len = GetEPDblBuf0Count(ENDP2);
 666              		.loc 1 113 0
 667 0028 0220     		movs	r0, #2
 668 002a FFF7FEFF 		bl	GetEPDblBuf0Count
 669              	.LVL55:
 670 002e 0246     		mov	r2, r0
 671 0030 2080     		strh	r0, [r4, #0]	@ movhi
 114:lib/USB_Functions/msc/src/usb_msc_bot.c ****     PMAToUserBufferCopy(Bulk_Data_Buff, MSC_ENDP2_BUF0Addr, Data_Len); 
 672              		.loc 1 114 0
 673 0032 1D48     		ldr	r0, .L100+8
 674 0034 D821     		movs	r1, #216
 675 0036 0BE0     		b	.L97
 676              	.L90:
 117:lib/USB_Functions/msc/src/usb_msc_bot.c ****     FreeUserBuffer(ENDP2, EP_DBUF_OUT);  
 677              		.loc 1 117 0
 678 0038 0220     		movs	r0, #2
 679 003a 0121     		movs	r1, #1
 680 003c FFF7FEFF 		bl	FreeUserBuffer
 681              	.LVL56:
 118:lib/USB_Functions/msc/src/usb_msc_bot.c ****     Data_Len= GetEPDblBuf1Count(ENDP2); 
 682              		.loc 1 118 0
 683 0040 0220     		movs	r0, #2
 684 0042 FFF7FEFF 		bl	GetEPDblBuf1Count
 685              	.LVL57:
 686 0046 0246     		mov	r2, r0
 687 0048 2080     		strh	r0, [r4, #0]	@ movhi
 119:lib/USB_Functions/msc/src/usb_msc_bot.c ****     PMAToUserBufferCopy(Bulk_Data_Buff, MSC_ENDP2_BUF1Addr, Data_Len); 
 688              		.loc 1 119 0
 689 004a 1748     		ldr	r0, .L100+8
 690 004c 4FF48C71 		mov	r1, #280
 691              	.L97:
 692 0050 FFF7FEFF 		bl	PMAToUserBufferCopy
 693              	.LVL58:
 122:lib/USB_Functions/msc/src/usb_msc_bot.c ****   switch (Bot_State)
 694              		.loc 1 122 0
 695 0054 154A     		ldr	r2, .L100+12
 696 0056 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 697 0058 18B1     		cbz	r0, .L93
 698 005a 0128     		cmp	r0, #1
 699 005c 104C     		ldr	r4, .L100
 700 005e 12D1     		bne	.L96
 701 0060 03E0     		b	.L99
 702              	.L93:
 143:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 703              		.loc 1 143 0
 704 0062 BDE83840 		pop	{r3, r4, r5, lr}
 125:lib/USB_Functions/msc/src/usb_msc_bot.c ****       CBW_Decode();
 705              		.loc 1 125 0
 706 0066 FFF7FEBF 		b	CBW_Decode
 707              	.LVL59:
 708              	.L99:
 128:lib/USB_Functions/msc/src/usb_msc_bot.c ****       if (CMD == SCSI_WRITE10)
 709              		.loc 1 128 0
 710 006a 2A2D     		cmp	r5, #42
 711 006c 08D1     		bne	.L95
 130:lib/USB_Functions/msc/src/usb_msc_bot.c ****         SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 712              		.loc 1 130 0
 713 006e 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 714 0070 0F4B     		ldr	r3, .L100+16
 715 0072 1968     		ldr	r1, [r3, #0]
 716 0074 0F4A     		ldr	r2, .L100+20
 717 0076 1268     		ldr	r2, [r2, #0]
 143:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 718              		.loc 1 143 0
 719 0078 BDE83840 		pop	{r3, r4, r5, lr}
 130:lib/USB_Functions/msc/src/usb_msc_bot.c ****         SCSI_Write10_Cmd(CBW.bLUN , SCSI_LBA , SCSI_BlkLen);
 720              		.loc 1 130 0
 721 007c FFF7FEBF 		b	SCSI_Write10_Cmd
 722              	.LVL60:
 723              	.L95:
 133:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Bot_Abort(DIR_OUT);
 724              		.loc 1 133 0
 725 0080 FFF7FEFF 		bl	Bot_Abort
 726              	.LVL61:
 727 0084 01E0     		b	.L98
 728              	.L96:
 729              	.LVL62:
 730 0086 FFF7FEFF 		bl	Bot_Abort.part.1
 731              	.LVL63:
 732              	.L98:
 139:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_Scsi_Sense_Data(CBW.bLUN, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 733              		.loc 1 139 0
 734 008a 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 735 008c 0521     		movs	r1, #5
 736 008e 2422     		movs	r2, #36
 737 0090 FFF7FEFF 		bl	Set_Scsi_Sense_Data
 738              	.LVL64:
 140:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
 739              		.loc 1 140 0
 740 0094 0220     		movs	r0, #2
 741 0096 0021     		movs	r1, #0
 143:lib/USB_Functions/msc/src/usb_msc_bot.c **** }
 742              		.loc 1 143 0
 743 0098 BDE83840 		pop	{r3, r4, r5, lr}
 140:lib/USB_Functions/msc/src/usb_msc_bot.c ****       Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
 744              		.loc 1 140 0
 745 009c FFF7FEBF 		b	Set_CSW
 746              	.LVL65:
 747              	.L101:
 748              		.align	2
 749              	.L100:
 750 00a0 00000000 		.word	.LANCHOR2
 751 00a4 00000000 		.word	.LANCHOR5
 752 00a8 00000000 		.word	.LANCHOR6
 753 00ac 00000000 		.word	.LANCHOR0
 754 00b0 00000000 		.word	.LANCHOR3
 755 00b4 00000000 		.word	.LANCHOR4
 756              		.cfi_endproc
 757              	.LFE58:
 759              		.global	SCSI_BlkLen
 760              		.global	SCSI_LBA
 761              		.global	CSW
 762              		.global	CBW
 763              		.global	Data_Len
 764              		.global	Bulk_Data_Buff
 765              		.global	Bot_State
 766              		.section	.bss.Data_Len,"aw",%nobits
 767              		.align	1
 768              		.set	.LANCHOR5,. + 0
 771              	Data_Len:
 772 0000 0000     		.space	2
 773              		.section	.bss.CBW,"aw",%nobits
 774              		.align	2
 775              		.set	.LANCHOR2,. + 0
 778              	CBW:
 779 0000 00000000 		.space	32
 779      00000000 
 779      00000000 
 779      00000000 
 779      00000000 
 780              		.section	.bss.Bot_State,"aw",%nobits
 781              		.set	.LANCHOR0,. + 0
 784              	Bot_State:
 785 0000 00       		.space	1
 786              		.section	.bss.SCSI_BlkLen,"aw",%nobits
 787              		.align	2
 788              		.set	.LANCHOR4,. + 0
 791              	SCSI_BlkLen:
 792 0000 00000000 		.space	4
 793              		.section	.bss.Bulk_Data_Buff,"aw",%nobits
 794              		.set	.LANCHOR6,. + 0
 797              	Bulk_Data_Buff:
 798 0000 00000000 		.space	64
 798      00000000 
 798      00000000 
 798      00000000 
 798      00000000 
 799              		.section	.bss.SCSI_LBA,"aw",%nobits
 800              		.align	2
 801              		.set	.LANCHOR3,. + 0
 804              	SCSI_LBA:
 805 0000 00000000 		.space	4
 806              		.section	.bss.CSW,"aw",%nobits
 807              		.align	2
 808              		.set	.LANCHOR1,. + 0
 811              	CSW:
 812 0000 00000000 		.space	16
 812      00000000 
 812      00000000 
 812      00000000 
 813              		.text
 814              	.Letext0:
 815              		.file 2 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 816              		.file 3 "./lib/USB_Functions/msc/inc/usb_msc_bot.h"
 817              		.file 4 "./lib/CMSIS/Include/core_cm3.h"
 818              		.file 5 "./inc/systick.h"
 819              		.file 6 "./lib/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 820              		.file 7 "./lib/USB_Functions/msc/inc/usb_msc_scsi.h"
 821              		.file 8 "./lib/STM32_USB-FS-Device_Driver/inc/usb_sil.h"
 822              		.file 9 "./lib/STM32_USB-FS-Device_Driver/inc/usb_mem.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_msc_bot.c
  R:\TEMP\ccznSoRz.s:19     .text.Bot_Abort.part.1:00000000 $t
  R:\TEMP\ccznSoRz.s:23     .text.Bot_Abort.part.1:00000000 Bot_Abort.part.1
  R:\TEMP\ccznSoRz.s:52     .text.Transfer_Data_Request:00000000 $t
  R:\TEMP\ccznSoRz.s:57     .text.Transfer_Data_Request:00000000 Transfer_Data_Request
  R:\TEMP\ccznSoRz.s:100    .text.Transfer_Data_Request:0000002c $d
  R:\TEMP\ccznSoRz.s:106    .text.Set_CSW:00000000 $t
  R:\TEMP\ccznSoRz.s:111    .text.Set_CSW:00000000 Set_CSW
  R:\TEMP\ccznSoRz.s:165    .text.Set_CSW:00000030 $d
  R:\TEMP\ccznSoRz.s:174    .text.Mass_Storage_In:00000000 $t
  R:\TEMP\ccznSoRz.s:179    .text.Mass_Storage_In:00000000 Mass_Storage_In
  R:\TEMP\ccznSoRz.s:198    .text.Mass_Storage_In:00000010 $d
  R:\TEMP\ccznSoRz.s:202    .text.Mass_Storage_In:00000014 $t
  R:\TEMP\ccznSoRz.s:245    .text.Mass_Storage_In:0000004c $d
  R:\TEMP\ccznSoRz.s:253    .text.CBW_Decode:00000000 $t
  R:\TEMP\ccznSoRz.s:258    .text.CBW_Decode:00000000 CBW_Decode
  R:\TEMP\ccznSoRz.s:523    .text.CBW_Decode:00000178 $d
  R:\TEMP\ccznSoRz.s:533    .text.CBW_Decode:00000198 $t
  R:\TEMP\ccznSoRz.s:575    .text.CBW_Decode:000001cc $d
  R:\TEMP\ccznSoRz.s:580    .text.Bot_Abort:00000000 $t
  R:\TEMP\ccznSoRz.s:585    .text.Bot_Abort:00000000 Bot_Abort
  R:\TEMP\ccznSoRz.s:626    .text.Mass_Storage_Out:00000000 $t
  R:\TEMP\ccznSoRz.s:631    .text.Mass_Storage_Out:00000000 Mass_Storage_Out
  R:\TEMP\ccznSoRz.s:750    .text.Mass_Storage_Out:000000a0 $d
  R:\TEMP\ccznSoRz.s:791    .bss.SCSI_BlkLen:00000000 SCSI_BlkLen
  R:\TEMP\ccznSoRz.s:804    .bss.SCSI_LBA:00000000 SCSI_LBA
  R:\TEMP\ccznSoRz.s:811    .bss.CSW:00000000 CSW
  R:\TEMP\ccznSoRz.s:778    .bss.CBW:00000000 CBW
  R:\TEMP\ccznSoRz.s:771    .bss.Data_Len:00000000 Data_Len
  R:\TEMP\ccznSoRz.s:797    .bss.Bulk_Data_Buff:00000000 Bulk_Data_Buff
  R:\TEMP\ccznSoRz.s:784    .bss.Bot_State:00000000 Bot_State
  R:\TEMP\ccznSoRz.s:767    .bss.Data_Len:00000000 $d
  R:\TEMP\ccznSoRz.s:774    .bss.CBW:00000000 $d
  R:\TEMP\ccznSoRz.s:785    .bss.Bot_State:00000000 $d
  R:\TEMP\ccznSoRz.s:787    .bss.SCSI_BlkLen:00000000 $d
  R:\TEMP\ccznSoRz.s:798    .bss.Bulk_Data_Buff:00000000 $d
  R:\TEMP\ccznSoRz.s:800    .bss.SCSI_LBA:00000000 $d
  R:\TEMP\ccznSoRz.s:807    .bss.CSW:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SetEPTxStatus
SetEPRxStatus
USB_SIL_Write
SCSI_Read10_Cmd
Set_Scsi_Sense_Data
SCSI_RequestSense_Cmd
SCSI_ModeSense6_Cmd
SCSI_Write10_Cmd
SCSI_ModeSense10_Cmd
SCSI_Inquiry_Cmd
SCSI_Start_Stop_Unit_Cmd
SCSI_ReadFormatCapacity_Cmd
SCSI_ReadCapacity10_Cmd
SCSI_TestUnitReady_Cmd
SCSI_Verify10_Cmd
Max_Lun
SCSI_Format_Cmd
SCSI_Invalid_Cmd
GetENDPOINT
FreeUserBuffer
GetEPDblBuf0Count
GetEPDblBuf1Count
PMAToUserBufferCopy
