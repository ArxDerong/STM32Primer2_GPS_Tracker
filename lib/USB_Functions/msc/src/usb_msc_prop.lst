   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_msc_prop.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Mass_SetDeviceAddress,"ax",%progbits
  19              		.align	1
  20              		.global	Mass_SetDeviceAddress
  21              		.thumb
  22              		.thumb_func
  24              	Mass_SetDeviceAddress:
  25              	.LFB62:
  26              		.file 1 "lib/USB_Functions/msc/src/usb_msc_prop.c"
   1:lib/USB_Functions/msc/src/usb_msc_prop.c **** /********************************************************************************/
   2:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*!
   3:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	@file			usb_msc_prop.c
   4:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @version        1.00
   6:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @date           2012.01.30
   7:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	@brief          Mass Storage middle layer.
   8:lib/USB_Functions/msc/src/usb_msc_prop.c **** 					Based On STMicro's Sample Thanks!
   9:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  10:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @section HISTORY
  11:lib/USB_Functions/msc/src/usb_msc_prop.c **** 		2012.01.30	V1.00	Start Here.
  12:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  13:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @section LICENSE
  14:lib/USB_Functions/msc/src/usb_msc_prop.c **** 		BSD License. See Copyright.txt
  15:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
  16:lib/USB_Functions/msc/src/usb_msc_prop.c **** /********************************************************************************/
  17:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  18:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Includes ------------------------------------------------------------------*/
  19:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_lib.h"
  20:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_conf.h"
  21:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_prop.h"
  22:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_pwr.h"
  23:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_desc.h"
  24:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_bot.h"
  25:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_conf.h"
  26:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_memory.h"
  27:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_mass_mal.h"
  28:lib/USB_Functions/msc/src/usb_msc_prop.c **** #include "usb_msc_prop.h"
  29:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  30:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Defines -------------------------------------------------------------------*/
  31:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  32:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Variables -----------------------------------------------------------------*/
  33:lib/USB_Functions/msc/src/usb_msc_prop.c **** uint32_t Max_Lun = 0;
  34:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  35:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Constants -----------------------------------------------------------------*/
  36:lib/USB_Functions/msc/src/usb_msc_prop.c **** ONE_DESCRIPTOR MSC_Device_Descriptor =
  37:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
  38:lib/USB_Functions/msc/src/usb_msc_prop.c ****     (uint8_t*)Mass_DeviceDescriptor,
  39:lib/USB_Functions/msc/src/usb_msc_prop.c ****     MASS_SIZ_DEVICE_DESC
  40:lib/USB_Functions/msc/src/usb_msc_prop.c ****   };
  41:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  42:lib/USB_Functions/msc/src/usb_msc_prop.c **** ONE_DESCRIPTOR MSC_Config_Descriptor =
  43:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
  44:lib/USB_Functions/msc/src/usb_msc_prop.c ****     (uint8_t*)Mass_ConfigDescriptor,
  45:lib/USB_Functions/msc/src/usb_msc_prop.c ****     MASS_SIZ_CONFIG_DESC
  46:lib/USB_Functions/msc/src/usb_msc_prop.c ****   };
  47:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  48:lib/USB_Functions/msc/src/usb_msc_prop.c **** ONE_DESCRIPTOR MSC_String_Descriptor[5] =
  49:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
  50:lib/USB_Functions/msc/src/usb_msc_prop.c ****     {(uint8_t*)Mass_StringLangID, MASS_SIZ_STRING_LANGID},
  51:lib/USB_Functions/msc/src/usb_msc_prop.c ****     {(uint8_t*)Mass_StringVendor, MASS_SIZ_STRING_VENDOR},
  52:lib/USB_Functions/msc/src/usb_msc_prop.c ****     {(uint8_t*)Mass_StringProduct, MASS_SIZ_STRING_PRODUCT},
  53:lib/USB_Functions/msc/src/usb_msc_prop.c ****     {(uint8_t*)Mass_StringSerial, MASS_SIZ_STRING_SERIAL},
  54:lib/USB_Functions/msc/src/usb_msc_prop.c ****     {(uint8_t*)Mass_StringInterface, MASS_SIZ_STRING_INTERFACE},
  55:lib/USB_Functions/msc/src/usb_msc_prop.c ****   };
  56:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  57:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Function prototypes -------------------------------------------------------*/
  58:lib/USB_Functions/msc/src/usb_msc_prop.c **** extern void Get_SerialNum(uint8_t* string0,uint8_t* string1);
  59:lib/USB_Functions/msc/src/usb_msc_prop.c **** extern unsigned char Bot_State;
  60:lib/USB_Functions/msc/src/usb_msc_prop.c **** extern Bulk_Only_CBW CBW;
  61:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  62:lib/USB_Functions/msc/src/usb_msc_prop.c **** /* Functions -----------------------------------------------------------------*/
  63:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  64:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
  65:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
  66:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Install MSC Functions.
  67:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
  68:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
  69:lib/USB_Functions/msc/src/usb_msc_prop.c **** void MSC_SetStructure(void)
  70:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
  71:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	Device_Table.Total_Endpoint	= MSC_EP_NUM;
  72:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	xinit						= Mass_init;
  73:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xReset 						= Mass_Reset;
  74:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xStatus_In					= Mass_Status_In;
  75:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xStatus_Out					= Mass_Status_Out;
  76:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xData_Setup					= Mass_Data_Setup;
  77:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xNoData_Setup				= Mass_NoData_Setup;
  78:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGet_Interface_Setting		= Mass_Get_Interface_Setting;
  79:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetDeviceDescriptor		= Mass_GetDeviceDescriptor;
  80:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetConfigDescriptor		= Mass_GetConfigDescriptor;
  81:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetStringDescriptor		= Mass_GetStringDescriptor;
  82:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	
  83:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	xGetConfiguration			= Mass_GetConfiguration;
  84:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetConfiguration			= Mass_SetConfiguration;
  85:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetInterface				= Mass_GetInterface;
  86:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetInterface				= Mass_SetInterface;
  87:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetStatus					= Mass_GetStatus;
  88:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xClearFeature				= Mass_ClearFeature;
  89:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetEndPointFeature			= Mass_SetEndPointFeature;
  90:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetDeviceFeature			= Mass_SetDeviceFeature;
  91:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetDeviceAddress           = Mass_SetDeviceAddress;
  92:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
  93:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
  94:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
  95:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
  96:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Mass Storage init routine.
  97:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
  98:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
  99:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_init()
 100:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 101:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 102:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Update the serial number string descriptor with the data from the unique
 103:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ID*/
 104:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Get_SerialNum(&Mass_StringSerial[2],&Mass_StringSerial[18]);
 105:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 106:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 107:lib/USB_Functions/msc/src/usb_msc_prop.c ****   pInformation->Current_Configuration = 0;
 108:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 109:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Connect the device */
 110:lib/USB_Functions/msc/src/usb_msc_prop.c ****   PowerOn();
 111:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 112:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Perform basic device initialization operations */
 113:lib/USB_Functions/msc/src/usb_msc_prop.c ****   USB_SIL_Init();
 114:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 115:lib/USB_Functions/msc/src/usb_msc_prop.c ****   bDeviceState = UNCONNECTED;
 116:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 117:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 118:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 119:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 120:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Mass Storage reset routine.
 121:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 122:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 123:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_Reset()
 124:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 125:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Set the device as not configured */
 126:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Device_Info.Current_Configuration = 0;
 127:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 128:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Current Feature initialization */
 129:lib/USB_Functions/msc/src/usb_msc_prop.c ****   pInformation->Current_Feature = Mass_ConfigDescriptor[7];
 130:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 131:lib/USB_Functions/msc/src/usb_msc_prop.c **** #ifdef STM32F10X_CL   
 132:lib/USB_Functions/msc/src/usb_msc_prop.c ****   
 133:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* EP0 is already configured by USB_SIL_Init() function */
 134:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 135:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Init EP1 IN as Bulk endpoint */
 136:lib/USB_Functions/msc/src/usb_msc_prop.c ****   OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
 137:lib/USB_Functions/msc/src/usb_msc_prop.c ****   
 138:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Init EP2 OUT as Bulk endpoint */
 139:lib/USB_Functions/msc/src/usb_msc_prop.c ****   OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE); 
 140:lib/USB_Functions/msc/src/usb_msc_prop.c ****   
 141:lib/USB_Functions/msc/src/usb_msc_prop.c **** #else 
 142:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 143:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetBTABLE(BTABLE_ADDRESS);
 144:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 145:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Initialize Endpoint 0 */
 146:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPType(ENDP0, EP_CONTROL);
 147:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP0, EP_TX_NAK);
 148:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxAddr(ENDP0, MSC_ENDP0_RXADDR);
 149:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 150:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxAddr(ENDP0, MSC_ENDP0_TXADDR);
 151:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Clear_Status_Out(ENDP0);
 152:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxValid(ENDP0);
 153:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 154:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Initialize Endpoint 1 */
 155:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPType(ENDP1, EP_BULK);
 156:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxAddr(ENDP1, MSC_ENDP1_TXADDR);
 157:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP1, EP_TX_NAK);
 158:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxStatus(ENDP1, EP_RX_DIS);
 159:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 160:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Initialize Endpoint 2 */
 161:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Nemui Cchanged to Double Buffer */
 162:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*
 163:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPType(ENDP2, EP_BULK);
 164:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxAddr(ENDP2, MSC_ENDP2_RXADDR);
 165:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
 166:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxStatus(ENDP2, EP_RX_VALID);
 167:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP2, EP_TX_DIS);
 168:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 169:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Nemui added */
 170:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPType(ENDP2, EP_BULK); 
 171:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDoubleBuff(ENDP2); 
 172:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDblBuffAddr(ENDP2, MSC_ENDP2_BUF0Addr, MSC_ENDP2_BUF1Addr); 
 173:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDblBuffCount(ENDP2, EP_DBUF_OUT, Device_Property.MaxPacketSize); 
 174:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ClearDTOG_RX(ENDP2); 
 175:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ClearDTOG_TX(ENDP2); 
 176:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ToggleDTOG_TX(ENDP2); 
 177:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxStatus(ENDP2, EP_RX_VALID); 
 178:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP2, EP_TX_DIS);  
 179:lib/USB_Functions/msc/src/usb_msc_prop.c ****  /* Nemui added */
 180:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 181:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 182:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxValid(ENDP0);
 183:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 184:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Set the device to response on default address */
 185:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetDeviceAddress(0);
 186:lib/USB_Functions/msc/src/usb_msc_prop.c **** #endif /* STM32F10X_CL */
 187:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 188:lib/USB_Functions/msc/src/usb_msc_prop.c ****   bDeviceState = ATTACHED;
 189:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 190:lib/USB_Functions/msc/src/usb_msc_prop.c ****   CBW.dSignature = BOT_CBW_SIGNATURE;
 191:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Bot_State = BOT_IDLE;
 192:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 193:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 194:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 195:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 196:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Handle the SetConfiguration request.
 197:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 198:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 199:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_SetConfiguration(void)
 200:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 201:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (pInformation->Current_Configuration != 0)
 202:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 203:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Device configured */
 204:lib/USB_Functions/msc/src/usb_msc_prop.c ****     bDeviceState = CONFIGURED;
 205:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 206:lib/USB_Functions/msc/src/usb_msc_prop.c **** #ifdef STM32F10X_CL 
 207:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Init EP1 IN as Bulk endpoint */
 208:lib/USB_Functions/msc/src/usb_msc_prop.c ****     OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
 209:lib/USB_Functions/msc/src/usb_msc_prop.c ****   
 210:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Init EP2 OUT as Bulk endpoint */
 211:lib/USB_Functions/msc/src/usb_msc_prop.c ****     OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
 212:lib/USB_Functions/msc/src/usb_msc_prop.c **** #else    
 213:lib/USB_Functions/msc/src/usb_msc_prop.c ****     ClearDTOG_TX(ENDP1);
 214:lib/USB_Functions/msc/src/usb_msc_prop.c ****     ClearDTOG_RX(ENDP2);
 215:lib/USB_Functions/msc/src/usb_msc_prop.c **** #endif /* STM32F10X_CL */
 216:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 217:lib/USB_Functions/msc/src/usb_msc_prop.c ****     Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
 218:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 219:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 220:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 221:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 222:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 223:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Handle the ClearFeature request.
 224:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 225:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 226:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_ClearFeature(void)
 227:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 228:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* when the host send a CBW with invalid signature or invalid length the two
 229:lib/USB_Functions/msc/src/usb_msc_prop.c ****      Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
 230:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (CBW.dSignature != BOT_CBW_SIGNATURE)
 231:lib/USB_Functions/msc/src/usb_msc_prop.c ****     Bot_Abort(BOTH_DIR);
 232:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 233:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 234:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 235:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 236:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Update the device state to addressed.
 237:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 238:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 239:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_SetDeviceAddress (void)
 240:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
  27              		.loc 1 240 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 241:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	bDeviceState = ADDRESSED;
  32              		.loc 1 241 0
  33 0000 0422     		movs	r2, #4
  34 0002 014B     		ldr	r3, .L2
  35 0004 1A60     		str	r2, [r3, #0]
  36 0006 7047     		bx	lr
  37              	.L3:
  38              		.align	2
  39              	.L2:
  40 0008 00000000 		.word	bDeviceState
  41              		.cfi_endproc
  42              	.LFE62:
  44              		.section	.text.Mass_Status_In,"ax",%progbits
  45              		.align	1
  46              		.global	Mass_Status_In
  47              		.thumb
  48              		.thumb_func
  50              	Mass_Status_In:
  51              	.LFB63:
 242:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 243:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 244:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 245:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 246:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Mass Storage Status IN routine.
 247:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 248:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 249:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_Status_In(void)
 250:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
  52              		.loc 1 250 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE63:
  61              		.section	.text.Mass_Status_Out,"ax",%progbits
  62              		.align	1
  63              		.global	Mass_Status_Out
  64              		.thumb
  65              		.thumb_func
  67              	Mass_Status_Out:
  68              	.LFB64:
 251:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return;
 252:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 253:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 254:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 255:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 256:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Mass Storage Status OUT routine.
 257:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 258:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 259:lib/USB_Functions/msc/src/usb_msc_prop.c **** void Mass_Status_Out(void)
 260:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
  69              		.loc 1 260 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74              		.loc 1 260 0
  75 0000 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE64:
  79              		.section	.text.Mass_Get_Interface_Setting,"ax",%progbits
  80              		.align	1
  81              		.global	Mass_Get_Interface_Setting
  82              		.thumb
  83              		.thumb_func
  85              	Mass_Get_Interface_Setting:
  86              	.LFB67:
 261:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return;
 262:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 263:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 264:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 265:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 266:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Handle the data class specific requests.
 267:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 268:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 269:lib/USB_Functions/msc/src/usb_msc_prop.c **** RESULT Mass_Data_Setup(uint8_t RequestNo)
 270:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 271:lib/USB_Functions/msc/src/usb_msc_prop.c ****   uint8_t    *(*CopyRoutine)(uint16_t);
 272:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 273:lib/USB_Functions/msc/src/usb_msc_prop.c ****   CopyRoutine = NULL;
 274:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 275:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
 276:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
 277:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 278:lib/USB_Functions/msc/src/usb_msc_prop.c ****     CopyRoutine = Get_Max_Lun;
 279:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 280:lib/USB_Functions/msc/src/usb_msc_prop.c ****   else
 281:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 282:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return USB_UNSUPPORT;
 283:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 284:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 285:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (CopyRoutine == NULL)
 286:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 287:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return USB_UNSUPPORT;
 288:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 289:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 290:lib/USB_Functions/msc/src/usb_msc_prop.c ****   pInformation->Ctrl_Info.CopyData = CopyRoutine;
 291:lib/USB_Functions/msc/src/usb_msc_prop.c ****   pInformation->Ctrl_Info.Usb_wOffset = 0;
 292:lib/USB_Functions/msc/src/usb_msc_prop.c ****   (*CopyRoutine)(0);
 293:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 294:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return USB_SUCCESS;
 295:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 296:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 297:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 298:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 299:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 300:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Handle the no data class specific requests.
 301:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 302:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 303:lib/USB_Functions/msc/src/usb_msc_prop.c **** RESULT Mass_NoData_Setup(uint8_t RequestNo)
 304:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 305:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 306:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
 307:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
 308:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 309:lib/USB_Functions/msc/src/usb_msc_prop.c ****    #ifdef STM32F10X_CL 
 310:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Init EP1 IN as Bulk endpoint */
 311:lib/USB_Functions/msc/src/usb_msc_prop.c ****     OTG_DEV_EP_Init(EP1_IN, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);
 312:lib/USB_Functions/msc/src/usb_msc_prop.c ****   
 313:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Init EP2 OUT as Bulk endpoint */
 314:lib/USB_Functions/msc/src/usb_msc_prop.c ****     OTG_DEV_EP_Init(EP2_OUT, OTG_DEV_EP_TYPE_BULK, BULK_MAX_PACKET_SIZE);     
 315:lib/USB_Functions/msc/src/usb_msc_prop.c ****    #else
 316:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Initialize Endpoint 1 */
 317:lib/USB_Functions/msc/src/usb_msc_prop.c ****     ClearDTOG_TX(ENDP1);
 318:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 319:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /* Initialize Endpoint 2 */
 320:lib/USB_Functions/msc/src/usb_msc_prop.c ****     ClearDTOG_RX(ENDP2);
 321:lib/USB_Functions/msc/src/usb_msc_prop.c ****    #endif /* STM32F10X_CL */
 322:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 323:lib/USB_Functions/msc/src/usb_msc_prop.c ****     /*initialize the CBW signature to enable the clear feature*/
 324:lib/USB_Functions/msc/src/usb_msc_prop.c ****     CBW.dSignature = BOT_CBW_SIGNATURE;
 325:lib/USB_Functions/msc/src/usb_msc_prop.c ****     Bot_State = BOT_IDLE;
 326:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 327:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return USB_SUCCESS;
 328:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 329:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return USB_UNSUPPORT;
 330:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 331:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 332:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 333:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 334:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Test the interface and the alternate setting according to the
 335:lib/USB_Functions/msc/src/usb_msc_prop.c **** 			supported one.
 336:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 337:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 338:lib/USB_Functions/msc/src/usb_msc_prop.c **** RESULT Mass_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
 339:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
  87              		.loc 1 339 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL0:
  93              		.loc 1 339 0
 340:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (AlternateSetting > 0)
  94              		.loc 1 340 0
  95 0000 09B1     		cbz	r1, .L7
  96              	.L9:
 341:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 342:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
  97              		.loc 1 342 0
  98 0002 0220     		movs	r0, #2
  99              	.LVL1:
 100 0004 7047     		bx	lr
 101              	.LVL2:
 102              	.L7:
 343:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 344:lib/USB_Functions/msc/src/usb_msc_prop.c ****   else if (Interface > 0)
 103              		.loc 1 344 0
 104 0006 0028     		cmp	r0, #0
 105 0008 FBD1     		bne	.L9
 345:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 346:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
 347:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 348:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return USB_SUCCESS;
 349:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 106              		.loc 1 349 0
 107 000a 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE67:
 111              		.section	.text.Get_Max_Lun,"ax",%progbits
 112              		.align	1
 113              		.global	Get_Max_Lun
 114              		.thumb
 115              		.thumb_func
 117              	Get_Max_Lun:
 118              	.LFB71:
 350:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 351:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 352:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 353:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Get the device descriptor.
 354:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 355:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 356:lib/USB_Functions/msc/src/usb_msc_prop.c **** uint8_t *Mass_GetDeviceDescriptor(uint16_t Length)
 357:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 358:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return Standard_GetDescriptorData(Length, &MSC_Device_Descriptor );
 359:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 360:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 361:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 362:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 363:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Get the configuration descriptor.
 364:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 365:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 366:lib/USB_Functions/msc/src/usb_msc_prop.c **** uint8_t *Mass_GetConfigDescriptor(uint16_t Length)
 367:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 368:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return Standard_GetDescriptorData(Length, &MSC_Config_Descriptor );
 369:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 370:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 371:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 372:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 373:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Get the string descriptors according to the needed index.
 374:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 375:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 376:lib/USB_Functions/msc/src/usb_msc_prop.c **** uint8_t *Mass_GetStringDescriptor(uint16_t Length)
 377:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 378:lib/USB_Functions/msc/src/usb_msc_prop.c ****   uint8_t wValue0 = pInformation->USBwValue0;
 379:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 380:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (wValue0 > 5)
 381:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 382:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return NULL;
 383:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 384:lib/USB_Functions/msc/src/usb_msc_prop.c ****   else
 385:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 386:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return Standard_GetDescriptorData(Length, &MSC_String_Descriptor[wValue0]);
 387:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 388:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 389:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 390:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 391:lib/USB_Functions/msc/src/usb_msc_prop.c **** /*! 
 392:lib/USB_Functions/msc/src/usb_msc_prop.c ****     @brief	Handle the Get Max Lun request.
 393:lib/USB_Functions/msc/src/usb_msc_prop.c **** */
 394:lib/USB_Functions/msc/src/usb_msc_prop.c **** /**************************************************************************/
 395:lib/USB_Functions/msc/src/usb_msc_prop.c **** uint8_t *Get_Max_Lun(uint16_t Length)
 396:lib/USB_Functions/msc/src/usb_msc_prop.c **** {
 119              		.loc 1 396 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL3:
 397:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (Length == 0)
 125              		.loc 1 397 0
 126 0000 20B9     		cbnz	r0, .L13
 398:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 399:lib/USB_Functions/msc/src/usb_msc_prop.c ****     pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
 127              		.loc 1 399 0
 128 0002 034B     		ldr	r3, .L14
 129 0004 1968     		ldr	r1, [r3, #0]
 130 0006 0122     		movs	r2, #1
 131 0008 0A82     		strh	r2, [r1, #16]	@ movhi
 400:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return 0;
 132              		.loc 1 400 0
 133 000a 7047     		bx	lr
 134              	.L13:
 401:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 402:lib/USB_Functions/msc/src/usb_msc_prop.c ****   else
 403:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 404:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return((uint8_t*)(&Max_Lun));
 135              		.loc 1 404 0
 136 000c 0148     		ldr	r0, .L14+4
 137              	.LVL4:
 405:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 406:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 138              		.loc 1 406 0
 139 000e 7047     		bx	lr
 140              	.L15:
 141              		.align	2
 142              	.L14:
 143 0010 00000000 		.word	pInformation
 144 0014 00000000 		.word	.LANCHOR0
 145              		.cfi_endproc
 146              	.LFE71:
 148              		.section	.text.Mass_GetStringDescriptor,"ax",%progbits
 149              		.align	1
 150              		.global	Mass_GetStringDescriptor
 151              		.thumb
 152              		.thumb_func
 154              	Mass_GetStringDescriptor:
 155              	.LFB70:
 377:lib/USB_Functions/msc/src/usb_msc_prop.c ****   uint8_t wValue0 = pInformation->USBwValue0;
 156              		.loc 1 377 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL5:
 378:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 162              		.loc 1 378 0
 163 0000 054B     		ldr	r3, .L18
 164 0002 1968     		ldr	r1, [r3, #0]
 165 0004 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 166              	.LVL6:
 380:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 167              		.loc 1 380 0
 168 0006 052A     		cmp	r2, #5
 169 0008 04D8     		bhi	.L17
 386:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 170              		.loc 1 386 0
 171 000a 044B     		ldr	r3, .L18+4
 172 000c 03EBC201 		add	r1, r3, r2, lsl #3
 173              	.LVL7:
 388:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 174              		.loc 1 388 0
 386:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 175              		.loc 1 386 0
 176 0010 FFF7FEBF 		b	Standard_GetDescriptorData
 177              	.LVL8:
 178              	.L17:
 388:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 179              		.loc 1 388 0
 180 0014 0020     		movs	r0, #0
 181              	.LVL9:
 182 0016 7047     		bx	lr
 183              	.L19:
 184              		.align	2
 185              	.L18:
 186 0018 00000000 		.word	pInformation
 187 001c 00000000 		.word	.LANCHOR1
 188              		.cfi_endproc
 189              	.LFE70:
 191              		.section	.text.Mass_GetConfigDescriptor,"ax",%progbits
 192              		.align	1
 193              		.global	Mass_GetConfigDescriptor
 194              		.thumb
 195              		.thumb_func
 197              	Mass_GetConfigDescriptor:
 198              	.LFB69:
 367:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return Standard_GetDescriptorData(Length, &MSC_Config_Descriptor );
 199              		.loc 1 367 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204              	.LVL10:
 368:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 205              		.loc 1 368 0
 206 0000 0149     		ldr	r1, .L21
 369:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 207              		.loc 1 369 0
 368:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 208              		.loc 1 368 0
 209 0002 FFF7FEBF 		b	Standard_GetDescriptorData
 210              	.LVL11:
 211              	.L22:
 212 0006 00BF     		.align	2
 213              	.L21:
 214 0008 00000000 		.word	.LANCHOR2
 215              		.cfi_endproc
 216              	.LFE69:
 218              		.section	.text.Mass_GetDeviceDescriptor,"ax",%progbits
 219              		.align	1
 220              		.global	Mass_GetDeviceDescriptor
 221              		.thumb
 222              		.thumb_func
 224              	Mass_GetDeviceDescriptor:
 225              	.LFB68:
 357:lib/USB_Functions/msc/src/usb_msc_prop.c ****   return Standard_GetDescriptorData(Length, &MSC_Device_Descriptor );
 226              		.loc 1 357 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              		@ link register save eliminated.
 231              	.LVL12:
 358:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 232              		.loc 1 358 0
 233 0000 0149     		ldr	r1, .L24
 359:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 234              		.loc 1 359 0
 358:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 235              		.loc 1 358 0
 236 0002 FFF7FEBF 		b	Standard_GetDescriptorData
 237              	.LVL13:
 238              	.L25:
 239 0006 00BF     		.align	2
 240              	.L24:
 241 0008 00000000 		.word	.LANCHOR3
 242              		.cfi_endproc
 243              	.LFE68:
 245              		.section	.text.Mass_ClearFeature,"ax",%progbits
 246              		.align	1
 247              		.global	Mass_ClearFeature
 248              		.thumb
 249              		.thumb_func
 251              	Mass_ClearFeature:
 252              	.LFB61:
 227:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* when the host send a CBW with invalid signature or invalid length the two
 253              		.loc 1 227 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 230:lib/USB_Functions/msc/src/usb_msc_prop.c ****     Bot_Abort(BOTH_DIR);
 258              		.loc 1 230 0
 259 0000 044B     		ldr	r3, .L28
 260 0002 1A68     		ldr	r2, [r3, #0]
 261 0004 0448     		ldr	r0, .L28+4
 262 0006 8242     		cmp	r2, r0
 263 0008 02D0     		beq	.L26
 231:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 264              		.loc 1 231 0
 265 000a 0220     		movs	r0, #2
 232:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 266              		.loc 1 232 0
 231:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 267              		.loc 1 231 0
 268 000c FFF7FEBF 		b	Bot_Abort
 269              	.LVL14:
 270              	.L26:
 271 0010 7047     		bx	lr
 272              	.L29:
 273 0012 00BF     		.align	2
 274              	.L28:
 275 0014 00000000 		.word	CBW
 276 0018 55534243 		.word	1128420181
 277              		.cfi_endproc
 278              	.LFE61:
 280              		.section	.text.Mass_Reset,"ax",%progbits
 281              		.align	1
 282              		.global	Mass_Reset
 283              		.thumb
 284              		.thumb_func
 286              	Mass_Reset:
 287              	.LFB59:
 124:lib/USB_Functions/msc/src/usb_msc_prop.c ****   /* Set the device as not configured */
 288              		.loc 1 124 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 38B5     		push	{r3, r4, r5, lr}
 293              	.LCFI0:
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 3, -16
 296              		.cfi_offset 4, -12
 297              		.cfi_offset 5, -8
 298              		.cfi_offset 14, -4
 126:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 299              		.loc 1 126 0
 300 0002 0024     		movs	r4, #0
 301 0004 374B     		ldr	r3, .L31
 302 0006 9C72     		strb	r4, [r3, #10]
 129:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 303              		.loc 1 129 0
 304 0008 3748     		ldr	r0, .L31+4
 305 000a 0168     		ldr	r1, [r0, #0]
 306 000c 374A     		ldr	r2, .L31+8
 307 000e D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 308 0010 4D72     		strb	r5, [r1, #9]
 143:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 309              		.loc 1 143 0
 310 0012 2046     		mov	r0, r4
 311 0014 FFF7FEFF 		bl	SetBTABLE
 312              	.LVL15:
 146:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP0, EP_TX_NAK);
 313              		.loc 1 146 0
 314 0018 2046     		mov	r0, r4
 315 001a 4FF40071 		mov	r1, #512
 316 001e FFF7FEFF 		bl	SetEPType
 317              	.LVL16:
 147:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxAddr(ENDP0, MSC_ENDP0_RXADDR);
 318              		.loc 1 147 0
 319 0022 2046     		mov	r0, r4
 320 0024 2021     		movs	r1, #32
 321 0026 FFF7FEFF 		bl	SetEPTxStatus
 322              	.LVL17:
 148:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 323              		.loc 1 148 0
 324 002a 2046     		mov	r0, r4
 325 002c 1821     		movs	r1, #24
 326 002e FFF7FEFF 		bl	SetEPRxAddr
 327              	.LVL18:
 149:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxAddr(ENDP0, MSC_ENDP0_TXADDR);
 328              		.loc 1 149 0
 329 0032 2F4D     		ldr	r5, .L31+12
 330 0034 2046     		mov	r0, r4
 331 0036 95F82C10 		ldrb	r1, [r5, #44]	@ zero_extendqisi2
 332 003a FFF7FEFF 		bl	SetEPRxCount
 333              	.LVL19:
 150:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Clear_Status_Out(ENDP0);
 334              		.loc 1 150 0
 335 003e 2046     		mov	r0, r4
 336 0040 5821     		movs	r1, #88
 337 0042 FFF7FEFF 		bl	SetEPTxAddr
 338              	.LVL20:
 151:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxValid(ENDP0);
 339              		.loc 1 151 0
 340 0046 2046     		mov	r0, r4
 341 0048 FFF7FEFF 		bl	Clear_Status_Out
 342              	.LVL21:
 152:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 343              		.loc 1 152 0
 344 004c 2046     		mov	r0, r4
 345 004e FFF7FEFF 		bl	SetEPRxValid
 346              	.LVL22:
 155:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxAddr(ENDP1, MSC_ENDP1_TXADDR);
 347              		.loc 1 155 0
 348 0052 0120     		movs	r0, #1
 349 0054 2146     		mov	r1, r4
 350 0056 FFF7FEFF 		bl	SetEPType
 351              	.LVL23:
 156:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP1, EP_TX_NAK);
 352              		.loc 1 156 0
 353 005a 0120     		movs	r0, #1
 354 005c 9821     		movs	r1, #152
 355 005e FFF7FEFF 		bl	SetEPTxAddr
 356              	.LVL24:
 157:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxStatus(ENDP1, EP_RX_DIS);
 357              		.loc 1 157 0
 358 0062 0120     		movs	r0, #1
 359 0064 2021     		movs	r1, #32
 360 0066 FFF7FEFF 		bl	SetEPTxStatus
 361              	.LVL25:
 158:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 362              		.loc 1 158 0
 363 006a 0120     		movs	r0, #1
 364 006c 2146     		mov	r1, r4
 365 006e FFF7FEFF 		bl	SetEPRxStatus
 366              	.LVL26:
 170:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDoubleBuff(ENDP2); 
 367              		.loc 1 170 0
 368 0072 0220     		movs	r0, #2
 369 0074 2146     		mov	r1, r4
 370 0076 FFF7FEFF 		bl	SetEPType
 371              	.LVL27:
 171:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDblBuffAddr(ENDP2, MSC_ENDP2_BUF0Addr, MSC_ENDP2_BUF1Addr); 
 372              		.loc 1 171 0
 373 007a 0220     		movs	r0, #2
 374 007c FFF7FEFF 		bl	SetEPDoubleBuff
 375              	.LVL28:
 172:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPDblBuffCount(ENDP2, EP_DBUF_OUT, Device_Property.MaxPacketSize); 
 376              		.loc 1 172 0
 377 0080 0220     		movs	r0, #2
 378 0082 D821     		movs	r1, #216
 379 0084 4FF48C72 		mov	r2, #280
 380 0088 FFF7FEFF 		bl	SetEPDblBuffAddr
 381              	.LVL29:
 173:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ClearDTOG_RX(ENDP2); 
 382              		.loc 1 173 0
 383 008c 0220     		movs	r0, #2
 384 008e 0121     		movs	r1, #1
 385 0090 95F82C20 		ldrb	r2, [r5, #44]	@ zero_extendqisi2
 386 0094 FFF7FEFF 		bl	SetEPDblBuffCount
 387              	.LVL30:
 174:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ClearDTOG_TX(ENDP2); 
 388              		.loc 1 174 0
 389 0098 0220     		movs	r0, #2
 390 009a FFF7FEFF 		bl	ClearDTOG_RX
 391              	.LVL31:
 175:lib/USB_Functions/msc/src/usb_msc_prop.c ****   ToggleDTOG_TX(ENDP2); 
 392              		.loc 1 175 0
 393 009e 0220     		movs	r0, #2
 394 00a0 FFF7FEFF 		bl	ClearDTOG_TX
 395              	.LVL32:
 176:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxStatus(ENDP2, EP_RX_VALID); 
 396              		.loc 1 176 0
 397 00a4 0220     		movs	r0, #2
 398 00a6 FFF7FEFF 		bl	ToggleDTOG_TX
 399              	.LVL33:
 177:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPTxStatus(ENDP2, EP_TX_DIS);  
 400              		.loc 1 177 0
 401 00aa 0220     		movs	r0, #2
 402 00ac 4FF44051 		mov	r1, #12288
 403 00b0 FFF7FEFF 		bl	SetEPRxStatus
 404              	.LVL34:
 178:lib/USB_Functions/msc/src/usb_msc_prop.c ****  /* Nemui added */
 405              		.loc 1 178 0
 406 00b4 0220     		movs	r0, #2
 407 00b6 2146     		mov	r1, r4
 408 00b8 FFF7FEFF 		bl	SetEPTxStatus
 409              	.LVL35:
 181:lib/USB_Functions/msc/src/usb_msc_prop.c ****   SetEPRxValid(ENDP0);
 410              		.loc 1 181 0
 411 00bc 2046     		mov	r0, r4
 412 00be 95F82C10 		ldrb	r1, [r5, #44]	@ zero_extendqisi2
 413 00c2 FFF7FEFF 		bl	SetEPRxCount
 414              	.LVL36:
 182:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 415              		.loc 1 182 0
 416 00c6 2046     		mov	r0, r4
 417 00c8 FFF7FEFF 		bl	SetEPRxValid
 418              	.LVL37:
 185:lib/USB_Functions/msc/src/usb_msc_prop.c **** #endif /* STM32F10X_CL */
 419              		.loc 1 185 0
 420 00cc 2046     		mov	r0, r4
 421 00ce FFF7FEFF 		bl	SetDeviceAddress
 422              	.LVL38:
 188:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 423              		.loc 1 188 0
 424 00d2 0120     		movs	r0, #1
 425 00d4 074B     		ldr	r3, .L31+16
 426 00d6 1860     		str	r0, [r3, #0]
 190:lib/USB_Functions/msc/src/usb_msc_prop.c ****   Bot_State = BOT_IDLE;
 427              		.loc 1 190 0
 428 00d8 0749     		ldr	r1, .L31+20
 429 00da 084A     		ldr	r2, .L31+24
 430 00dc 1160     		str	r1, [r2, #0]
 191:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 431              		.loc 1 191 0
 432 00de 0848     		ldr	r0, .L31+28
 433 00e0 0470     		strb	r4, [r0, #0]
 434 00e2 38BD     		pop	{r3, r4, r5, pc}
 435              	.L32:
 436              		.align	2
 437              	.L31:
 438 00e4 00000000 		.word	Device_Info
 439 00e8 00000000 		.word	pInformation
 440 00ec 00000000 		.word	Mass_ConfigDescriptor
 441 00f0 00000000 		.word	Device_Property
 442 00f4 00000000 		.word	bDeviceState
 443 00f8 55534243 		.word	1128420181
 444 00fc 00000000 		.word	CBW
 445 0100 00000000 		.word	Bot_State
 446              		.cfi_endproc
 447              	.LFE59:
 449              		.section	.text.Mass_init,"ax",%progbits
 450              		.align	1
 451              		.global	Mass_init
 452              		.thumb
 453              		.thumb_func
 455              	Mass_init:
 456              	.LFB58:
 100:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 457              		.loc 1 100 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461 0000 10B5     		push	{r4, lr}
 462              	.LCFI1:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 4, -8
 465              		.cfi_offset 14, -4
 104:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 466              		.loc 1 104 0
 467 0002 0848     		ldr	r0, .L34
 468 0004 00F11001 		add	r1, r0, #16
 469 0008 FFF7FEFF 		bl	Get_SerialNum
 470              	.LVL39:
 107:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 471              		.loc 1 107 0
 472 000c 064B     		ldr	r3, .L34+4
 473 000e 1868     		ldr	r0, [r3, #0]
 474 0010 0024     		movs	r4, #0
 475 0012 8472     		strb	r4, [r0, #10]
 110:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 476              		.loc 1 110 0
 477 0014 FFF7FEFF 		bl	PowerOn
 478              	.LVL40:
 113:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 479              		.loc 1 113 0
 480 0018 FFF7FEFF 		bl	USB_SIL_Init
 481              	.LVL41:
 115:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 482              		.loc 1 115 0
 483 001c 0349     		ldr	r1, .L34+8
 484 001e 0C60     		str	r4, [r1, #0]
 485 0020 10BD     		pop	{r4, pc}
 486              	.L35:
 487 0022 00BF     		.align	2
 488              	.L34:
 489 0024 02000000 		.word	Mass_StringSerial+2
 490 0028 00000000 		.word	pInformation
 491 002c 00000000 		.word	bDeviceState
 492              		.cfi_endproc
 493              	.LFE58:
 495              		.section	.text.Mass_NoData_Setup,"ax",%progbits
 496              		.align	1
 497              		.global	Mass_NoData_Setup
 498              		.thumb
 499              		.thumb_func
 501              	Mass_NoData_Setup:
 502              	.LFB66:
 304:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 503              		.loc 1 304 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL42:
 508 0000 10B5     		push	{r4, lr}
 509              	.LCFI2:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 4, -8
 512              		.cfi_offset 14, -4
 305:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
 513              		.loc 1 305 0
 514 0002 0E4B     		ldr	r3, .L42
 515 0004 1968     		ldr	r1, [r3, #0]
 516 0006 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 517 0008 02F07F03 		and	r3, r2, #127
 518 000c 212B     		cmp	r3, #33
 519 000e 12D1     		bne	.L41
 306:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
 520              		.loc 1 306 0
 521 0010 FF28     		cmp	r0, #255
 522 0012 10D1     		bne	.L41
 306:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
 523              		.loc 1 306 0 is_stmt 0 discriminator 1
 524 0014 4888     		ldrh	r0, [r1, #2]
 525              	.LVL43:
 526 0016 70B9     		cbnz	r0, .L41
 307:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 527              		.loc 1 307 0 is_stmt 1
 528 0018 4C68     		ldr	r4, [r1, #4]
 529 001a 64B9     		cbnz	r4, .L41
 530              	.LBB4:
 531              	.LBB5:
 317:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 532              		.loc 1 317 0
 533 001c 0120     		movs	r0, #1
 534 001e FFF7FEFF 		bl	ClearDTOG_TX
 535              	.LVL44:
 320:lib/USB_Functions/msc/src/usb_msc_prop.c ****    #endif /* STM32F10X_CL */
 536              		.loc 1 320 0
 537 0022 0220     		movs	r0, #2
 538 0024 FFF7FEFF 		bl	ClearDTOG_RX
 539              	.LVL45:
 324:lib/USB_Functions/msc/src/usb_msc_prop.c ****     Bot_State = BOT_IDLE;
 540              		.loc 1 324 0
 541 0028 0549     		ldr	r1, .L42+4
 542 002a 064A     		ldr	r2, .L42+8
 543 002c 1160     		str	r1, [r2, #0]
 325:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 544              		.loc 1 325 0
 545 002e 064B     		ldr	r3, .L42+12
 546 0030 1C70     		strb	r4, [r3, #0]
 547 0032 2046     		mov	r0, r4
 548 0034 10BD     		pop	{r4, pc}
 549              	.L41:
 550              	.LBE5:
 551              	.LBE4:
 329:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 552              		.loc 1 329 0
 553 0036 0220     		movs	r0, #2
 330:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 554              		.loc 1 330 0
 555 0038 10BD     		pop	{r4, pc}
 556              	.L43:
 557 003a 00BF     		.align	2
 558              	.L42:
 559 003c 00000000 		.word	pInformation
 560 0040 55534243 		.word	1128420181
 561 0044 00000000 		.word	CBW
 562 0048 00000000 		.word	Bot_State
 563              		.cfi_endproc
 564              	.LFE66:
 566              		.section	.text.Mass_SetConfiguration,"ax",%progbits
 567              		.align	1
 568              		.global	Mass_SetConfiguration
 569              		.thumb
 570              		.thumb_func
 572              	Mass_SetConfiguration:
 573              	.LFB60:
 200:lib/USB_Functions/msc/src/usb_msc_prop.c ****   if (pInformation->Current_Configuration != 0)
 574              		.loc 1 200 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578 0000 08B5     		push	{r3, lr}
 579              	.LCFI3:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 3, -8
 582              		.cfi_offset 14, -4
 201:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 583              		.loc 1 201 0
 584 0002 084B     		ldr	r3, .L49
 585 0004 1868     		ldr	r0, [r3, #0]
 586 0006 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 587 0008 59B1     		cbz	r1, .L44
 588              	.LBB8:
 589              	.LBB9:
 204:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 590              		.loc 1 204 0
 591 000a 0522     		movs	r2, #5
 592 000c 064B     		ldr	r3, .L49+4
 593 000e 1A60     		str	r2, [r3, #0]
 213:lib/USB_Functions/msc/src/usb_msc_prop.c ****     ClearDTOG_RX(ENDP2);
 594              		.loc 1 213 0
 595 0010 0120     		movs	r0, #1
 596 0012 FFF7FEFF 		bl	ClearDTOG_TX
 597              	.LVL46:
 214:lib/USB_Functions/msc/src/usb_msc_prop.c **** #endif /* STM32F10X_CL */
 598              		.loc 1 214 0
 599 0016 0220     		movs	r0, #2
 600 0018 FFF7FEFF 		bl	ClearDTOG_RX
 601              	.LVL47:
 217:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 602              		.loc 1 217 0
 603 001c 0020     		movs	r0, #0
 604 001e 0349     		ldr	r1, .L49+8
 605 0020 0870     		strb	r0, [r1, #0]
 606              	.L44:
 607 0022 08BD     		pop	{r3, pc}
 608              	.L50:
 609              		.align	2
 610              	.L49:
 611 0024 00000000 		.word	pInformation
 612 0028 00000000 		.word	bDeviceState
 613 002c 00000000 		.word	Bot_State
 614              	.LBE9:
 615              	.LBE8:
 616              		.cfi_endproc
 617              	.LFE60:
 619              		.section	.text.Mass_Data_Setup,"ax",%progbits
 620              		.align	1
 621              		.global	Mass_Data_Setup
 622              		.thumb
 623              		.thumb_func
 625              	Mass_Data_Setup:
 626              	.LFB65:
 270:lib/USB_Functions/msc/src/usb_msc_prop.c ****   uint8_t    *(*CopyRoutine)(uint16_t);
 627              		.loc 1 270 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL48:
 633              	.LVL49:
 274:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
 634              		.loc 1 274 0
 635 0000 0B4B     		ldr	r3, .L57
 636 0002 1968     		ldr	r1, [r3, #0]
 637 0004 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 638 0006 02F07F03 		and	r3, r2, #127
 639 000a 212B     		cmp	r3, #33
 640 000c 0DD1     		bne	.L56
 275:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
 641              		.loc 1 275 0
 642 000e FE28     		cmp	r0, #254
 643 0010 0BD1     		bne	.L56
 275:lib/USB_Functions/msc/src/usb_msc_prop.c ****       && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
 644              		.loc 1 275 0 is_stmt 0 discriminator 1
 645 0012 4888     		ldrh	r0, [r1, #2]
 646              	.LVL50:
 647 0014 48B9     		cbnz	r0, .L56
 276:lib/USB_Functions/msc/src/usb_msc_prop.c ****   {
 648              		.loc 1 276 0 is_stmt 1
 649 0016 4A68     		ldr	r2, [r1, #4]
 650 0018 B2F5803F 		cmp	r2, #65536
 651 001c 05D1     		bne	.L56
 652              	.LVL51:
 290:lib/USB_Functions/msc/src/usb_msc_prop.c ****   pInformation->Ctrl_Info.Usb_wOffset = 0;
 653              		.loc 1 290 0
 654 001e 054B     		ldr	r3, .L57+4
 655 0020 8B61     		str	r3, [r1, #24]
 291:lib/USB_Functions/msc/src/usb_msc_prop.c ****   (*CopyRoutine)(0);
 656              		.loc 1 291 0
 657 0022 4882     		strh	r0, [r1, #18]	@ movhi
 658              	.LVL52:
 659              	.LBB12:
 660              	.LBB13:
 399:lib/USB_Functions/msc/src/usb_msc_prop.c ****     return 0;
 661              		.loc 1 399 0
 662 0024 0122     		movs	r2, #1
 663 0026 0A82     		strh	r2, [r1, #16]	@ movhi
 664 0028 7047     		bx	lr
 665              	.LVL53:
 666              	.L56:
 667              	.LBE13:
 668              	.LBE12:
 282:lib/USB_Functions/msc/src/usb_msc_prop.c ****   }
 669              		.loc 1 282 0
 670 002a 0220     		movs	r0, #2
 296:lib/USB_Functions/msc/src/usb_msc_prop.c **** 
 671              		.loc 1 296 0
 672 002c 7047     		bx	lr
 673              	.L58:
 674 002e 00BF     		.align	2
 675              	.L57:
 676 0030 00000000 		.word	pInformation
 677 0034 00000000 		.word	Get_Max_Lun
 678              		.cfi_endproc
 679              	.LFE65:
 681              		.section	.text.MSC_SetStructure,"ax",%progbits
 682              		.align	1
 683              		.global	MSC_SetStructure
 684              		.thumb
 685              		.thumb_func
 687              	MSC_SetStructure:
 688              	.LFB57:
  70:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	Device_Table.Total_Endpoint	= MSC_EP_NUM;
 689              		.loc 1 70 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              		@ link register save eliminated.
  71:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	xinit						= Mass_init;
 694              		.loc 1 71 0
 695 0000 0322     		movs	r2, #3
 696 0002 1B4B     		ldr	r3, .L60
 697 0004 1A70     		strb	r2, [r3, #0]
  72:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xReset 						= Mass_Reset;
 698              		.loc 1 72 0
 699 0006 1B48     		ldr	r0, .L60+4
 700 0008 1B49     		ldr	r1, .L60+8
 701 000a 0860     		str	r0, [r1, #0]
  73:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xStatus_In					= Mass_Status_In;
 702              		.loc 1 73 0
 703 000c 1B4A     		ldr	r2, .L60+12
 704 000e 1C4B     		ldr	r3, .L60+16
 705 0010 1A60     		str	r2, [r3, #0]
  74:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xStatus_Out					= Mass_Status_Out;
 706              		.loc 1 74 0
 707 0012 1C48     		ldr	r0, .L60+20
 708 0014 1C49     		ldr	r1, .L60+24
 709 0016 0860     		str	r0, [r1, #0]
  75:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xData_Setup					= Mass_Data_Setup;
 710              		.loc 1 75 0
 711 0018 1C4A     		ldr	r2, .L60+28
 712 001a 1D4B     		ldr	r3, .L60+32
 713 001c 1A60     		str	r2, [r3, #0]
  76:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xNoData_Setup				= Mass_NoData_Setup;
 714              		.loc 1 76 0
 715 001e 1D48     		ldr	r0, .L60+36
 716 0020 1D49     		ldr	r1, .L60+40
 717 0022 0860     		str	r0, [r1, #0]
  77:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGet_Interface_Setting		= Mass_Get_Interface_Setting;
 718              		.loc 1 77 0
 719 0024 1D4A     		ldr	r2, .L60+44
 720 0026 1E4B     		ldr	r3, .L60+48
 721 0028 1A60     		str	r2, [r3, #0]
  78:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetDeviceDescriptor		= Mass_GetDeviceDescriptor;
 722              		.loc 1 78 0
 723 002a 1E48     		ldr	r0, .L60+52
 724 002c 1E49     		ldr	r1, .L60+56
 725 002e 0860     		str	r0, [r1, #0]
  79:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetConfigDescriptor		= Mass_GetConfigDescriptor;
 726              		.loc 1 79 0
 727 0030 1E4A     		ldr	r2, .L60+60
 728 0032 1F4B     		ldr	r3, .L60+64
 729 0034 1A60     		str	r2, [r3, #0]
  80:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetStringDescriptor		= Mass_GetStringDescriptor;
 730              		.loc 1 80 0
 731 0036 1F48     		ldr	r0, .L60+68
 732 0038 1F49     		ldr	r1, .L60+72
 733 003a 0860     		str	r0, [r1, #0]
  81:lib/USB_Functions/msc/src/usb_msc_prop.c **** 	
 734              		.loc 1 81 0
 735 003c 1F4A     		ldr	r2, .L60+76
 736 003e 204B     		ldr	r3, .L60+80
 737 0040 1A60     		str	r2, [r3, #0]
  83:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetConfiguration			= Mass_SetConfiguration;
 738              		.loc 1 83 0
 739 0042 2048     		ldr	r0, .L60+84
 740 0044 2049     		ldr	r1, .L60+88
 741 0046 0860     		str	r0, [r1, #0]
  84:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetInterface				= Mass_GetInterface;
 742              		.loc 1 84 0
 743 0048 204B     		ldr	r3, .L60+92
 744 004a 214A     		ldr	r2, .L60+96
 745 004c 1360     		str	r3, [r2, #0]
  85:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetInterface				= Mass_SetInterface;
 746              		.loc 1 85 0
 747 004e 2149     		ldr	r1, .L60+100
 748 0050 0860     		str	r0, [r1, #0]
  86:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xGetStatus					= Mass_GetStatus;
 749              		.loc 1 86 0
 750 0052 214B     		ldr	r3, .L60+104
 751 0054 1860     		str	r0, [r3, #0]
  87:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xClearFeature				= Mass_ClearFeature;
 752              		.loc 1 87 0
 753 0056 214A     		ldr	r2, .L60+108
 754 0058 1060     		str	r0, [r2, #0]
  88:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetEndPointFeature			= Mass_SetEndPointFeature;
 755              		.loc 1 88 0
 756 005a 2149     		ldr	r1, .L60+112
 757 005c 214B     		ldr	r3, .L60+116
 758 005e 1960     		str	r1, [r3, #0]
  89:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetDeviceFeature			= Mass_SetDeviceFeature;
 759              		.loc 1 89 0
 760 0060 214A     		ldr	r2, .L60+120
 761 0062 1060     		str	r0, [r2, #0]
  90:lib/USB_Functions/msc/src/usb_msc_prop.c ****     xSetDeviceAddress           = Mass_SetDeviceAddress;
 762              		.loc 1 90 0
 763 0064 2149     		ldr	r1, .L60+124
 764 0066 0860     		str	r0, [r1, #0]
  91:lib/USB_Functions/msc/src/usb_msc_prop.c **** }
 765              		.loc 1 91 0
 766 0068 2148     		ldr	r0, .L60+128
 767 006a 224B     		ldr	r3, .L60+132
 768 006c 1860     		str	r0, [r3, #0]
 769 006e 7047     		bx	lr
 770              	.L61:
 771              		.align	2
 772              	.L60:
 773 0070 00000000 		.word	Device_Table
 774 0074 00000000 		.word	Mass_init
 775 0078 00000000 		.word	xinit
 776 007c 00000000 		.word	Mass_Reset
 777 0080 00000000 		.word	xReset
 778 0084 00000000 		.word	Mass_Status_In
 779 0088 00000000 		.word	xStatus_In
 780 008c 00000000 		.word	Mass_Status_Out
 781 0090 00000000 		.word	xStatus_Out
 782 0094 00000000 		.word	Mass_Data_Setup
 783 0098 00000000 		.word	xData_Setup
 784 009c 00000000 		.word	Mass_NoData_Setup
 785 00a0 00000000 		.word	xNoData_Setup
 786 00a4 00000000 		.word	Mass_Get_Interface_Setting
 787 00a8 00000000 		.word	xGet_Interface_Setting
 788 00ac 00000000 		.word	Mass_GetDeviceDescriptor
 789 00b0 00000000 		.word	xGetDeviceDescriptor
 790 00b4 00000000 		.word	Mass_GetConfigDescriptor
 791 00b8 00000000 		.word	xGetConfigDescriptor
 792 00bc 00000000 		.word	Mass_GetStringDescriptor
 793 00c0 00000000 		.word	xGetStringDescriptor
 794 00c4 00000000 		.word	NOP_Process
 795 00c8 00000000 		.word	xGetConfiguration
 796 00cc 00000000 		.word	Mass_SetConfiguration
 797 00d0 00000000 		.word	xSetConfiguration
 798 00d4 00000000 		.word	xGetInterface
 799 00d8 00000000 		.word	xSetInterface
 800 00dc 00000000 		.word	xGetStatus
 801 00e0 00000000 		.word	Mass_ClearFeature
 802 00e4 00000000 		.word	xClearFeature
 803 00e8 00000000 		.word	xSetEndPointFeature
 804 00ec 00000000 		.word	xSetDeviceFeature
 805 00f0 00000000 		.word	Mass_SetDeviceAddress
 806 00f4 00000000 		.word	xSetDeviceAddress
 807              		.cfi_endproc
 808              	.LFE57:
 810              		.global	MSC_String_Descriptor
 811              		.global	MSC_Config_Descriptor
 812              		.global	MSC_Device_Descriptor
 813              		.global	Max_Lun
 814              		.section	.data.MSC_Device_Descriptor,"aw",%progbits
 815              		.align	2
 816              		.set	.LANCHOR3,. + 0
 819              	MSC_Device_Descriptor:
 820 0000 00000000 		.word	Mass_DeviceDescriptor
 821 0004 1200     		.short	18
 822 0006 0000     		.space	2
 823              		.section	.data.MSC_String_Descriptor,"aw",%progbits
 824              		.align	2
 825              		.set	.LANCHOR1,. + 0
 828              	MSC_String_Descriptor:
 829 0000 00000000 		.word	Mass_StringLangID
 830 0004 0400     		.short	4
 831 0006 0000     		.space	2
 832 0008 00000000 		.word	Mass_StringVendor
 833 000c 2600     		.short	38
 834 000e 0000     		.space	2
 835 0010 00000000 		.word	Mass_StringProduct
 836 0014 2600     		.short	38
 837 0016 0000     		.space	2
 838 0018 00000000 		.word	Mass_StringSerial
 839 001c 1A00     		.short	26
 840 001e 0000     		.space	2
 841 0020 00000000 		.word	Mass_StringInterface
 842 0024 1000     		.short	16
 843 0026 0000     		.space	2
 844              		.section	.data.MSC_Config_Descriptor,"aw",%progbits
 845              		.align	2
 846              		.set	.LANCHOR2,. + 0
 849              	MSC_Config_Descriptor:
 850 0000 00000000 		.word	Mass_ConfigDescriptor
 851 0004 2000     		.short	32
 852 0006 0000     		.space	2
 853              		.section	.bss.Max_Lun,"aw",%nobits
 854              		.align	2
 855              		.set	.LANCHOR0,. + 0
 858              	Max_Lun:
 859 0000 00000000 		.space	4
 860              		.text
 861              	.Letext0:
 862              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 863              		.file 3 "./lib/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 864              		.file 4 "./lib/USB_Functions/usb_pwr.h"
 865              		.file 5 "./lib/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 866              		.file 6 "./lib/STM32_USB-FS-Device_Driver/inc/usb_def.h"
 867              		.file 7 "./lib/USB_Functions/msc/inc/usb_msc_bot.h"
 868              		.file 8 "./lib/CMSIS/Include/core_cm3.h"
 869              		.file 9 "./inc/systick.h"
 870              		.file 10 "./lib/USB_Functions/msc/inc/usb_msc_desc.h"
 871              		.file 11 "./lib/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 872              		.file 12 "./lib/USB_Functions/usb_prop.h"
 873              		.file 13 "./lib/STM32_USB-FS-Device_Driver/inc/usb_sil.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_msc_prop.c
  R:\TEMP\ccLWLvKT.s:19     .text.Mass_SetDeviceAddress:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:24     .text.Mass_SetDeviceAddress:0000000000000000 Mass_SetDeviceAddress
  R:\TEMP\ccLWLvKT.s:40     .text.Mass_SetDeviceAddress:0000000000000008 $d
  R:\TEMP\ccLWLvKT.s:45     .text.Mass_Status_In:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:50     .text.Mass_Status_In:0000000000000000 Mass_Status_In
  R:\TEMP\ccLWLvKT.s:62     .text.Mass_Status_Out:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:67     .text.Mass_Status_Out:0000000000000000 Mass_Status_Out
  R:\TEMP\ccLWLvKT.s:80     .text.Mass_Get_Interface_Setting:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:85     .text.Mass_Get_Interface_Setting:0000000000000000 Mass_Get_Interface_Setting
  R:\TEMP\ccLWLvKT.s:112    .text.Get_Max_Lun:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:117    .text.Get_Max_Lun:0000000000000000 Get_Max_Lun
  R:\TEMP\ccLWLvKT.s:143    .text.Get_Max_Lun:0000000000000010 $d
  R:\TEMP\ccLWLvKT.s:149    .text.Mass_GetStringDescriptor:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:154    .text.Mass_GetStringDescriptor:0000000000000000 Mass_GetStringDescriptor
  R:\TEMP\ccLWLvKT.s:186    .text.Mass_GetStringDescriptor:0000000000000018 $d
  R:\TEMP\ccLWLvKT.s:192    .text.Mass_GetConfigDescriptor:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:197    .text.Mass_GetConfigDescriptor:0000000000000000 Mass_GetConfigDescriptor
  R:\TEMP\ccLWLvKT.s:214    .text.Mass_GetConfigDescriptor:0000000000000008 $d
  R:\TEMP\ccLWLvKT.s:219    .text.Mass_GetDeviceDescriptor:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:224    .text.Mass_GetDeviceDescriptor:0000000000000000 Mass_GetDeviceDescriptor
  R:\TEMP\ccLWLvKT.s:241    .text.Mass_GetDeviceDescriptor:0000000000000008 $d
  R:\TEMP\ccLWLvKT.s:246    .text.Mass_ClearFeature:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:251    .text.Mass_ClearFeature:0000000000000000 Mass_ClearFeature
  R:\TEMP\ccLWLvKT.s:275    .text.Mass_ClearFeature:0000000000000014 $d
  R:\TEMP\ccLWLvKT.s:281    .text.Mass_Reset:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:286    .text.Mass_Reset:0000000000000000 Mass_Reset
  R:\TEMP\ccLWLvKT.s:438    .text.Mass_Reset:00000000000000e4 $d
  R:\TEMP\ccLWLvKT.s:450    .text.Mass_init:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:455    .text.Mass_init:0000000000000000 Mass_init
  R:\TEMP\ccLWLvKT.s:489    .text.Mass_init:0000000000000024 $d
  R:\TEMP\ccLWLvKT.s:496    .text.Mass_NoData_Setup:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:501    .text.Mass_NoData_Setup:0000000000000000 Mass_NoData_Setup
  R:\TEMP\ccLWLvKT.s:559    .text.Mass_NoData_Setup:000000000000003c $d
  R:\TEMP\ccLWLvKT.s:567    .text.Mass_SetConfiguration:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:572    .text.Mass_SetConfiguration:0000000000000000 Mass_SetConfiguration
  R:\TEMP\ccLWLvKT.s:611    .text.Mass_SetConfiguration:0000000000000024 $d
  R:\TEMP\ccLWLvKT.s:620    .text.Mass_Data_Setup:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:625    .text.Mass_Data_Setup:0000000000000000 Mass_Data_Setup
  R:\TEMP\ccLWLvKT.s:676    .text.Mass_Data_Setup:0000000000000030 $d
  R:\TEMP\ccLWLvKT.s:682    .text.MSC_SetStructure:0000000000000000 $t
  R:\TEMP\ccLWLvKT.s:687    .text.MSC_SetStructure:0000000000000000 MSC_SetStructure
  R:\TEMP\ccLWLvKT.s:773    .text.MSC_SetStructure:0000000000000070 $d
  R:\TEMP\ccLWLvKT.s:828    .data.MSC_String_Descriptor:0000000000000000 MSC_String_Descriptor
  R:\TEMP\ccLWLvKT.s:849    .data.MSC_Config_Descriptor:0000000000000000 MSC_Config_Descriptor
  R:\TEMP\ccLWLvKT.s:819    .data.MSC_Device_Descriptor:0000000000000000 MSC_Device_Descriptor
  R:\TEMP\ccLWLvKT.s:858    .bss.Max_Lun:0000000000000000 Max_Lun
  R:\TEMP\ccLWLvKT.s:815    .data.MSC_Device_Descriptor:0000000000000000 $d
  R:\TEMP\ccLWLvKT.s:824    .data.MSC_String_Descriptor:0000000000000000 $d
  R:\TEMP\ccLWLvKT.s:845    .data.MSC_Config_Descriptor:0000000000000000 $d
  R:\TEMP\ccLWLvKT.s:854    .bss.Max_Lun:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
bDeviceState
pInformation
Standard_GetDescriptorData
Bot_Abort
CBW
SetBTABLE
SetEPType
SetEPTxStatus
SetEPRxAddr
SetEPRxCount
SetEPTxAddr
Clear_Status_Out
SetEPRxValid
SetEPRxStatus
SetEPDoubleBuff
SetEPDblBuffAddr
SetEPDblBuffCount
ClearDTOG_RX
ClearDTOG_TX
ToggleDTOG_TX
SetDeviceAddress
Device_Info
Mass_ConfigDescriptor
Device_Property
Bot_State
Get_SerialNum
PowerOn
USB_SIL_Init
Mass_StringSerial
Device_Table
xinit
xReset
xStatus_In
xStatus_Out
xData_Setup
xNoData_Setup
xGet_Interface_Setting
xGetDeviceDescriptor
xGetConfigDescriptor
xGetStringDescriptor
NOP_Process
xGetConfiguration
xSetConfiguration
xGetInterface
xSetInterface
xGetStatus
xClearFeature
xSetEndPointFeature
xSetDeviceFeature
xSetDeviceAddress
Mass_DeviceDescriptor
Mass_StringLangID
Mass_StringVendor
Mass_StringProduct
Mass_StringInterface
