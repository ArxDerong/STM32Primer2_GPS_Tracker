   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_msc_mass_mal.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MAL_Init,"ax",%progbits
  19              		.align	1
  20              		.global	MAL_Init
  21              		.thumb
  22              		.thumb_func
  24              	MAL_Init:
  25              	.LFB56:
  26              		.file 1 "lib/USB_Functions/msc/src/usb_msc_mass_mal.c"
   1:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /********************************************************************************/
   2:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /*!
   3:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	@file			usb_msc_mass_mal.c
   4:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @version        1.00
   6:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @date           2012.01.30
   7:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	@brief          Descriptor Header for Mal.
   8:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 					Based On STMicro's Sample Thanks!
   9:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  10:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @section HISTORY
  11:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		2012.01.30	V1.00	Start Here.
  12:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  13:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @section LICENSE
  14:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		BSD License. See Copyright.txt
  15:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** */
  16:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /********************************************************************************/
  17:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  18:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Includes ------------------------------------------------------------------*/
  19:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** #include "platform_config.h"
  20:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** #include "sdio_stm32f1.h"
  21:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** #include "usb_msc_mass_mal.h"
  22:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  23:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Defines -------------------------------------------------------------------*/
  24:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  25:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Variables -----------------------------------------------------------------*/
  26:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint32_t Mass_Memory_Size[2];
  27:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint32_t Mass_Block_Size[2];
  28:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint32_t Mass_Block_Count[2];
  29:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  30:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Constants -----------------------------------------------------------------*/
  31:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  32:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Function prototypes -------------------------------------------------------*/
  33:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  34:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /* Functions -----------------------------------------------------------------*/
  35:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  36:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  37:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /*! 
  38:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @brief  Initializes the Media on the STM32.
  39:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** */
  40:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  41:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint16_t MAL_Init(uint8_t lun)
  42:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** {
  27              		.loc 1 42 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37              	.LVL1:
  43:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   uint16_t status = MAL_OK;
  44:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  45:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   switch (lun)
  38              		.loc 1 45 0
  39 0002 0446     		mov	r4, r0
  40 0004 28B9     		cbnz	r0, .L5
  46:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   {
  47:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     case 0:
  48:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_Init();
  41              		.loc 1 48 0
  42 0006 FFF7FEFF 		bl	SD_Init
  43              	.LVL2:
  44 000a 034B     		ldr	r3, .L7
  45 000c 1870     		strb	r0, [r3, #0]
  49:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       break;
  50:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** #ifdef USE_STM3210E_EVAL
  51:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     case 1:
  52:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       NAND_Init();
  53:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       break;
  54:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** #endif
  55:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     default:
  56:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       return MAL_FAIL;
  57:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   }
  58:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   return status;
  46              		.loc 1 58 0
  47 000e 2046     		mov	r0, r4
  48 0010 10BD     		pop	{r4, pc}
  49              	.LVL3:
  50              	.L5:
  56:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   }
  51              		.loc 1 56 0
  52 0012 0120     		movs	r0, #1
  53              	.LVL4:
  59:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** }
  54              		.loc 1 59 0
  55 0014 10BD     		pop	{r4, pc}
  56              	.L8:
  57 0016 00BF     		.align	2
  58              	.L7:
  59 0018 00000000 		.word	Status
  60              		.cfi_endproc
  61              	.LFE56:
  63              		.section	.text.MAL_Write,"ax",%progbits
  64              		.align	1
  65              		.global	MAL_Write
  66              		.thumb
  67              		.thumb_func
  69              	MAL_Write:
  70              	.LFB57:
  60:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  61:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  62:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /*! 
  63:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @brief  Write sectors.
  64:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** */
  65:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  66:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint16_t MAL_Write(uint8_t lun, uint32_t Memory_Offset, uint32_t *Writebuff, uint16_t Transfer_Leng
  67:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** {
  71              		.loc 1 67 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL5:
  76 0000 13B5     		push	{r0, r1, r4, lr}
  77              	.LCFI1:
  78              		.cfi_def_cfa_offset 16
  79              		.cfi_offset 0, -16
  80              		.cfi_offset 1, -12
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 1C46     		mov	r4, r3
  68:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  69:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   switch (lun)
  84              		.loc 1 69 0
  85 0004 0346     		mov	r3, r0
  86              	.LVL6:
  87 0006 58B9     		cbnz	r0, .L13
  70:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   {
  71:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     case 0:
  72:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_WriteBlock((uint8_t*)Writebuff, Memory_Offset, Transfer_Length);
  88              		.loc 1 72 0
  89 0008 0094     		str	r4, [sp, #0]
  90 000a 1046     		mov	r0, r2
  91              	.LVL7:
  92 000c 0A46     		mov	r2, r1
  93              	.LVL8:
  94 000e FFF7FEFF 		bl	SD_WriteBlock
  95              	.LVL9:
  96 0012 044B     		ldr	r3, .L14
  97 0014 1870     		strb	r0, [r3, #0]
  73:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
  98              		.loc 1 73 0
  99 0016 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  74:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
  75:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         return MAL_FAIL;
 100              		.loc 1 75 0
 101 0018 2A38     		subs	r0, r0, #42
 102 001a 18BF     		it	ne
 103 001c 0120     		movne	r0, #1
 104 001e 00E0     		b	.L10
 105              	.LVL10:
 106              	.L13:
  76:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       } 
  77:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       break;
  78:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	
  79:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     default:
  80:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       return MAL_FAIL;
 107              		.loc 1 80 0
 108 0020 0120     		movs	r0, #1
 109              	.LVL11:
 110              	.L10:
  81:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   }
  82:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   return MAL_OK;
  83:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** }
 111              		.loc 1 83 0
 112 0022 1CBD     		pop	{r2, r3, r4, pc}
 113              	.L15:
 114              		.align	2
 115              	.L14:
 116 0024 00000000 		.word	Status
 117              		.cfi_endproc
 118              	.LFE57:
 120              		.section	.text.MAL_Read,"ax",%progbits
 121              		.align	1
 122              		.global	MAL_Read
 123              		.thumb
 124              		.thumb_func
 126              	MAL_Read:
 127              	.LFB58:
  84:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  85:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  86:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /*! 
  87:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @brief  Read sectors.
  88:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** */
  89:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
  90:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint16_t MAL_Read(uint8_t lun, uint32_t Memory_Offset, uint32_t *Readbuff, uint16_t Transfer_Length
  91:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** {
 128              		.loc 1 91 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL12:
 133 0000 13B5     		push	{r0, r1, r4, lr}
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 16
 136              		.cfi_offset 0, -16
 137              		.cfi_offset 1, -12
 138              		.cfi_offset 4, -8
 139              		.cfi_offset 14, -4
 140 0002 1C46     		mov	r4, r3
  92:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
  93:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   switch (lun)
 141              		.loc 1 93 0
 142 0004 0346     		mov	r3, r0
 143              	.LVL13:
 144 0006 58B9     		cbnz	r0, .L20
  94:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   {
  95:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     case 0:
  96:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	
  97:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_ReadBlock((uint8_t*)Readbuff, Memory_Offset, Transfer_Length);
 145              		.loc 1 97 0
 146 0008 0094     		str	r4, [sp, #0]
 147 000a 1046     		mov	r0, r2
 148              	.LVL14:
 149 000c 0A46     		mov	r2, r1
 150              	.LVL15:
 151 000e FFF7FEFF 		bl	SD_ReadBlock
 152              	.LVL16:
 153 0012 044B     		ldr	r3, .L21
 154 0014 1870     		strb	r0, [r3, #0]
  98:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
 155              		.loc 1 98 0
 156 0016 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  99:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 100:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         return MAL_FAIL;
 157              		.loc 1 100 0
 158 0018 2A38     		subs	r0, r0, #42
 159 001a 18BF     		it	ne
 160 001c 0120     		movne	r0, #1
 161 001e 00E0     		b	.L17
 162              	.LVL17:
 163              	.L20:
 101:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 102:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       break;
 103:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 	
 104:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     default:
 105:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       return MAL_FAIL;
 164              		.loc 1 105 0
 165 0020 0120     		movs	r0, #1
 166              	.LVL18:
 167              	.L17:
 106:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   }
 107:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   return MAL_OK;
 108:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** }
 168              		.loc 1 108 0
 169 0022 1CBD     		pop	{r2, r3, r4, pc}
 170              	.L22:
 171              		.align	2
 172              	.L21:
 173 0024 00000000 		.word	Status
 174              		.cfi_endproc
 175              	.LFE58:
 177              		.section	.text.MAL_GetStatus,"ax",%progbits
 178              		.align	1
 179              		.global	MAL_GetStatus
 180              		.thumb
 181              		.thumb_func
 183              	MAL_GetStatus:
 184              	.LFB59:
 109:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 110:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
 111:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /*! 
 112:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     @brief  Get status.
 113:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** */
 114:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** /**************************************************************************/
 115:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** uint16_t MAL_GetStatus (uint8_t lun)
 116:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** {
 185              		.loc 1 116 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              	.LVL19:
 190 0000 38B5     		push	{r3, r4, r5, lr}
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 3, -16
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 5, -8
 196              		.cfi_offset 14, -4
 197              	.LVL20:
 117:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 118:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   uint32_t DeviceSizeMul = 0, NumberOfBlocks = 0;
 119:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   uint64_t dwDevSize;  /* nemui */
 120:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 121:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   if (lun == 0)
 198              		.loc 1 121 0
 199 0002 0546     		mov	r5, r0
 200 0004 08B1     		cbz	r0, .L24
 201              	.LVL21:
 202              	.L26:
 122:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   {
 123:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     if (SD_Init() == SD_OK)
 124:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     {
 125:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       SD_GetCardInfo(&SDCardInfo);
 126:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
 127:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       DeviceSizeMul = (SDCardInfo.SD_csd.DeviceSizeMul + 2);
 128:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 129:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if(SDCardInfo.CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 130:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 131:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		/* nemui */
 132:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		dwDevSize  = (uint64_t)(SDCardInfo.SD_csd.DeviceSize + 1) * 512 * 1024;
 133:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		/* nemui  calculate highest LBA */
 134:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		Mass_Block_Count[0] = (dwDevSize - 1) / 512;
 135:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 136:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       else
 137:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 138:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         NumberOfBlocks  = ((1 << (SDCardInfo.SD_csd.RdBlockLen)) / 512);
 139:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (Number
 140:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 141:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Mass_Block_Size[0]  = 512;
 142:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 143:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16)); 
 144:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
 145:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
 146:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 147:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         return MAL_FAIL;
 148:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 149:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****        
 150:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_SetDeviceMode(SD_DMA_MODE);         
 151:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
 152:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 153:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         return MAL_FAIL;
 154:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       } 
 155:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****      
 156:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Mass_Memory_Size[0] = Mass_Block_Count[0] * Mass_Block_Size[0];
 157:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 158:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       return MAL_OK;
 159:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 160:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     }
 161:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   }
 162:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****   return MAL_FAIL;
 203              		.loc 1 162 0
 204 0006 0120     		movs	r0, #1
 205 0008 38BD     		pop	{r3, r4, r5, pc}
 206              	.LVL22:
 207              	.L24:
 123:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****     {
 208              		.loc 1 123 0
 209 000a FFF7FEFF 		bl	SD_Init
 210              	.LVL23:
 211 000e 2A28     		cmp	r0, #42
 212 0010 F9D1     		bne	.L26
 125:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
 213              		.loc 1 125 0
 214 0012 294C     		ldr	r4, .L30
 215 0014 2046     		mov	r0, r4
 216 0016 FFF7FEFF 		bl	SD_GetCardInfo
 217              	.LVL24:
 126:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       DeviceSizeMul = (SDCardInfo.SD_csd.DeviceSizeMul + 2);
 218              		.loc 1 126 0
 219 001a B4F85400 		ldrh	r0, [r4, #84]
 220 001e 0004     		lsls	r0, r0, #16
 221 0020 2946     		mov	r1, r5
 222 0022 FFF7FEFF 		bl	SD_SelectDeselect
 223              	.LVL25:
 127:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 224              		.loc 1 127 0
 225 0026 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 226              	.LVL26:
 129:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 227              		.loc 1 129 0
 228 0028 94F85620 		ldrb	r2, [r4, #86]	@ zero_extendqisi2
 229 002c 022A     		cmp	r2, #2
 230 002e 2349     		ldr	r1, .L30+4
 231 0030 0DD1     		bne	.L27
 132:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 		/* nemui  calculate highest LBA */
 232              		.loc 1 132 0
 233 0032 2469     		ldr	r4, [r4, #16]
 234 0034 651C     		adds	r5, r4, #1
 134:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 235              		.loc 1 134 0
 236 0036 4FF0FF32 		mov	r2, #-1
 237 003a 4FF0FF33 		mov	r3, #-1
 238              	.LVL27:
 239 003e 4FF40020 		mov	r0, #524288
 240 0042 E0FB0523 		umlal	r2, r3, r0, r5
 241 0046 520A     		lsrs	r2, r2, #9
 242 0048 42EAC354 		orr	r4, r2, r3, lsl #23
 243 004c 0FE0     		b	.L29
 244              	.LVL28:
 245              	.L27:
 138:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (Number
 246              		.loc 1 138 0
 247 004e 257A     		ldrb	r5, [r4, #8]	@ zero_extendqisi2
 248              	.LVL29:
 139:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 249              		.loc 1 139 0
 250 0050 2469     		ldr	r4, [r4, #16]
 251 0052 601C     		adds	r0, r4, #1
 127:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 252              		.loc 1 127 0
 253 0054 0233     		adds	r3, r3, #2
 254              	.LVL30:
 139:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 255              		.loc 1 139 0
 256 0056 00FA03F4 		lsl	r4, r0, r3
 138:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****         Mass_Block_Count[0] = ((SDCardInfo.SD_csd.DeviceSize + 1) * (1 << DeviceSizeMul) << (Number
 257              		.loc 1 138 0
 258 005a 0122     		movs	r2, #1
 259 005c 02FA05F5 		lsl	r5, r2, r5
 260              	.LVL31:
 261 0060 4FF40070 		mov	r0, #512
 262 0064 95FBF0F3 		sdiv	r3, r5, r0
 263              	.LVL32:
 139:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       }
 264              		.loc 1 139 0
 265 0068 5A08     		lsrs	r2, r3, #1
 266 006a 04FA02F4 		lsl	r4, r4, r2
 267              	.L29:
 268 006e 0C60     		str	r4, [r1, #0]
 141:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 269              		.loc 1 141 0
 270 0070 134D     		ldr	r5, .L30+8
 271 0072 4FF40071 		mov	r1, #512
 272 0076 2960     		str	r1, [r5, #0]
 143:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       Status = SD_EnableWideBusOperation(SDIO_BusWide_4b); 
 273              		.loc 1 143 0
 274 0078 0F4B     		ldr	r3, .L30
 275 007a B3F85440 		ldrh	r4, [r3, #84]
 276 007e 2004     		lsls	r0, r4, #16
 277 0080 0021     		movs	r1, #0
 278 0082 FFF7FEFF 		bl	SD_SelectDeselect
 279              	.LVL33:
 280 0086 0F4C     		ldr	r4, .L30+12
 281 0088 2070     		strb	r0, [r4, #0]
 144:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
 282              		.loc 1 144 0
 283 008a 4FF40060 		mov	r0, #2048
 284 008e FFF7FEFF 		bl	SD_EnableWideBusOperation
 285              	.LVL34:
 286 0092 2070     		strb	r0, [r4, #0]
 145:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 287              		.loc 1 145 0
 288 0094 2078     		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 289 0096 2A28     		cmp	r0, #42
 290 0098 B5D1     		bne	.L26
 150:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       if ( Status != SD_OK )
 291              		.loc 1 150 0
 292 009a 0020     		movs	r0, #0
 293 009c FFF7FEFF 		bl	SD_SetDeviceMode
 294              	.LVL35:
 295 00a0 2070     		strb	r0, [r4, #0]
 151:lib/USB_Functions/msc/src/usb_msc_mass_mal.c ****       {
 296              		.loc 1 151 0
 297 00a2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 298 00a4 2A2A     		cmp	r2, #42
 299 00a6 AED1     		bne	.L26
 156:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 300              		.loc 1 156 0
 301 00a8 2968     		ldr	r1, [r5, #0]
 302 00aa 044B     		ldr	r3, .L30+4
 303 00ac 1868     		ldr	r0, [r3, #0]
 304 00ae 4843     		muls	r0, r1, r0
 305 00b0 054A     		ldr	r2, .L30+16
 306 00b2 1060     		str	r0, [r2, #0]
 158:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** 
 307              		.loc 1 158 0
 308 00b4 0020     		movs	r0, #0
 163:lib/USB_Functions/msc/src/usb_msc_mass_mal.c **** }
 309              		.loc 1 163 0
 310 00b6 38BD     		pop	{r3, r4, r5, pc}
 311              	.L31:
 312              		.align	2
 313              	.L30:
 314 00b8 00000000 		.word	SDCardInfo
 315 00bc 00000000 		.word	.LANCHOR0
 316 00c0 00000000 		.word	.LANCHOR1
 317 00c4 00000000 		.word	Status
 318 00c8 00000000 		.word	.LANCHOR2
 319              		.cfi_endproc
 320              	.LFE59:
 322              		.global	Mass_Block_Count
 323              		.global	Mass_Block_Size
 324              		.global	Mass_Memory_Size
 325              		.section	.bss.Mass_Block_Size,"aw",%nobits
 326              		.align	2
 327              		.set	.LANCHOR1,. + 0
 330              	Mass_Block_Size:
 331 0000 00000000 		.space	8
 331      00000000 
 332              		.section	.bss.Mass_Memory_Size,"aw",%nobits
 333              		.align	2
 334              		.set	.LANCHOR2,. + 0
 337              	Mass_Memory_Size:
 338 0000 00000000 		.space	8
 338      00000000 
 339              		.section	.bss.Mass_Block_Count,"aw",%nobits
 340              		.align	2
 341              		.set	.LANCHOR0,. + 0
 344              	Mass_Block_Count:
 345 0000 00000000 		.space	8
 345      00000000 
 346              		.text
 347              	.Letext0:
 348              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 349              		.file 3 "./lib/ff/sdio_stm32f1.h"
 350              		.file 4 "./lib/CMSIS/Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_msc_mass_mal.c
  R:\TEMP\cczjncRt.s:19     .text.MAL_Init:0000000000000000 $t
  R:\TEMP\cczjncRt.s:24     .text.MAL_Init:0000000000000000 MAL_Init
  R:\TEMP\cczjncRt.s:59     .text.MAL_Init:0000000000000018 $d
  R:\TEMP\cczjncRt.s:64     .text.MAL_Write:0000000000000000 $t
  R:\TEMP\cczjncRt.s:69     .text.MAL_Write:0000000000000000 MAL_Write
  R:\TEMP\cczjncRt.s:116    .text.MAL_Write:0000000000000024 $d
  R:\TEMP\cczjncRt.s:121    .text.MAL_Read:0000000000000000 $t
  R:\TEMP\cczjncRt.s:126    .text.MAL_Read:0000000000000000 MAL_Read
  R:\TEMP\cczjncRt.s:173    .text.MAL_Read:0000000000000024 $d
  R:\TEMP\cczjncRt.s:178    .text.MAL_GetStatus:0000000000000000 $t
  R:\TEMP\cczjncRt.s:183    .text.MAL_GetStatus:0000000000000000 MAL_GetStatus
  R:\TEMP\cczjncRt.s:314    .text.MAL_GetStatus:00000000000000b8 $d
  R:\TEMP\cczjncRt.s:344    .bss.Mass_Block_Count:0000000000000000 Mass_Block_Count
  R:\TEMP\cczjncRt.s:330    .bss.Mass_Block_Size:0000000000000000 Mass_Block_Size
  R:\TEMP\cczjncRt.s:337    .bss.Mass_Memory_Size:0000000000000000 Mass_Memory_Size
  R:\TEMP\cczjncRt.s:326    .bss.Mass_Block_Size:0000000000000000 $d
  R:\TEMP\cczjncRt.s:333    .bss.Mass_Memory_Size:0000000000000000 $d
  R:\TEMP\cczjncRt.s:340    .bss.Mass_Block_Count:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SD_Init
Status
SD_WriteBlock
SD_ReadBlock
SD_GetCardInfo
SD_SelectDeselect
SD_EnableWideBusOperation
SD_SetDeviceMode
SDCardInfo
