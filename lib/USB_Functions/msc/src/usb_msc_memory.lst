   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_msc_memory.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.Read_Memory,"ax",%progbits
  19              		.align	1
  20              		.global	Read_Memory
  21              		.thumb
  22              		.thumb_func
  24              	Read_Memory:
  25              	.LFB57:
  26              		.file 1 "lib/USB_Functions/msc/src/usb_msc_memory.c"
   1:lib/USB_Functions/msc/src/usb_msc_memory.c **** /********************************************************************************/
   2:lib/USB_Functions/msc/src/usb_msc_memory.c **** /*!
   3:lib/USB_Functions/msc/src/usb_msc_memory.c **** 	@file			usb_msc_memory.c
   4:lib/USB_Functions/msc/src/usb_msc_memory.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @version        1.00
   6:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @date           2012.01.30
   7:lib/USB_Functions/msc/src/usb_msc_memory.c **** 	@brief          Memory management layer.
   8:lib/USB_Functions/msc/src/usb_msc_memory.c **** 					Based On STMicro's Sample Thanks!
   9:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  10:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @section HISTORY
  11:lib/USB_Functions/msc/src/usb_msc_memory.c **** 		2012.01.30	V1.00	Start Here.
  12:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  13:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @section LICENSE
  14:lib/USB_Functions/msc/src/usb_msc_memory.c **** 		BSD License. See Copyright.txt
  15:lib/USB_Functions/msc/src/usb_msc_memory.c **** */
  16:lib/USB_Functions/msc/src/usb_msc_memory.c **** /********************************************************************************/
  17:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Includes ------------------------------------------------------------------*/
  18:lib/USB_Functions/msc/src/usb_msc_memory.c **** #include "usb_msc_memory.h"
  19:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  20:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Defines -------------------------------------------------------------------*/
  21:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  22:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Variables -----------------------------------------------------------------*/
  23:lib/USB_Functions/msc/src/usb_msc_memory.c **** __IO uint32_t Block_Read_count = 0;
  24:lib/USB_Functions/msc/src/usb_msc_memory.c **** __IO uint32_t Block_offset;
  25:lib/USB_Functions/msc/src/usb_msc_memory.c **** __IO uint32_t Counter = 0;
  26:lib/USB_Functions/msc/src/usb_msc_memory.c **** uint32_t  Idx;
  27:lib/USB_Functions/msc/src/usb_msc_memory.c **** uint32_t Data_Buffer[BULK_MAX_PACKET_SIZE *2]; /* 512 bytes*/
  28:lib/USB_Functions/msc/src/usb_msc_memory.c **** uint8_t TransferState = TXFR_IDLE;
  29:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  30:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern uint8_t Bulk_Data_Buff[BULK_MAX_PACKET_SIZE];  /* data buffer*/
  31:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern uint16_t Data_Len;
  32:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern uint8_t Bot_State;
  33:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern Bulk_Only_CBW CBW;
  34:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern Bulk_Only_CSW CSW;
  35:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern uint32_t Mass_Memory_Size[2];
  36:lib/USB_Functions/msc/src/usb_msc_memory.c **** extern uint32_t Mass_Block_Size[2];
  37:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  38:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Constants -----------------------------------------------------------------*/
  39:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  40:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Function prototypes -------------------------------------------------------*/
  41:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  42:lib/USB_Functions/msc/src/usb_msc_memory.c **** /* Functions -----------------------------------------------------------------*/
  43:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  44:lib/USB_Functions/msc/src/usb_msc_memory.c **** /**************************************************************************/
  45:lib/USB_Functions/msc/src/usb_msc_memory.c **** /*! 
  46:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @brief	Handle the Read operation from the microSD card.
  47:lib/USB_Functions/msc/src/usb_msc_memory.c **** */
  48:lib/USB_Functions/msc/src/usb_msc_memory.c **** /**************************************************************************/
  49:lib/USB_Functions/msc/src/usb_msc_memory.c **** void Read_Memory(uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
  50:lib/USB_Functions/msc/src/usb_msc_memory.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0546     		mov	r5, r0
  51:lib/USB_Functions/msc/src/usb_msc_memory.c ****   static uint32_t Offset, Length;
  52:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  53:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if (TransferState == TXFR_IDLE )
  40              		.loc 1 53 0
  41 0004 324B     		ldr	r3, .L8
  42 0006 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  43              	.LVL1:
  44 0008 50B9     		cbnz	r0, .L2
  54:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
  55:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Offset = Memory_Offset * Mass_Block_Size[lun];
  45              		.loc 1 55 0
  46 000a 324C     		ldr	r4, .L8+4
  47 000c 54F82500 		ldr	r0, [r4, r5, lsl #2]
  48 0010 4143     		muls	r1, r0, r1
  49              	.LVL2:
  50 0012 314C     		ldr	r4, .L8+8
  51 0014 2160     		str	r1, [r4, #0]
  56:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Length = Transfer_Length * Mass_Block_Size[lun];
  52              		.loc 1 56 0
  53 0016 5043     		muls	r0, r2, r0
  54 0018 3049     		ldr	r1, .L8+12
  55 001a 0860     		str	r0, [r1, #0]
  57:lib/USB_Functions/msc/src/usb_msc_memory.c ****     TransferState = TXFR_ONGOING;
  56              		.loc 1 57 0
  57 001c 0122     		movs	r2, #1
  58              	.LVL3:
  59 001e 1A70     		strb	r2, [r3, #0]
  60              	.L2:
  58:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
  59:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  60:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if (TransferState == TXFR_ONGOING )
  61              		.loc 1 60 0
  62 0020 2B4B     		ldr	r3, .L8
  63 0022 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  64 0024 0128     		cmp	r0, #1
  65 0026 3ED1     		bne	.L3
  61:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
  62:lib/USB_Functions/msc/src/usb_msc_memory.c ****     if (!Block_Read_count)
  66              		.loc 1 62 0
  67 0028 2D4C     		ldr	r4, .L8+16
  68 002a 2168     		ldr	r1, [r4, #0]
  69 002c A9B9     		cbnz	r1, .L4
  63:lib/USB_Functions/msc/src/usb_msc_memory.c ****     {
  64:lib/USB_Functions/msc/src/usb_msc_memory.c ****       MAL_Read(lun ,
  65:lib/USB_Functions/msc/src/usb_msc_memory.c ****                Offset ,
  66:lib/USB_Functions/msc/src/usb_msc_memory.c ****                Data_Buffer,
  67:lib/USB_Functions/msc/src/usb_msc_memory.c ****                Mass_Block_Size[lun]);
  70              		.loc 1 67 0
  71 002e 294E     		ldr	r6, .L8+4
  64:lib/USB_Functions/msc/src/usb_msc_memory.c ****                Offset ,
  72              		.loc 1 64 0
  73 0030 2846     		mov	r0, r5
  74 0032 294A     		ldr	r2, .L8+8
  75 0034 1168     		ldr	r1, [r2, #0]
  76 0036 2B4A     		ldr	r2, .L8+20
  77 0038 36F82530 		ldrh	r3, [r6, r5, lsl #2]
  78 003c FFF7FEFF 		bl	MAL_Read
  79              	.LVL4:
  68:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  69:lib/USB_Functions/msc/src/usb_msc_memory.c ****       USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer, BULK_MAX_PACKET_SIZE);
  80              		.loc 1 69 0
  81 0040 8120     		movs	r0, #129
  82 0042 2849     		ldr	r1, .L8+20
  83 0044 4022     		movs	r2, #64
  84 0046 FFF7FEFF 		bl	USB_SIL_Write
  85              	.LVL5:
  70:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  71:lib/USB_Functions/msc/src/usb_msc_memory.c ****       Block_Read_count = Mass_Block_Size[lun] - BULK_MAX_PACKET_SIZE;
  86              		.loc 1 71 0
  87 004a 56F82530 		ldr	r3, [r6, r5, lsl #2]
  88 004e 403B     		subs	r3, r3, #64
  89 0050 2360     		str	r3, [r4, #0]
  72:lib/USB_Functions/msc/src/usb_msc_memory.c ****       Block_offset = BULK_MAX_PACKET_SIZE;
  90              		.loc 1 72 0
  91 0052 4020     		movs	r0, #64
  92 0054 2449     		ldr	r1, .L8+24
  93 0056 0860     		str	r0, [r1, #0]
  94 0058 0DE0     		b	.L5
  95              	.L4:
  73:lib/USB_Functions/msc/src/usb_msc_memory.c ****     }
  74:lib/USB_Functions/msc/src/usb_msc_memory.c ****     else
  75:lib/USB_Functions/msc/src/usb_msc_memory.c ****     {
  76:lib/USB_Functions/msc/src/usb_msc_memory.c ****       USB_SIL_Write(EP1_IN, (uint8_t *)Data_Buffer + Block_offset, BULK_MAX_PACKET_SIZE);
  96              		.loc 1 76 0
  97 005a 234D     		ldr	r5, .L8+24
  98 005c 2A68     		ldr	r2, [r5, #0]
  99 005e 8120     		movs	r0, #129
 100 0060 204B     		ldr	r3, .L8+20
 101 0062 9918     		adds	r1, r3, r2
 102 0064 4022     		movs	r2, #64
 103 0066 FFF7FEFF 		bl	USB_SIL_Write
 104              	.LVL6:
  77:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  78:lib/USB_Functions/msc/src/usb_msc_memory.c ****       Block_Read_count -= BULK_MAX_PACKET_SIZE;
 105              		.loc 1 78 0
 106 006a 2068     		ldr	r0, [r4, #0]
 107 006c 4038     		subs	r0, r0, #64
 108 006e 2060     		str	r0, [r4, #0]
  79:lib/USB_Functions/msc/src/usb_msc_memory.c ****       Block_offset += BULK_MAX_PACKET_SIZE;
 109              		.loc 1 79 0
 110 0070 2968     		ldr	r1, [r5, #0]
 111 0072 4031     		adds	r1, r1, #64
 112 0074 2960     		str	r1, [r5, #0]
 113              	.L5:
  80:lib/USB_Functions/msc/src/usb_msc_memory.c ****     }
  81:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  82:lib/USB_Functions/msc/src/usb_msc_memory.c ****     SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
 114              		.loc 1 82 0
 115 0076 0120     		movs	r0, #1
 116 0078 4021     		movs	r1, #64
 117 007a FFF7FEFF 		bl	SetEPTxCount
 118              	.LVL7:
  83:lib/USB_Functions/msc/src/usb_msc_memory.c **** #ifndef USE_STM3210C_EVAL
  84:lib/USB_Functions/msc/src/usb_msc_memory.c ****     SetEPTxStatus(ENDP1, EP_TX_VALID);
 119              		.loc 1 84 0
 120 007e 0120     		movs	r0, #1
 121 0080 3021     		movs	r1, #48
 122 0082 FFF7FEFF 		bl	SetEPTxStatus
 123              	.LVL8:
  85:lib/USB_Functions/msc/src/usb_msc_memory.c **** #endif    
  86:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Offset += BULK_MAX_PACKET_SIZE;
 124              		.loc 1 86 0
 125 0086 144B     		ldr	r3, .L8+8
 126 0088 1A68     		ldr	r2, [r3, #0]
 127 008a 4032     		adds	r2, r2, #64
 128 008c 1A60     		str	r2, [r3, #0]
  87:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Length -= BULK_MAX_PACKET_SIZE;
 129              		.loc 1 87 0
 130 008e 1348     		ldr	r0, .L8+12
 131 0090 0168     		ldr	r1, [r0, #0]
 132 0092 4039     		subs	r1, r1, #64
 133 0094 0160     		str	r1, [r0, #0]
  88:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
  89:lib/USB_Functions/msc/src/usb_msc_memory.c ****     CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
 134              		.loc 1 89 0
 135 0096 154B     		ldr	r3, .L8+28
 136 0098 9A68     		ldr	r2, [r3, #8]
 137 009a 403A     		subs	r2, r2, #64
 138 009c 9A60     		str	r2, [r3, #8]
  90:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_ON();
 139              		.loc 1 90 0
 140 009e 1448     		ldr	r0, .L8+32
 141 00a0 0121     		movs	r1, #1
 142 00a2 FFF7FEFF 		bl	GPIO_SetBits
 143              	.LVL9:
 144              	.L3:
  91:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
  92:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if (Length == 0)
 145              		.loc 1 92 0
 146 00a6 0D48     		ldr	r0, .L8+12
 147 00a8 0368     		ldr	r3, [r0, #0]
 148 00aa 83B9     		cbnz	r3, .L1
  93:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
  94:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Block_Read_count = 0;
 149              		.loc 1 94 0
 150 00ac 0C49     		ldr	r1, .L8+16
 151 00ae 0B60     		str	r3, [r1, #0]
  95:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Block_offset = 0;
 152              		.loc 1 95 0
 153 00b0 0D4A     		ldr	r2, .L8+24
 154 00b2 1360     		str	r3, [r2, #0]
  96:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Offset = 0;
 155              		.loc 1 96 0
 156 00b4 0848     		ldr	r0, .L8+8
 157 00b6 0360     		str	r3, [r0, #0]
  97:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Bot_State = BOT_DATA_IN_LAST;
 158              		.loc 1 97 0
 159 00b8 0321     		movs	r1, #3
 160 00ba 0E4A     		ldr	r2, .L8+36
 161 00bc 1170     		strb	r1, [r2, #0]
  98:lib/USB_Functions/msc/src/usb_msc_memory.c ****     TransferState = TXFR_IDLE;
 162              		.loc 1 98 0
 163 00be 0448     		ldr	r0, .L8
 164 00c0 0370     		strb	r3, [r0, #0]
  99:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_OFF();
 165              		.loc 1 99 0
 166 00c2 0B48     		ldr	r0, .L8+32
 167 00c4 0121     		movs	r1, #1
 100:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
 101:lib/USB_Functions/msc/src/usb_msc_memory.c **** }
 168              		.loc 1 101 0
 169 00c6 BDE87040 		pop	{r4, r5, r6, lr}
  99:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_OFF();
 170              		.loc 1 99 0
 171 00ca FFF7FEBF 		b	GPIO_ResetBits
 172              	.LVL10:
 173              	.L1:
 174 00ce 70BD     		pop	{r4, r5, r6, pc}
 175              	.L9:
 176              		.align	2
 177              	.L8:
 178 00d0 00000000 		.word	.LANCHOR0
 179 00d4 00000000 		.word	Mass_Block_Size
 180 00d8 00000000 		.word	.LANCHOR1
 181 00dc 00000000 		.word	.LANCHOR2
 182 00e0 00000000 		.word	.LANCHOR3
 183 00e4 00000000 		.word	.LANCHOR4
 184 00e8 00000000 		.word	.LANCHOR5
 185 00ec 00000000 		.word	CSW
 186 00f0 00180140 		.word	1073813504
 187 00f4 00000000 		.word	Bot_State
 188              		.cfi_endproc
 189              	.LFE57:
 191              		.section	.text.Write_Memory,"ax",%progbits
 192              		.align	1
 193              		.global	Write_Memory
 194              		.thumb
 195              		.thumb_func
 197              	Write_Memory:
 198              	.LFB58:
 102:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 103:lib/USB_Functions/msc/src/usb_msc_memory.c **** /**************************************************************************/
 104:lib/USB_Functions/msc/src/usb_msc_memory.c **** /*! 
 105:lib/USB_Functions/msc/src/usb_msc_memory.c ****     @brief	Handle the Write operation to the microSD card..
 106:lib/USB_Functions/msc/src/usb_msc_memory.c **** */
 107:lib/USB_Functions/msc/src/usb_msc_memory.c **** /**************************************************************************/
 108:lib/USB_Functions/msc/src/usb_msc_memory.c **** void Write_Memory (uint8_t lun, uint32_t Memory_Offset, uint32_t Transfer_Length)
 109:lib/USB_Functions/msc/src/usb_msc_memory.c **** {
 199              		.loc 1 109 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL11:
 204 0000 70B5     		push	{r4, r5, r6, lr}
 205              	.LCFI1:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
 110:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 111:lib/USB_Functions/msc/src/usb_msc_memory.c ****   static uint32_t W_Offset, W_Length;
 112:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 113:lib/USB_Functions/msc/src/usb_msc_memory.c ****   uint32_t temp =  Counter + 64;
 211              		.loc 1 113 0
 212 0002 334B     		ldr	r3, .L22
 213 0004 1D68     		ldr	r5, [r3, #0]
 214              	.LVL12:
 114:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 115:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if (TransferState == TXFR_IDLE )
 215              		.loc 1 115 0
 216 0006 334B     		ldr	r3, .L22+4
 217 0008 1C78     		ldrb	r4, [r3, #0]	@ zero_extendqisi2
 218 000a 54B9     		cbnz	r4, .L11
 116:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
 117:lib/USB_Functions/msc/src/usb_msc_memory.c ****     W_Offset = Memory_Offset * Mass_Block_Size[lun];
 219              		.loc 1 117 0
 220 000c 324C     		ldr	r4, .L22+8
 221 000e 54F82040 		ldr	r4, [r4, r0, lsl #2]
 222 0012 6143     		muls	r1, r4, r1
 223              	.LVL13:
 224 0014 314E     		ldr	r6, .L22+12
 225 0016 3160     		str	r1, [r6, #0]
 118:lib/USB_Functions/msc/src/usb_msc_memory.c ****     W_Length = Transfer_Length * Mass_Block_Size[lun];
 226              		.loc 1 118 0
 227 0018 5443     		muls	r4, r2, r4
 228 001a 3149     		ldr	r1, .L22+16
 229 001c 0C60     		str	r4, [r1, #0]
 119:lib/USB_Functions/msc/src/usb_msc_memory.c ****     TransferState = TXFR_ONGOING;
 230              		.loc 1 119 0
 231 001e 0122     		movs	r2, #1
 232              	.LVL14:
 233 0020 1A70     		strb	r2, [r3, #0]
 234              	.L11:
 120:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
 121:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 122:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if (TransferState == TXFR_ONGOING )
 235              		.loc 1 122 0
 236 0022 2C4B     		ldr	r3, .L22+4
 237 0024 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 238 0026 0129     		cmp	r1, #1
 239 0028 3BD1     		bne	.L12
 123:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
 124:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 125:lib/USB_Functions/msc/src/usb_msc_memory.c ****     for (Idx = 0 ; Counter < temp; Counter++)
 240              		.loc 1 125 0
 241 002a 0023     		movs	r3, #0
 242 002c 2D4C     		ldr	r4, .L22+20
 243 002e 2360     		str	r3, [r4, #0]
 244              	.L13:
 245              		.loc 1 125 0 is_stmt 0 discriminator 1
 246 0030 274A     		ldr	r2, .L22
 247 0032 1468     		ldr	r4, [r2, #0]
 113:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 248              		.loc 1 113 0 is_stmt 1 discriminator 1
 249 0034 05F14001 		add	r1, r5, #64
 250              		.loc 1 125 0 discriminator 1
 251 0038 8C42     		cmp	r4, r1
 252 003a 09D2     		bcs	.L21
 253              	.L14:
 126:lib/USB_Functions/msc/src/usb_msc_memory.c ****     {
 127:lib/USB_Functions/msc/src/usb_msc_memory.c ****       *((uint8_t *)Data_Buffer + Counter) = Bulk_Data_Buff[Idx++];
 254              		.loc 1 127 0 discriminator 2
 255 003c 1168     		ldr	r1, [r2, #0]
 256 003e 2A4E     		ldr	r6, .L22+24
 257 0040 9E5D     		ldrb	r6, [r3, r6]	@ zero_extendqisi2
 258 0042 2A4C     		ldr	r4, .L22+28
 259 0044 6654     		strb	r6, [r4, r1]
 260 0046 0133     		adds	r3, r3, #1
 125:lib/USB_Functions/msc/src/usb_msc_memory.c ****     {
 261              		.loc 1 125 0 discriminator 2
 262 0048 1168     		ldr	r1, [r2, #0]
 263 004a 4C1C     		adds	r4, r1, #1
 264 004c 1460     		str	r4, [r2, #0]
 265 004e EFE7     		b	.L13
 266              	.L21:
 267 0050 244D     		ldr	r5, .L22+20
 268              	.LVL15:
 269 0052 2B60     		str	r3, [r5, #0]
 128:lib/USB_Functions/msc/src/usb_msc_memory.c ****     }
 129:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 130:lib/USB_Functions/msc/src/usb_msc_memory.c ****     W_Offset += Data_Len;
 270              		.loc 1 130 0
 271 0054 264B     		ldr	r3, .L22+32
 272 0056 1C88     		ldrh	r4, [r3, #0]
 273 0058 204D     		ldr	r5, .L22+12
 274 005a 2968     		ldr	r1, [r5, #0]
 275              	.LVL16:
 276 005c 6118     		adds	r1, r4, r1
 277 005e 2960     		str	r1, [r5, #0]
 131:lib/USB_Functions/msc/src/usb_msc_memory.c ****     W_Length -= Data_Len;
 278              		.loc 1 131 0
 279 0060 1F4B     		ldr	r3, .L22+16
 280 0062 1D68     		ldr	r5, [r3, #0]
 281 0064 2C1B     		subs	r4, r5, r4
 282 0066 1C60     		str	r4, [r3, #0]
 132:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 133:lib/USB_Functions/msc/src/usb_msc_memory.c ****     if (!(W_Length % Mass_Block_Size[lun]))
 283              		.loc 1 133 0
 284 0068 1B4B     		ldr	r3, .L22+8
 285 006a 53F82030 		ldr	r3, [r3, r0, lsl #2]
 286 006e B4FBF3F5 		udiv	r5, r4, r3
 287 0072 03FB1544 		mls	r4, r3, r5, r4
 288 0076 2CB9     		cbnz	r4, .L15
 134:lib/USB_Functions/msc/src/usb_msc_memory.c ****     {
 135:lib/USB_Functions/msc/src/usb_msc_memory.c ****       Counter = 0;
 289              		.loc 1 135 0
 290 0078 1460     		str	r4, [r2, #0]
 136:lib/USB_Functions/msc/src/usb_msc_memory.c ****       MAL_Write(lun ,
 291              		.loc 1 136 0
 292 007a C91A     		subs	r1, r1, r3
 293 007c 1B4A     		ldr	r2, .L22+28
 294 007e 9BB2     		uxth	r3, r3
 295 0080 FFF7FEFF 		bl	MAL_Write
 296              	.LVL17:
 297              	.L15:
 137:lib/USB_Functions/msc/src/usb_msc_memory.c ****                 W_Offset - Mass_Block_Size[lun],
 138:lib/USB_Functions/msc/src/usb_msc_memory.c ****                 Data_Buffer,
 139:lib/USB_Functions/msc/src/usb_msc_memory.c ****                 Mass_Block_Size[lun]);
 140:lib/USB_Functions/msc/src/usb_msc_memory.c ****     }
 141:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 142:lib/USB_Functions/msc/src/usb_msc_memory.c ****     CSW.dDataResidue -= Data_Len;
 298              		.loc 1 142 0
 299 0084 1B48     		ldr	r0, .L22+36
 300 0086 1A4A     		ldr	r2, .L22+32
 301 0088 1188     		ldrh	r1, [r2, #0]
 302 008a 8368     		ldr	r3, [r0, #8]
 303 008c 5A1A     		subs	r2, r3, r1
 304 008e 8260     		str	r2, [r0, #8]
 143:lib/USB_Functions/msc/src/usb_msc_memory.c ****   #ifndef STM32F10X_CL
 144:lib/USB_Functions/msc/src/usb_msc_memory.c ****     SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/   
 305              		.loc 1 144 0
 306 0090 0220     		movs	r0, #2
 307 0092 4FF44051 		mov	r1, #12288
 308 0096 FFF7FEFF 		bl	SetEPRxStatus
 309              	.LVL18:
 145:lib/USB_Functions/msc/src/usb_msc_memory.c ****   #endif /* STM32F10X_CL */
 146:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 147:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_ON();
 310              		.loc 1 147 0
 311 009a 1748     		ldr	r0, .L22+40
 312 009c 0121     		movs	r1, #1
 313 009e FFF7FEFF 		bl	GPIO_SetBits
 314              	.LVL19:
 315              	.L12:
 148:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
 149:lib/USB_Functions/msc/src/usb_msc_memory.c **** 
 150:lib/USB_Functions/msc/src/usb_msc_memory.c ****   if ((W_Length == 0) || (Bot_State == BOT_CSW_Send))
 316              		.loc 1 150 0
 317 00a2 0F48     		ldr	r0, .L22+16
 318 00a4 0168     		ldr	r1, [r0, #0]
 319 00a6 19B1     		cbz	r1, .L16
 320              		.loc 1 150 0 is_stmt 0 discriminator 1
 321 00a8 144B     		ldr	r3, .L22+44
 322 00aa 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 323 00ac 042A     		cmp	r2, #4
 324 00ae 0ED1     		bne	.L10
 325              	.L16:
 151:lib/USB_Functions/msc/src/usb_msc_memory.c ****   {
 152:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Counter = 0;
 326              		.loc 1 152 0 is_stmt 1
 327 00b0 0024     		movs	r4, #0
 328 00b2 0748     		ldr	r0, .L22
 329 00b4 0460     		str	r4, [r0, #0]
 153:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
 330              		.loc 1 153 0
 331 00b6 2046     		mov	r0, r4
 332 00b8 0121     		movs	r1, #1
 333 00ba FFF7FEFF 		bl	Set_CSW
 334              	.LVL20:
 154:lib/USB_Functions/msc/src/usb_msc_memory.c ****     TransferState = TXFR_IDLE;
 335              		.loc 1 154 0
 336 00be 0549     		ldr	r1, .L22+4
 337 00c0 0C70     		strb	r4, [r1, #0]
 155:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_OFF();
 338              		.loc 1 155 0
 339 00c2 0D48     		ldr	r0, .L22+40
 340 00c4 0121     		movs	r1, #1
 156:lib/USB_Functions/msc/src/usb_msc_memory.c ****   }
 157:lib/USB_Functions/msc/src/usb_msc_memory.c **** }
 341              		.loc 1 157 0
 342 00c6 BDE87040 		pop	{r4, r5, r6, lr}
 155:lib/USB_Functions/msc/src/usb_msc_memory.c ****     Led_RW_OFF();
 343              		.loc 1 155 0
 344 00ca FFF7FEBF 		b	GPIO_ResetBits
 345              	.LVL21:
 346              	.L10:
 347 00ce 70BD     		pop	{r4, r5, r6, pc}
 348              	.L23:
 349              		.align	2
 350              	.L22:
 351 00d0 00000000 		.word	.LANCHOR6
 352 00d4 00000000 		.word	.LANCHOR0
 353 00d8 00000000 		.word	Mass_Block_Size
 354 00dc 00000000 		.word	.LANCHOR7
 355 00e0 00000000 		.word	.LANCHOR8
 356 00e4 00000000 		.word	.LANCHOR9
 357 00e8 00000000 		.word	Bulk_Data_Buff
 358 00ec 00000000 		.word	.LANCHOR4
 359 00f0 00000000 		.word	Data_Len
 360 00f4 00000000 		.word	CSW
 361 00f8 00180140 		.word	1073813504
 362 00fc 00000000 		.word	Bot_State
 363              		.cfi_endproc
 364              	.LFE58:
 366              		.global	TransferState
 367              		.global	Data_Buffer
 368              		.global	Idx
 369              		.global	Counter
 370              		.global	Block_offset
 371              		.global	Block_Read_count
 372              		.section	.bss.W_Length.8931,"aw",%nobits
 373              		.align	2
 374              		.set	.LANCHOR8,. + 0
 377              	W_Length.8931:
 378 0000 00000000 		.space	4
 379              		.section	.bss.Block_offset,"aw",%nobits
 380              		.align	2
 381              		.set	.LANCHOR5,. + 0
 384              	Block_offset:
 385 0000 00000000 		.space	4
 386              		.section	.bss.Block_Read_count,"aw",%nobits
 387              		.align	2
 388              		.set	.LANCHOR3,. + 0
 391              	Block_Read_count:
 392 0000 00000000 		.space	4
 393              		.section	.bss.Counter,"aw",%nobits
 394              		.align	2
 395              		.set	.LANCHOR6,. + 0
 398              	Counter:
 399 0000 00000000 		.space	4
 400              		.section	.bss.Data_Buffer,"aw",%nobits
 401              		.align	2
 402              		.set	.LANCHOR4,. + 0
 405              	Data_Buffer:
 406 0000 00000000 		.space	512
 406      00000000 
 406      00000000 
 406      00000000 
 406      00000000 
 407              		.section	.bss.Idx,"aw",%nobits
 408              		.align	2
 409              		.set	.LANCHOR9,. + 0
 412              	Idx:
 413 0000 00000000 		.space	4
 414              		.section	.bss.Length.8924,"aw",%nobits
 415              		.align	2
 416              		.set	.LANCHOR2,. + 0
 419              	Length.8924:
 420 0000 00000000 		.space	4
 421              		.section	.bss.Offset.8923,"aw",%nobits
 422              		.align	2
 423              		.set	.LANCHOR1,. + 0
 426              	Offset.8923:
 427 0000 00000000 		.space	4
 428              		.section	.bss.W_Offset.8930,"aw",%nobits
 429              		.align	2
 430              		.set	.LANCHOR7,. + 0
 433              	W_Offset.8930:
 434 0000 00000000 		.space	4
 435              		.section	.bss.TransferState,"aw",%nobits
 436              		.set	.LANCHOR0,. + 0
 439              	TransferState:
 440 0000 00       		.space	1
 441              		.text
 442              	.Letext0:
 443              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 444              		.file 3 "./lib/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 445              		.file 4 "./lib/USB_Functions/msc/inc/usb_msc_bot.h"
 446              		.file 5 "./lib/CMSIS/Include/core_cm3.h"
 447              		.file 6 "./inc/systick.h"
 448              		.file 7 "./lib/USB_Functions/msc/inc/usb_msc_mass_mal.h"
 449              		.file 8 "./lib/STM32_USB-FS-Device_Driver/inc/usb_sil.h"
 450              		.file 9 "./lib/STM32_USB-FS-Device_Driver/inc/usb_regs.h"
 451              		.file 10 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_msc_memory.c
  R:\TEMP\ccqwBvqG.s:19     .text.Read_Memory:0000000000000000 $t
  R:\TEMP\ccqwBvqG.s:24     .text.Read_Memory:0000000000000000 Read_Memory
  R:\TEMP\ccqwBvqG.s:178    .text.Read_Memory:00000000000000d0 $d
  R:\TEMP\ccqwBvqG.s:192    .text.Write_Memory:0000000000000000 $t
  R:\TEMP\ccqwBvqG.s:197    .text.Write_Memory:0000000000000000 Write_Memory
  R:\TEMP\ccqwBvqG.s:351    .text.Write_Memory:00000000000000d0 $d
  R:\TEMP\ccqwBvqG.s:439    .bss.TransferState:0000000000000000 TransferState
  R:\TEMP\ccqwBvqG.s:405    .bss.Data_Buffer:0000000000000000 Data_Buffer
  R:\TEMP\ccqwBvqG.s:412    .bss.Idx:0000000000000000 Idx
  R:\TEMP\ccqwBvqG.s:398    .bss.Counter:0000000000000000 Counter
  R:\TEMP\ccqwBvqG.s:384    .bss.Block_offset:0000000000000000 Block_offset
  R:\TEMP\ccqwBvqG.s:391    .bss.Block_Read_count:0000000000000000 Block_Read_count
  R:\TEMP\ccqwBvqG.s:373    .bss.W_Length.8931:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:377    .bss.W_Length.8931:0000000000000000 W_Length.8931
  R:\TEMP\ccqwBvqG.s:380    .bss.Block_offset:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:387    .bss.Block_Read_count:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:394    .bss.Counter:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:401    .bss.Data_Buffer:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:408    .bss.Idx:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:415    .bss.Length.8924:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:419    .bss.Length.8924:0000000000000000 Length.8924
  R:\TEMP\ccqwBvqG.s:422    .bss.Offset.8923:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:426    .bss.Offset.8923:0000000000000000 Offset.8923
  R:\TEMP\ccqwBvqG.s:429    .bss.W_Offset.8930:0000000000000000 $d
  R:\TEMP\ccqwBvqG.s:433    .bss.W_Offset.8930:0000000000000000 W_Offset.8930
  R:\TEMP\ccqwBvqG.s:440    .bss.TransferState:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
MAL_Read
USB_SIL_Write
SetEPTxCount
SetEPTxStatus
GPIO_SetBits
GPIO_ResetBits
Mass_Block_Size
CSW
Bot_State
MAL_Write
SetEPRxStatus
Set_CSW
Bulk_Data_Buff
Data_Len
