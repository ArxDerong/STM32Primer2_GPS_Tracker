   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_istr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USB_Istr,"ax",%progbits
  19              		.align	1
  20              		.global	USB_Istr
  21              		.thumb
  22              		.thumb_func
  24              	USB_Istr:
  25              	.LFB57:
  26              		.file 1 "lib/USB_Functions/usb_istr.c"
   1:lib/USB_Functions/usb_istr.c **** /********************************************************************************/
   2:lib/USB_Functions/usb_istr.c **** /*!
   3:lib/USB_Functions/usb_istr.c **** 	@file			usb_istr.c
   4:lib/USB_Functions/usb_istr.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/usb_istr.c ****     @version        1.00
   6:lib/USB_Functions/usb_istr.c ****     @date           2012.01.30
   7:lib/USB_Functions/usb_istr.c **** 	@brief          ISTR events interrupt service routines Wrappers.
   8:lib/USB_Functions/usb_istr.c **** 
   9:lib/USB_Functions/usb_istr.c ****     @section HISTORY
  10:lib/USB_Functions/usb_istr.c **** 		2012.01.30	V1.00	Start Here
  11:lib/USB_Functions/usb_istr.c **** 
  12:lib/USB_Functions/usb_istr.c ****     @section LICENSE
  13:lib/USB_Functions/usb_istr.c **** 		BSD License. See Copyright.txt
  14:lib/USB_Functions/usb_istr.c **** */
  15:lib/USB_Functions/usb_istr.c **** /********************************************************************************/
  16:lib/USB_Functions/usb_istr.c **** 
  17:lib/USB_Functions/usb_istr.c **** /* Includes ------------------------------------------------------------------*/
  18:lib/USB_Functions/usb_istr.c **** #include "usb_istr.h"
  19:lib/USB_Functions/usb_istr.c **** 
  20:lib/USB_Functions/usb_istr.c **** /* Defines -------------------------------------------------------------------*/
  21:lib/USB_Functions/usb_istr.c **** 
  22:lib/USB_Functions/usb_istr.c **** /* Variables -----------------------------------------------------------------*/
  23:lib/USB_Functions/usb_istr.c **** __IO uint16_t wIstr;  /* ISTR register last read value */
  24:lib/USB_Functions/usb_istr.c **** __IO uint8_t bIntPackSOF = 0;  /* SOFs received between 2 consecutive packets */
  25:lib/USB_Functions/usb_istr.c **** 
  26:lib/USB_Functions/usb_istr.c **** /* Constants -----------------------------------------------------------------*/
  27:lib/USB_Functions/usb_istr.c **** 
  28:lib/USB_Functions/usb_istr.c **** /* Function prototypes -------------------------------------------------------*/
  29:lib/USB_Functions/usb_istr.c **** void (*pEpInt_IN[7])(void) =
  30:lib/USB_Functions/usb_istr.c ****   {
  31:lib/USB_Functions/usb_istr.c ****     EP1_IN_Callback,
  32:lib/USB_Functions/usb_istr.c ****     EP2_IN_Callback,
  33:lib/USB_Functions/usb_istr.c ****     EP3_IN_Callback,
  34:lib/USB_Functions/usb_istr.c ****     EP4_IN_Callback,
  35:lib/USB_Functions/usb_istr.c ****     EP5_IN_Callback,
  36:lib/USB_Functions/usb_istr.c ****     EP6_IN_Callback,
  37:lib/USB_Functions/usb_istr.c ****     EP7_IN_Callback,
  38:lib/USB_Functions/usb_istr.c ****   };
  39:lib/USB_Functions/usb_istr.c **** 
  40:lib/USB_Functions/usb_istr.c **** void (*pEpInt_OUT[7])(void) =
  41:lib/USB_Functions/usb_istr.c ****   {
  42:lib/USB_Functions/usb_istr.c ****     EP1_OUT_Callback,
  43:lib/USB_Functions/usb_istr.c ****     EP2_OUT_Callback,
  44:lib/USB_Functions/usb_istr.c ****     EP3_OUT_Callback,
  45:lib/USB_Functions/usb_istr.c ****     EP4_OUT_Callback,
  46:lib/USB_Functions/usb_istr.c ****     EP5_OUT_Callback,
  47:lib/USB_Functions/usb_istr.c ****     EP6_OUT_Callback,
  48:lib/USB_Functions/usb_istr.c ****     EP7_OUT_Callback,
  49:lib/USB_Functions/usb_istr.c ****   };
  50:lib/USB_Functions/usb_istr.c ****   
  51:lib/USB_Functions/usb_istr.c **** void (*xUSB_Istr)(void);
  52:lib/USB_Functions/usb_istr.c **** 
  53:lib/USB_Functions/usb_istr.c **** 
  54:lib/USB_Functions/usb_istr.c **** /* Functions -----------------------------------------------------------------*/
  55:lib/USB_Functions/usb_istr.c **** 
  56:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
  57:lib/USB_Functions/usb_istr.c **** /*! 
  58:lib/USB_Functions/usb_istr.c ****     @brief  STR events interrupt service routine wrapper.
  59:lib/USB_Functions/usb_istr.c **** 	@param  None.
  60:lib/USB_Functions/usb_istr.c ****     @retval None.
  61:lib/USB_Functions/usb_istr.c **** */
  62:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
  63:lib/USB_Functions/usb_istr.c **** void USB_Istr(void)
  64:lib/USB_Functions/usb_istr.c **** {
  27              		.loc 1 64 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  65:lib/USB_Functions/usb_istr.c **** 	xUSB_Istr();
  36              		.loc 1 65 0
  37 0002 024B     		ldr	r3, .L2
  38 0004 1868     		ldr	r0, [r3, #0]
  39 0006 8047     		blx	r0
  40              	.LVL0:
  41 0008 08BD     		pop	{r3, pc}
  42              	.L3:
  43 000a 00BF     		.align	2
  44              	.L2:
  45 000c 00000000 		.word	.LANCHOR0
  46              		.cfi_endproc
  47              	.LFE57:
  49              		.section	.text.CDC_USB_Istr,"ax",%progbits
  50              		.align	1
  51              		.global	CDC_USB_Istr
  52              		.thumb
  53              		.thumb_func
  55              	CDC_USB_Istr:
  56              	.LFB58:
  66:lib/USB_Functions/usb_istr.c **** 
  67:lib/USB_Functions/usb_istr.c **** }
  68:lib/USB_Functions/usb_istr.c **** 
  69:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
  70:lib/USB_Functions/usb_istr.c **** /*! 
  71:lib/USB_Functions/usb_istr.c ****     @brief  USB-CDC interrupt service routine.
  72:lib/USB_Functions/usb_istr.c **** 	@param  None.
  73:lib/USB_Functions/usb_istr.c ****     @retval None.
  74:lib/USB_Functions/usb_istr.c **** */
  75:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
  76:lib/USB_Functions/usb_istr.c **** void CDC_USB_Istr(void)
  77:lib/USB_Functions/usb_istr.c **** {
  57              		.loc 1 77 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61 0000 38B5     		push	{r3, r4, r5, lr}
  62              	.LCFI1:
  63              		.cfi_def_cfa_offset 16
  64              		.cfi_offset 3, -16
  65              		.cfi_offset 4, -12
  66              		.cfi_offset 5, -8
  67              		.cfi_offset 14, -4
  78:lib/USB_Functions/usb_istr.c **** 	  wIstr = _GetISTR();
  68              		.loc 1 78 0
  69 0002 194B     		ldr	r3, .L18
  70 0004 1968     		ldr	r1, [r3, #0]
  71 0006 88B2     		uxth	r0, r1
  72 0008 184A     		ldr	r2, .L18+4
  73 000a 1080     		strh	r0, [r2, #0]	@ movhi
  79:lib/USB_Functions/usb_istr.c **** 
  80:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_SOF)
  81:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_SOF & wInterrupt_Mask)
  74              		.loc 1 81 0
  75 000c 1488     		ldrh	r4, [r2, #0]
  76 000e 184D     		ldr	r5, .L18+8
  77 0010 2988     		ldrh	r1, [r5, #0]
  78 0012 2140     		ands	r1, r1, r4
  79 0014 01F40070 		and	r0, r1, #512
  80 0018 82B2     		uxth	r2, r0
  81 001a 4AB1     		cbz	r2, .L5
  82:lib/USB_Functions/usb_istr.c ****   {
  83:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_SOF);
  82              		.loc 1 83 0
  83 001c 4FF6FF54 		movw	r4, #65023
  84 0020 1C60     		str	r4, [r3, #0]
  84:lib/USB_Functions/usb_istr.c ****     bIntPackSOF++;
  85              		.loc 1 84 0
  86 0022 144B     		ldr	r3, .L18+12
  87 0024 1D78     		ldrb	r5, [r3, #0]	@ zero_extendqisi2
  88 0026 691C     		adds	r1, r5, #1
  89 0028 C8B2     		uxtb	r0, r1
  90 002a 1870     		strb	r0, [r3, #0]
  85:lib/USB_Functions/usb_istr.c **** 
  86:lib/USB_Functions/usb_istr.c **** #ifdef CDC_SOF_CALLBACK
  87:lib/USB_Functions/usb_istr.c ****     SOF_Callback();
  91              		.loc 1 87 0
  92 002c FFF7FEFF 		bl	SOF_Callback
  93              	.LVL1:
  94              	.L5:
  88:lib/USB_Functions/usb_istr.c **** #endif
  89:lib/USB_Functions/usb_istr.c ****   }
  90:lib/USB_Functions/usb_istr.c **** #endif
  91:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  92:lib/USB_Functions/usb_istr.c ****   
  93:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_CTR)
  94:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_CTR & wInterrupt_Mask)
  95              		.loc 1 94 0
  96 0030 0E4A     		ldr	r2, .L18+4
  97 0032 1488     		ldrh	r4, [r2, #0]
  98 0034 0E4B     		ldr	r3, .L18+8
  99 0036 1D88     		ldrh	r5, [r3, #0]
 100 0038 2540     		ands	r5, r5, r4
 101 003a 05F40041 		and	r1, r5, #32768
 102 003e 88B2     		uxth	r0, r1
 103 0040 1546     		mov	r5, r2
 104 0042 1C46     		mov	r4, r3
 105 0044 08B1     		cbz	r0, .L6
  95:lib/USB_Functions/usb_istr.c ****   {
  96:lib/USB_Functions/usb_istr.c ****     /* servicing of the endpoint correct transfer interrupt */
  97:lib/USB_Functions/usb_istr.c ****     /* clear of the CTR flag into the sub */
  98:lib/USB_Functions/usb_istr.c ****     CTR_LP();
 106              		.loc 1 98 0
 107 0046 FFF7FEFF 		bl	CTR_LP
 108              	.LVL2:
 109              	.L6:
  99:lib/USB_Functions/usb_istr.c **** #ifdef CTR_CALLBACK
 100:lib/USB_Functions/usb_istr.c ****     CTR_Callback();
 101:lib/USB_Functions/usb_istr.c **** #endif
 102:lib/USB_Functions/usb_istr.c ****   }
 103:lib/USB_Functions/usb_istr.c **** #endif
 104:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
 105:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_RESET)
 106:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_RESET & wInterrupt_Mask)
 110              		.loc 1 106 0
 111 004a 2A88     		ldrh	r2, [r5, #0]
 112 004c 2388     		ldrh	r3, [r4, #0]
 113 004e 1340     		ands	r3, r3, r2
 114 0050 03F48061 		and	r1, r3, #1024
 115 0054 88B2     		uxth	r0, r1
 116 0056 30B1     		cbz	r0, .L4
 107:lib/USB_Functions/usb_istr.c ****   {
 108:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_RESET);
 117              		.loc 1 108 0
 118 0058 4FF6FF32 		movw	r2, #64511
 119 005c 024B     		ldr	r3, .L18
 120 005e 1A60     		str	r2, [r3, #0]
 109:lib/USB_Functions/usb_istr.c ****     Device_Property.Reset();
 121              		.loc 1 109 0
 122 0060 0549     		ldr	r1, .L18+16
 123 0062 4868     		ldr	r0, [r1, #4]
 124 0064 8047     		blx	r0
 125              	.LVL3:
 126              	.L4:
 127 0066 38BD     		pop	{r3, r4, r5, pc}
 128              	.L19:
 129              		.align	2
 130              	.L18:
 131 0068 445C0040 		.word	1073765444
 132 006c 00000000 		.word	.LANCHOR1
 133 0070 00000000 		.word	wInterrupt_Mask
 134 0074 00000000 		.word	.LANCHOR2
 135 0078 00000000 		.word	Device_Property
 136              		.cfi_endproc
 137              	.LFE58:
 139              		.section	.text.MSC_USB_Istr,"ax",%progbits
 140              		.align	1
 141              		.global	MSC_USB_Istr
 142              		.thumb
 143              		.thumb_func
 145              	MSC_USB_Istr:
 146              	.LFB59:
 110:lib/USB_Functions/usb_istr.c **** #ifdef RESET_CALLBACK
 111:lib/USB_Functions/usb_istr.c ****     RESET_Callback();
 112:lib/USB_Functions/usb_istr.c **** #endif
 113:lib/USB_Functions/usb_istr.c ****   }
 114:lib/USB_Functions/usb_istr.c **** #endif
 115:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 116:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_DOVR)
 117:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_DOVR & wInterrupt_Mask)
 118:lib/USB_Functions/usb_istr.c ****   {
 119:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_DOVR);
 120:lib/USB_Functions/usb_istr.c **** #ifdef DOVR_CALLBACK
 121:lib/USB_Functions/usb_istr.c ****     DOVR_Callback();
 122:lib/USB_Functions/usb_istr.c **** #endif
 123:lib/USB_Functions/usb_istr.c ****   }
 124:lib/USB_Functions/usb_istr.c **** #endif
 125:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 126:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_ERR)
 127:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_ERR & wInterrupt_Mask)
 128:lib/USB_Functions/usb_istr.c ****   {
 129:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_ERR);
 130:lib/USB_Functions/usb_istr.c **** #ifdef ERR_CALLBACK
 131:lib/USB_Functions/usb_istr.c ****     ERR_Callback();
 132:lib/USB_Functions/usb_istr.c **** #endif
 133:lib/USB_Functions/usb_istr.c ****   }
 134:lib/USB_Functions/usb_istr.c **** #endif
 135:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 136:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_WKUP)
 137:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 138:lib/USB_Functions/usb_istr.c ****   {
 139:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_WKUP);
 140:lib/USB_Functions/usb_istr.c ****     Resume(RESUME_EXTERNAL);
 141:lib/USB_Functions/usb_istr.c **** #ifdef WKUP_CALLBACK
 142:lib/USB_Functions/usb_istr.c ****     WKUP_Callback();
 143:lib/USB_Functions/usb_istr.c **** #endif
 144:lib/USB_Functions/usb_istr.c ****   }
 145:lib/USB_Functions/usb_istr.c **** #endif
 146:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 147:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_SUSP)
 148:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 149:lib/USB_Functions/usb_istr.c ****   {
 150:lib/USB_Functions/usb_istr.c **** 
 151:lib/USB_Functions/usb_istr.c ****     /* check if SUSPEND is possible */
 152:lib/USB_Functions/usb_istr.c ****     if (fSuspendEnabled)
 153:lib/USB_Functions/usb_istr.c ****     {
 154:lib/USB_Functions/usb_istr.c ****       Suspend();
 155:lib/USB_Functions/usb_istr.c ****     }
 156:lib/USB_Functions/usb_istr.c ****     else
 157:lib/USB_Functions/usb_istr.c ****     {
 158:lib/USB_Functions/usb_istr.c ****       /* if not possible then resume after xx ms */
 159:lib/USB_Functions/usb_istr.c ****       Resume(RESUME_LATER);
 160:lib/USB_Functions/usb_istr.c ****     }
 161:lib/USB_Functions/usb_istr.c ****     /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
 162:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_SUSP);
 163:lib/USB_Functions/usb_istr.c **** #ifdef SUSP_CALLBACK
 164:lib/USB_Functions/usb_istr.c ****     SUSP_Callback();
 165:lib/USB_Functions/usb_istr.c **** #endif
 166:lib/USB_Functions/usb_istr.c ****   }
 167:lib/USB_Functions/usb_istr.c **** #endif
 168:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 169:lib/USB_Functions/usb_istr.c **** 
 170:lib/USB_Functions/usb_istr.c **** #if (CDC_IMR_MSK & ISTR_ESOF)
 171:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 172:lib/USB_Functions/usb_istr.c ****   {
 173:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_ESOF);
 174:lib/USB_Functions/usb_istr.c ****     /* resume handling timing is made with ESOFs */
 175:lib/USB_Functions/usb_istr.c ****     Resume(RESUME_ESOF); /* request without change of the machine state */
 176:lib/USB_Functions/usb_istr.c **** 
 177:lib/USB_Functions/usb_istr.c **** #ifdef ESOF_CALLBACK
 178:lib/USB_Functions/usb_istr.c ****     ESOF_Callback();
 179:lib/USB_Functions/usb_istr.c **** #endif
 180:lib/USB_Functions/usb_istr.c ****   }
 181:lib/USB_Functions/usb_istr.c **** #endif
 182:lib/USB_Functions/usb_istr.c **** }
 183:lib/USB_Functions/usb_istr.c **** 
 184:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
 185:lib/USB_Functions/usb_istr.c **** /*! 
 186:lib/USB_Functions/usb_istr.c ****     @brief  USB-MSC interrupt service routine.
 187:lib/USB_Functions/usb_istr.c **** 	@param  None.
 188:lib/USB_Functions/usb_istr.c ****     @retval None.
 189:lib/USB_Functions/usb_istr.c **** */
 190:lib/USB_Functions/usb_istr.c **** /**************************************************************************/
 191:lib/USB_Functions/usb_istr.c **** void MSC_USB_Istr(void)
 192:lib/USB_Functions/usb_istr.c **** {
 147              		.loc 1 192 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151 0000 38B5     		push	{r3, r4, r5, lr}
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 16
 154              		.cfi_offset 3, -16
 155              		.cfi_offset 4, -12
 156              		.cfi_offset 5, -8
 157              		.cfi_offset 14, -4
 193:lib/USB_Functions/usb_istr.c **** 
 194:lib/USB_Functions/usb_istr.c ****   wIstr = _GetISTR();
 158              		.loc 1 194 0
 159 0002 104B     		ldr	r3, .L29
 160 0004 1A68     		ldr	r2, [r3, #0]
 161 0006 90B2     		uxth	r0, r2
 162 0008 0F4C     		ldr	r4, .L29+4
 163 000a 2080     		strh	r0, [r4, #0]	@ movhi
 195:lib/USB_Functions/usb_istr.c **** 
 196:lib/USB_Functions/usb_istr.c **** #if (MSC_IMR_MSK & ISTR_CTR)
 197:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_CTR & wInterrupt_Mask)
 164              		.loc 1 197 0
 165 000c 2588     		ldrh	r5, [r4, #0]
 166 000e 0F4B     		ldr	r3, .L29+8
 167 0010 1988     		ldrh	r1, [r3, #0]
 168 0012 2940     		ands	r1, r1, r5
 169 0014 01F40042 		and	r2, r1, #32768
 170 0018 90B2     		uxth	r0, r2
 171 001a 2546     		mov	r5, r4
 172 001c 1C46     		mov	r4, r3
 173 001e 08B1     		cbz	r0, .L21
 198:lib/USB_Functions/usb_istr.c ****   {
 199:lib/USB_Functions/usb_istr.c ****     /* servicing of the endpoint correct transfer interrupt */
 200:lib/USB_Functions/usb_istr.c ****     /* clear of the CTR flag into the sub */
 201:lib/USB_Functions/usb_istr.c ****     CTR_LP();
 174              		.loc 1 201 0
 175 0020 FFF7FEFF 		bl	CTR_LP
 176              	.LVL4:
 177              	.L21:
 202:lib/USB_Functions/usb_istr.c **** #ifdef CTR_CALLBACK
 203:lib/USB_Functions/usb_istr.c ****     CTR_Callback();
 204:lib/USB_Functions/usb_istr.c **** #endif
 205:lib/USB_Functions/usb_istr.c ****   }
 206:lib/USB_Functions/usb_istr.c **** #endif  
 207:lib/USB_Functions/usb_istr.c ****   /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
 208:lib/USB_Functions/usb_istr.c **** #if (MSC_IMR_MSK & ISTR_RESET)
 209:lib/USB_Functions/usb_istr.c ****   if (wIstr & ISTR_RESET & wInterrupt_Mask)
 178              		.loc 1 209 0
 179 0024 2988     		ldrh	r1, [r5, #0]
 180 0026 2388     		ldrh	r3, [r4, #0]
 181 0028 0B40     		ands	r3, r3, r1
 182 002a 03F48062 		and	r2, r3, #1024
 183 002e 90B2     		uxth	r0, r2
 184 0030 30B1     		cbz	r0, .L20
 210:lib/USB_Functions/usb_istr.c ****   {
 211:lib/USB_Functions/usb_istr.c ****     _SetISTR((uint16_t)CLR_RESET);
 185              		.loc 1 211 0
 186 0032 4FF6FF31 		movw	r1, #64511
 187 0036 034B     		ldr	r3, .L29
 188 0038 1960     		str	r1, [r3, #0]
 212:lib/USB_Functions/usb_istr.c ****     Device_Property.Reset();
 189              		.loc 1 212 0
 190 003a 054A     		ldr	r2, .L29+12
 191 003c 5068     		ldr	r0, [r2, #4]
 192 003e 8047     		blx	r0
 193              	.LVL5:
 194              	.L20:
 195 0040 38BD     		pop	{r3, r4, r5, pc}
 196              	.L30:
 197 0042 00BF     		.align	2
 198              	.L29:
 199 0044 445C0040 		.word	1073765444
 200 0048 00000000 		.word	.LANCHOR1
 201 004c 00000000 		.word	wInterrupt_Mask
 202 0050 00000000 		.word	Device_Property
 203              		.cfi_endproc
 204              	.LFE59:
 206              		.global	xUSB_Istr
 207              		.global	pEpInt_OUT
 208              		.global	pEpInt_IN
 209              		.global	bIntPackSOF
 210              		.global	wIstr
 211              		.section	.bss.xUSB_Istr,"aw",%nobits
 212              		.align	2
 213              		.set	.LANCHOR0,. + 0
 216              	xUSB_Istr:
 217 0000 00000000 		.space	4
 218              		.section	.bss.bIntPackSOF,"aw",%nobits
 219              		.set	.LANCHOR2,. + 0
 222              	bIntPackSOF:
 223 0000 00       		.space	1
 224              		.section	.data.pEpInt_OUT,"aw",%progbits
 225              		.align	2
 228              	pEpInt_OUT:
 229 0000 00000000 		.word	NOP_Process
 230 0004 00000000 		.word	EP2_OUT_Callback
 231 0008 00000000 		.word	EP3_OUT_Callback
 232 000c 00000000 		.word	NOP_Process
 233 0010 00000000 		.word	NOP_Process
 234 0014 00000000 		.word	NOP_Process
 235 0018 00000000 		.word	NOP_Process
 236              		.section	.bss.wIstr,"aw",%nobits
 237              		.align	1
 238              		.set	.LANCHOR1,. + 0
 241              	wIstr:
 242 0000 0000     		.space	2
 243              		.section	.data.pEpInt_IN,"aw",%progbits
 244              		.align	2
 247              	pEpInt_IN:
 248 0000 00000000 		.word	EP1_IN_Callback
 249 0004 00000000 		.word	NOP_Process
 250 0008 00000000 		.word	NOP_Process
 251 000c 00000000 		.word	NOP_Process
 252 0010 00000000 		.word	NOP_Process
 253 0014 00000000 		.word	NOP_Process
 254 0018 00000000 		.word	NOP_Process
 255              		.text
 256              	.Letext0:
 257              		.file 2 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 258              		.file 3 "./lib/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 259              		.file 4 "./lib/CMSIS/Include/core_cm3.h"
 260              		.file 5 "./inc/systick.h"
 261              		.file 6 "./lib/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 262              		.file 7 "lib/USB_Functions/usb_istr.h"
 263              		.file 8 "./lib/STM32_USB-FS-Device_Driver/inc/usb_int.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_istr.c
  R:\TEMP\cc9c35WO.s:19     .text.USB_Istr:00000000 $t
  R:\TEMP\cc9c35WO.s:24     .text.USB_Istr:00000000 USB_Istr
  R:\TEMP\cc9c35WO.s:45     .text.USB_Istr:0000000c $d
  R:\TEMP\cc9c35WO.s:50     .text.CDC_USB_Istr:00000000 $t
  R:\TEMP\cc9c35WO.s:55     .text.CDC_USB_Istr:00000000 CDC_USB_Istr
  R:\TEMP\cc9c35WO.s:131    .text.CDC_USB_Istr:00000068 $d
  R:\TEMP\cc9c35WO.s:140    .text.MSC_USB_Istr:00000000 $t
  R:\TEMP\cc9c35WO.s:145    .text.MSC_USB_Istr:00000000 MSC_USB_Istr
  R:\TEMP\cc9c35WO.s:199    .text.MSC_USB_Istr:00000044 $d
  R:\TEMP\cc9c35WO.s:216    .bss.xUSB_Istr:00000000 xUSB_Istr
  R:\TEMP\cc9c35WO.s:228    .data.pEpInt_OUT:00000000 pEpInt_OUT
  R:\TEMP\cc9c35WO.s:247    .data.pEpInt_IN:00000000 pEpInt_IN
  R:\TEMP\cc9c35WO.s:222    .bss.bIntPackSOF:00000000 bIntPackSOF
  R:\TEMP\cc9c35WO.s:241    .bss.wIstr:00000000 wIstr
  R:\TEMP\cc9c35WO.s:212    .bss.xUSB_Istr:00000000 $d
  R:\TEMP\cc9c35WO.s:223    .bss.bIntPackSOF:00000000 $d
  R:\TEMP\cc9c35WO.s:225    .data.pEpInt_OUT:00000000 $d
  R:\TEMP\cc9c35WO.s:237    .bss.wIstr:00000000 $d
  R:\TEMP\cc9c35WO.s:244    .data.pEpInt_IN:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SOF_Callback
CTR_LP
wInterrupt_Mask
Device_Property
NOP_Process
EP2_OUT_Callback
EP3_OUT_Callback
EP1_IN_Callback
