   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PowerOn,"ax",%progbits
  19              		.align	1
  20              		.global	PowerOn
  21              		.thumb
  22              		.thumb_func
  24              	PowerOn:
  25              	.LFB57:
  26              		.file 1 "lib/USB_Functions/usb_pwr.c"
   1:lib/USB_Functions/usb_pwr.c **** /********************************************************************************/
   2:lib/USB_Functions/usb_pwr.c **** /*!
   3:lib/USB_Functions/usb_pwr.c **** 	@file			usb_pwr.c
   4:lib/USB_Functions/usb_pwr.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:lib/USB_Functions/usb_pwr.c ****     @version        1.00
   6:lib/USB_Functions/usb_pwr.c ****     @date           2012.01.30
   7:lib/USB_Functions/usb_pwr.c **** 	@brief          Connection/disconnection & power management header.
   8:lib/USB_Functions/usb_pwr.c **** 
   9:lib/USB_Functions/usb_pwr.c ****     @section HISTORY
  10:lib/USB_Functions/usb_pwr.c **** 		2012.01.30	V1.00	Start Here
  11:lib/USB_Functions/usb_pwr.c **** 
  12:lib/USB_Functions/usb_pwr.c ****     @section LICENSE
  13:lib/USB_Functions/usb_pwr.c **** 		BSD License. See Copyright.txt
  14:lib/USB_Functions/usb_pwr.c **** */
  15:lib/USB_Functions/usb_pwr.c **** /********************************************************************************/
  16:lib/USB_Functions/usb_pwr.c **** 
  17:lib/USB_Functions/usb_pwr.c **** /* Includes ------------------------------------------------------------------*/
  18:lib/USB_Functions/usb_pwr.c **** #include "usb_lib.h"
  19:lib/USB_Functions/usb_pwr.c **** #include "usb_conf.h"
  20:lib/USB_Functions/usb_pwr.c **** #include "usb_pwr.h"
  21:lib/USB_Functions/usb_pwr.c **** #include "hw_config.h"
  22:lib/USB_Functions/usb_pwr.c **** 
  23:lib/USB_Functions/usb_pwr.c **** /* Defines -------------------------------------------------------------------*/
  24:lib/USB_Functions/usb_pwr.c **** 
  25:lib/USB_Functions/usb_pwr.c **** /* Variables -----------------------------------------------------------------*/
  26:lib/USB_Functions/usb_pwr.c **** __IO uint32_t bDeviceState = UNCONNECTED; /* USB device status */
  27:lib/USB_Functions/usb_pwr.c **** __IO bool fSuspendEnabled = TRUE;  /* true when suspend is possible */
  28:lib/USB_Functions/usb_pwr.c **** 
  29:lib/USB_Functions/usb_pwr.c **** struct
  30:lib/USB_Functions/usb_pwr.c **** {
  31:lib/USB_Functions/usb_pwr.c ****   __IO RESUME_STATE eState;
  32:lib/USB_Functions/usb_pwr.c ****   __IO uint8_t bESOFcnt;
  33:lib/USB_Functions/usb_pwr.c **** }
  34:lib/USB_Functions/usb_pwr.c **** ResumeS;
  35:lib/USB_Functions/usb_pwr.c **** 
  36:lib/USB_Functions/usb_pwr.c **** /* Constants -----------------------------------------------------------------*/
  37:lib/USB_Functions/usb_pwr.c **** 
  38:lib/USB_Functions/usb_pwr.c **** /* Function prototypes -------------------------------------------------------*/
  39:lib/USB_Functions/usb_pwr.c **** 
  40:lib/USB_Functions/usb_pwr.c **** /* Functions -----------------------------------------------------------------*/
  41:lib/USB_Functions/usb_pwr.c **** 
  42:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
  43:lib/USB_Functions/usb_pwr.c **** /*! 
  44:lib/USB_Functions/usb_pwr.c ****     @brief  handles switch-off conditions.
  45:lib/USB_Functions/usb_pwr.c **** 	@param  None.
  46:lib/USB_Functions/usb_pwr.c ****     @retval USB_SUCCESS.
  47:lib/USB_Functions/usb_pwr.c **** */
  48:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
  49:lib/USB_Functions/usb_pwr.c **** RESULT PowerOn(void)
  50:lib/USB_Functions/usb_pwr.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  51:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
  52:lib/USB_Functions/usb_pwr.c ****   uint16_t wRegVal;
  53:lib/USB_Functions/usb_pwr.c ****   
  54:lib/USB_Functions/usb_pwr.c ****   /*** cable plugged-in ? ***/
  55:lib/USB_Functions/usb_pwr.c ****   /*while(!CablePluggedIn());*/
  56:lib/USB_Functions/usb_pwr.c ****   USB_Cable_Config(ENABLE);
  36              		.loc 1 56 0
  37 0002 0120     		movs	r0, #1
  38 0004 FFF7FEFF 		bl	USB_Cable_Config
  39              	.LVL0:
  57:lib/USB_Functions/usb_pwr.c **** 
  58:lib/USB_Functions/usb_pwr.c ****   /*** CNTR_PWDN = 0 ***/
  59:lib/USB_Functions/usb_pwr.c ****   wRegVal = CNTR_FRES;
  60:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wRegVal);
  40              		.loc 1 60 0
  41 0008 064B     		ldr	r3, .L2
  42 000a 0122     		movs	r2, #1
  43 000c 1A60     		str	r2, [r3, #0]
  61:lib/USB_Functions/usb_pwr.c **** 
  62:lib/USB_Functions/usb_pwr.c ****   /*** CNTR_FRES = 0 ***/
  63:lib/USB_Functions/usb_pwr.c ****   wInterrupt_Mask = 0;
  44              		.loc 1 63 0
  45 000e 0020     		movs	r0, #0
  64:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  46              		.loc 1 64 0
  47 0010 1860     		str	r0, [r3, #0]
  65:lib/USB_Functions/usb_pwr.c ****   /*** Clear pending interrupts ***/
  66:lib/USB_Functions/usb_pwr.c ****   _SetISTR(0);
  48              		.loc 1 66 0
  49 0012 0549     		ldr	r1, .L2+4
  50 0014 0860     		str	r0, [r1, #0]
  67:lib/USB_Functions/usb_pwr.c ****   /*** Set interrupt mask ***/
  68:lib/USB_Functions/usb_pwr.c ****   wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  51              		.loc 1 68 0
  52 0016 4FF4E052 		mov	r2, #7168
  53 001a 0449     		ldr	r1, .L2+8
  54 001c 0A80     		strh	r2, [r1, #0]	@ movhi
  69:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wInterrupt_Mask);
  55              		.loc 1 69 0
  56 001e 1A60     		str	r2, [r3, #0]
  70:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
  71:lib/USB_Functions/usb_pwr.c ****   
  72:lib/USB_Functions/usb_pwr.c ****   return USB_SUCCESS;
  73:lib/USB_Functions/usb_pwr.c **** }
  57              		.loc 1 73 0
  58 0020 08BD     		pop	{r3, pc}
  59              	.L3:
  60 0022 00BF     		.align	2
  61              	.L2:
  62 0024 405C0040 		.word	1073765440
  63 0028 445C0040 		.word	1073765444
  64 002c 00000000 		.word	wInterrupt_Mask
  65              		.cfi_endproc
  66              	.LFE57:
  68              		.section	.text.PowerOff,"ax",%progbits
  69              		.align	1
  70              		.global	PowerOff
  71              		.thumb
  72              		.thumb_func
  74              	PowerOff:
  75              	.LFB58:
  74:lib/USB_Functions/usb_pwr.c **** 
  75:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
  76:lib/USB_Functions/usb_pwr.c **** /*! 
  77:lib/USB_Functions/usb_pwr.c ****     @brief  handles switch-off conditions.
  78:lib/USB_Functions/usb_pwr.c **** 	@param  None.
  79:lib/USB_Functions/usb_pwr.c ****     @retval USB_SUCCESS.
  80:lib/USB_Functions/usb_pwr.c **** */
  81:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
  82:lib/USB_Functions/usb_pwr.c **** RESULT PowerOff()
  83:lib/USB_Functions/usb_pwr.c **** {
  76              		.loc 1 83 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 38B5     		push	{r3, r4, r5, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 16
  83              		.cfi_offset 3, -16
  84              		.cfi_offset 4, -12
  85              		.cfi_offset 5, -8
  86              		.cfi_offset 14, -4
  84:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL  
  85:lib/USB_Functions/usb_pwr.c ****   /* disable all interrupts and force USB reset */
  86:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(CNTR_FRES);
  87              		.loc 1 86 0
  88 0002 064D     		ldr	r5, .L5
  89 0004 0123     		movs	r3, #1
  90 0006 2B60     		str	r3, [r5, #0]
  87:lib/USB_Functions/usb_pwr.c ****   /* clear interrupt status register */
  88:lib/USB_Functions/usb_pwr.c ****   _SetISTR(0);
  91              		.loc 1 88 0
  92 0008 0024     		movs	r4, #0
  93 000a 0548     		ldr	r0, .L5+4
  94 000c 0460     		str	r4, [r0, #0]
  89:lib/USB_Functions/usb_pwr.c ****   /* Disable the Pull-Up*/
  90:lib/USB_Functions/usb_pwr.c ****   USB_Cable_Config(DISABLE);
  95              		.loc 1 90 0
  96 000e 2046     		mov	r0, r4
  97 0010 FFF7FEFF 		bl	USB_Cable_Config
  98              	.LVL1:
  91:lib/USB_Functions/usb_pwr.c ****   /* switch-off device */
  92:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(CNTR_FRES + CNTR_PDWN);
  99              		.loc 1 92 0
 100 0014 0321     		movs	r1, #3
 101 0016 2960     		str	r1, [r5, #0]
  93:lib/USB_Functions/usb_pwr.c ****   /* sw variables reset */
  94:lib/USB_Functions/usb_pwr.c ****   /* ... */
  95:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
  96:lib/USB_Functions/usb_pwr.c **** 
  97:lib/USB_Functions/usb_pwr.c ****   return USB_SUCCESS;
  98:lib/USB_Functions/usb_pwr.c **** }
 102              		.loc 1 98 0
 103 0018 2046     		mov	r0, r4
 104 001a 38BD     		pop	{r3, r4, r5, pc}
 105              	.L6:
 106              		.align	2
 107              	.L5:
 108 001c 405C0040 		.word	1073765440
 109 0020 445C0040 		.word	1073765444
 110              		.cfi_endproc
 111              	.LFE58:
 113              		.section	.text.Suspend,"ax",%progbits
 114              		.align	1
 115              		.global	Suspend
 116              		.thumb
 117              		.thumb_func
 119              	Suspend:
 120              	.LFB59:
  99:lib/USB_Functions/usb_pwr.c **** 
 100:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 101:lib/USB_Functions/usb_pwr.c **** /*! 
 102:lib/USB_Functions/usb_pwr.c ****     @brief  sets suspend mode operating conditions.
 103:lib/USB_Functions/usb_pwr.c **** 	@param  None.
 104:lib/USB_Functions/usb_pwr.c ****     @retval USB_SUCCESS.
 105:lib/USB_Functions/usb_pwr.c **** */
 106:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 107:lib/USB_Functions/usb_pwr.c **** void Suspend(void)
 108:lib/USB_Functions/usb_pwr.c **** {
 121              		.loc 1 108 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 109:lib/USB_Functions/usb_pwr.c **** 
 110:lib/USB_Functions/usb_pwr.c ****   /* suspend preparation */
 111:lib/USB_Functions/usb_pwr.c ****   /* ... */
 112:lib/USB_Functions/usb_pwr.c ****   
 113:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
 114:lib/USB_Functions/usb_pwr.c ****   uint16_t wCNTR;
 115:lib/USB_Functions/usb_pwr.c **** 
 116:lib/USB_Functions/usb_pwr.c ****   /* macrocell enters suspend mode */
 117:lib/USB_Functions/usb_pwr.c ****   wCNTR = _GetCNTR();
 126              		.loc 1 117 0
 127 0000 064B     		ldr	r3, .L8
 128 0002 1A68     		ldr	r2, [r3, #0]
 129              	.LVL2:
 118:lib/USB_Functions/usb_pwr.c ****   wCNTR |= CNTR_FSUSP;
 119:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wCNTR);
 130              		.loc 1 119 0
 131 0004 90B2     		uxth	r0, r2
 132 0006 40F00801 		orr	r1, r0, #8
 133 000a 1960     		str	r1, [r3, #0]
 120:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
 121:lib/USB_Functions/usb_pwr.c ****   
 122:lib/USB_Functions/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 123:lib/USB_Functions/usb_pwr.c ****   /* power reduction */
 124:lib/USB_Functions/usb_pwr.c ****   /* ... on connected devices */
 125:lib/USB_Functions/usb_pwr.c **** 
 126:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
 127:lib/USB_Functions/usb_pwr.c ****   /* force low-power mode in the macrocell */
 128:lib/USB_Functions/usb_pwr.c ****   wCNTR = _GetCNTR();
 134              		.loc 1 128 0
 135 000c 1A68     		ldr	r2, [r3, #0]
 136              	.LVL3:
 129:lib/USB_Functions/usb_pwr.c ****   wCNTR |= CNTR_LPMODE;
 130:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wCNTR);
 137              		.loc 1 130 0
 138 000e 90B2     		uxth	r0, r2
 139 0010 40F00401 		orr	r1, r0, #4
 140 0014 1960     		str	r1, [r3, #0]
 131:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
 132:lib/USB_Functions/usb_pwr.c **** 
 133:lib/USB_Functions/usb_pwr.c ****   /* switch-off the clocks */
 134:lib/USB_Functions/usb_pwr.c ****   /* ... */
 135:lib/USB_Functions/usb_pwr.c ****   Enter_LowPowerMode();
 136:lib/USB_Functions/usb_pwr.c **** }
 141              		.loc 1 136 0
 135:lib/USB_Functions/usb_pwr.c ****   Enter_LowPowerMode();
 142              		.loc 1 135 0
 143 0016 FFF7FEBF 		b	Enter_LowPowerMode
 144              	.LVL4:
 145              	.L9:
 146 001a 00BF     		.align	2
 147              	.L8:
 148 001c 405C0040 		.word	1073765440
 149              		.cfi_endproc
 150              	.LFE59:
 152              		.section	.text.Resume_Init,"ax",%progbits
 153              		.align	1
 154              		.global	Resume_Init
 155              		.thumb
 156              		.thumb_func
 158              	Resume_Init:
 159              	.LFB60:
 137:lib/USB_Functions/usb_pwr.c **** 
 138:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 139:lib/USB_Functions/usb_pwr.c **** /*! 
 140:lib/USB_Functions/usb_pwr.c ****     @brief  Handles wake-up restoring normal operations.
 141:lib/USB_Functions/usb_pwr.c **** 	@param  None.
 142:lib/USB_Functions/usb_pwr.c ****     @retval USB_SUCCESS.
 143:lib/USB_Functions/usb_pwr.c **** */
 144:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 145:lib/USB_Functions/usb_pwr.c **** void Resume_Init(void)
 146:lib/USB_Functions/usb_pwr.c **** {
 160              		.loc 1 146 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 147:lib/USB_Functions/usb_pwr.c ****   /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
 148:lib/USB_Functions/usb_pwr.c ****   /* restart the clocks */
 149:lib/USB_Functions/usb_pwr.c ****   /* ...  */
 150:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
 151:lib/USB_Functions/usb_pwr.c ****   uint16_t wCNTR;
 152:lib/USB_Functions/usb_pwr.c ****   
 153:lib/USB_Functions/usb_pwr.c ****   /* CNTR_LPMODE = 0 */
 154:lib/USB_Functions/usb_pwr.c ****   wCNTR = _GetCNTR();
 169              		.loc 1 154 0
 170 0002 064C     		ldr	r4, .L11
 171 0004 2268     		ldr	r2, [r4, #0]
 172              	.LVL5:
 155:lib/USB_Functions/usb_pwr.c ****   wCNTR &= (~CNTR_LPMODE);
 173              		.loc 1 155 0
 174 0006 4FF6FB73 		movw	r3, #65531
 175 000a 1340     		ands	r3, r3, r2
 176              	.LVL6:
 156:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(wCNTR);
 177              		.loc 1 156 0
 178 000c 2360     		str	r3, [r4, #0]
 157:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
 158:lib/USB_Functions/usb_pwr.c ****   
 159:lib/USB_Functions/usb_pwr.c ****   /* restore full power */
 160:lib/USB_Functions/usb_pwr.c ****   /* ... on connected devices */
 161:lib/USB_Functions/usb_pwr.c ****   Leave_LowPowerMode();
 179              		.loc 1 161 0
 180 000e FFF7FEFF 		bl	Leave_LowPowerMode
 181              	.LVL7:
 162:lib/USB_Functions/usb_pwr.c **** 
 163:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
 164:lib/USB_Functions/usb_pwr.c ****   /* reset FSUSP bit */
 165:lib/USB_Functions/usb_pwr.c ****   _SetCNTR(IMR_MSK);
 182              		.loc 1 165 0
 183 0012 4FF40640 		mov	r0, #34304
 184 0016 2060     		str	r0, [r4, #0]
 185 0018 10BD     		pop	{r4, pc}
 186              	.L12:
 187 001a 00BF     		.align	2
 188              	.L11:
 189 001c 405C0040 		.word	1073765440
 190              		.cfi_endproc
 191              	.LFE60:
 193              		.section	.text.Resume,"ax",%progbits
 194              		.align	1
 195              		.global	Resume
 196              		.thumb
 197              		.thumb_func
 199              	Resume:
 200              	.LFB61:
 166:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
 167:lib/USB_Functions/usb_pwr.c ****   
 168:lib/USB_Functions/usb_pwr.c ****   /* reverse suspend preparation */
 169:lib/USB_Functions/usb_pwr.c ****   /* ... */
 170:lib/USB_Functions/usb_pwr.c **** }
 171:lib/USB_Functions/usb_pwr.c **** 
 172:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 173:lib/USB_Functions/usb_pwr.c **** /*! 
 174:lib/USB_Functions/usb_pwr.c ****     @brief  This is the state machine handling resume operations and
 175:lib/USB_Functions/usb_pwr.c **** 			timing sequence. The control is based on the Resume structure
 176:lib/USB_Functions/usb_pwr.c **** 			variables and on the ESOF interrupt calling this subroutine
 177:lib/USB_Functions/usb_pwr.c **** 			without changing machine state.
 178:lib/USB_Functions/usb_pwr.c **** 	@param  None.
 179:lib/USB_Functions/usb_pwr.c ****     @retval None.
 180:lib/USB_Functions/usb_pwr.c **** */
 181:lib/USB_Functions/usb_pwr.c **** /**************************************************************************/
 182:lib/USB_Functions/usb_pwr.c **** void Resume(RESUME_STATE eResumeSetVal)
 183:lib/USB_Functions/usb_pwr.c **** {
 201              		.loc 1 183 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL8:
 206 0000 10B5     		push	{r4, lr}
 207              	.LCFI3:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 4, -8
 210              		.cfi_offset 14, -4
 184:lib/USB_Functions/usb_pwr.c **** #ifndef STM32F10X_CL
 185:lib/USB_Functions/usb_pwr.c ****   uint16_t wCNTR;
 186:lib/USB_Functions/usb_pwr.c **** #endif /* STM32F10X_CL */
 187:lib/USB_Functions/usb_pwr.c **** 
 188:lib/USB_Functions/usb_pwr.c ****   if (eResumeSetVal != RESUME_ESOF)
 211              		.loc 1 188 0
 212 0002 0728     		cmp	r0, #7
 213 0004 1E4B     		ldr	r3, .L33
 189:lib/USB_Functions/usb_pwr.c ****     ResumeS.eState = eResumeSetVal;
 214              		.loc 1 189 0
 215 0006 18BF     		it	ne
 216 0008 1870     		strbne	r0, [r3, #0]
 190:lib/USB_Functions/usb_pwr.c **** 
 191:lib/USB_Functions/usb_pwr.c ****   switch (ResumeS.eState)
 217              		.loc 1 191 0
 218 000a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 219 000c 1C4C     		ldr	r4, .L33
 220 000e 052A     		cmp	r2, #5
 221 0010 33D8     		bhi	.L15
 222 0012 DFE802F0 		tbb	[pc, r2]
 223              	.L22:
 224 0016 03       		.byte	(.L16-.L22)/2
 225 0017 07       		.byte	(.L17-.L22)/2
 226 0018 0C       		.byte	(.L18-.L22)/2
 227 0019 10       		.byte	(.L19-.L22)/2
 228 001a 18       		.byte	(.L20-.L22)/2
 229 001b 23       		.byte	(.L21-.L22)/2
 230              		.align	1
 231              	.L16:
 192:lib/USB_Functions/usb_pwr.c ****   {
 193:lib/USB_Functions/usb_pwr.c ****     case RESUME_EXTERNAL:
 194:lib/USB_Functions/usb_pwr.c ****       Resume_Init();
 232              		.loc 1 194 0
 233 001c FFF7FEFF 		bl	Resume_Init
 234              	.LVL9:
 195:lib/USB_Functions/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 235              		.loc 1 195 0
 236 0020 0622     		movs	r2, #6
 237 0022 02E0     		b	.L29
 238              	.LVL10:
 239              	.L17:
 196:lib/USB_Functions/usb_pwr.c ****       break;
 197:lib/USB_Functions/usb_pwr.c ****     case RESUME_INTERNAL:
 198:lib/USB_Functions/usb_pwr.c ****       Resume_Init();
 240              		.loc 1 198 0
 241 0024 FFF7FEFF 		bl	Resume_Init
 242              	.LVL11:
 199:lib/USB_Functions/usb_pwr.c ****       ResumeS.eState = RESUME_START;
 243              		.loc 1 199 0
 244 0028 0422     		movs	r2, #4
 245              	.L29:
 246 002a 2270     		strb	r2, [r4, #0]
 200:lib/USB_Functions/usb_pwr.c ****       break;
 247              		.loc 1 200 0
 248 002c 10BD     		pop	{r4, pc}
 249              	.LVL12:
 250              	.L18:
 201:lib/USB_Functions/usb_pwr.c ****     case RESUME_LATER:
 202:lib/USB_Functions/usb_pwr.c ****       ResumeS.bESOFcnt = 2;
 251              		.loc 1 202 0
 252 002e 0221     		movs	r1, #2
 253 0030 5970     		strb	r1, [r3, #1]
 203:lib/USB_Functions/usb_pwr.c ****       ResumeS.eState = RESUME_WAIT;
 254              		.loc 1 203 0
 255 0032 0320     		movs	r0, #3
 256              	.LVL13:
 257 0034 22E0     		b	.L30
 258              	.LVL14:
 259              	.L19:
 204:lib/USB_Functions/usb_pwr.c ****       break;
 205:lib/USB_Functions/usb_pwr.c ****     case RESUME_WAIT:
 206:lib/USB_Functions/usb_pwr.c ****       ResumeS.bESOFcnt--;
 260              		.loc 1 206 0
 261 0036 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 262 0038 4A1E     		subs	r2, r1, #1
 263 003a D0B2     		uxtb	r0, r2
 264              	.LVL15:
 265 003c 5870     		strb	r0, [r3, #1]
 207:lib/USB_Functions/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 266              		.loc 1 207 0
 267 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 268 0040 EBB9     		cbnz	r3, .L13
 208:lib/USB_Functions/usb_pwr.c ****         ResumeS.eState = RESUME_START;
 269              		.loc 1 208 0
 270 0042 0420     		movs	r0, #4
 271 0044 17E0     		b	.L31
 272              	.LVL16:
 273              	.L20:
 209:lib/USB_Functions/usb_pwr.c ****       break;
 210:lib/USB_Functions/usb_pwr.c ****     case RESUME_START:
 211:lib/USB_Functions/usb_pwr.c ****      #ifdef STM32F10X_CL
 212:lib/USB_Functions/usb_pwr.c ****       OTGD_FS_SetRemoteWakeup();
 213:lib/USB_Functions/usb_pwr.c ****      #else 
 214:lib/USB_Functions/usb_pwr.c ****       wCNTR = _GetCNTR();
 274              		.loc 1 214 0
 275 0046 0F4B     		ldr	r3, .L33+4
 276 0048 1868     		ldr	r0, [r3, #0]
 277              	.LVL17:
 215:lib/USB_Functions/usb_pwr.c ****       wCNTR |= CNTR_RESUME;
 216:lib/USB_Functions/usb_pwr.c ****       _SetCNTR(wCNTR);
 278              		.loc 1 216 0
 279 004a 81B2     		uxth	r1, r0
 280 004c 41F01002 		orr	r2, r1, #16
 281 0050 1A60     		str	r2, [r3, #0]
 217:lib/USB_Functions/usb_pwr.c ****      #endif /* STM32F10X_CL */
 218:lib/USB_Functions/usb_pwr.c ****       ResumeS.eState = RESUME_ON;
 282              		.loc 1 218 0
 283 0052 0523     		movs	r3, #5
 284 0054 2370     		strb	r3, [r4, #0]
 219:lib/USB_Functions/usb_pwr.c ****       ResumeS.bESOFcnt = 10;
 285              		.loc 1 219 0
 286 0056 0A20     		movs	r0, #10
 287              	.LVL18:
 288 0058 6070     		strb	r0, [r4, #1]
 220:lib/USB_Functions/usb_pwr.c ****       break;
 289              		.loc 1 220 0
 290 005a 10BD     		pop	{r4, pc}
 291              	.LVL19:
 292              	.L21:
 221:lib/USB_Functions/usb_pwr.c ****     case RESUME_ON:
 222:lib/USB_Functions/usb_pwr.c ****     #ifndef STM32F10X_CL      
 223:lib/USB_Functions/usb_pwr.c ****       ResumeS.bESOFcnt--;
 293              		.loc 1 223 0
 294 005c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 295              	.LVL20:
 296 005e 411E     		subs	r1, r0, #1
 297 0060 CAB2     		uxtb	r2, r1
 298 0062 5A70     		strb	r2, [r3, #1]
 224:lib/USB_Functions/usb_pwr.c ****       if (ResumeS.bESOFcnt == 0)
 299              		.loc 1 224 0
 300 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 301 0066 53B9     		cbnz	r3, .L13
 225:lib/USB_Functions/usb_pwr.c ****       {
 226:lib/USB_Functions/usb_pwr.c ****      #endif /* STM32F10X_CL */    
 227:lib/USB_Functions/usb_pwr.c ****        #ifdef STM32F10X_CL
 228:lib/USB_Functions/usb_pwr.c ****         OTGD_FS_ResetRemoteWakeup();
 229:lib/USB_Functions/usb_pwr.c ****        #else
 230:lib/USB_Functions/usb_pwr.c ****         wCNTR = _GetCNTR();
 302              		.loc 1 230 0
 303 0068 0648     		ldr	r0, .L33+4
 304 006a 0168     		ldr	r1, [r0, #0]
 305              	.LVL21:
 231:lib/USB_Functions/usb_pwr.c ****         wCNTR &= (~CNTR_RESUME);
 306              		.loc 1 231 0
 307 006c 4FF6EF72 		movw	r2, #65519
 308 0070 0A40     		ands	r2, r2, r1
 309              	.LVL22:
 232:lib/USB_Functions/usb_pwr.c ****         _SetCNTR(wCNTR);
 310              		.loc 1 232 0
 311 0072 0260     		str	r2, [r0, #0]
 233:lib/USB_Functions/usb_pwr.c ****        #endif /* STM32F10X_CL */
 234:lib/USB_Functions/usb_pwr.c ****         ResumeS.eState = RESUME_OFF;
 312              		.loc 1 234 0
 313 0074 0620     		movs	r0, #6
 314              	.LVL23:
 315              	.L31:
 316 0076 024B     		ldr	r3, .L33
 317 0078 00E0     		b	.L30
 318              	.LVL24:
 319              	.L15:
 235:lib/USB_Functions/usb_pwr.c ****      #ifndef STM32F10X_CL
 236:lib/USB_Functions/usb_pwr.c ****       }
 237:lib/USB_Functions/usb_pwr.c ****      #endif /* STM32F10X_CL */
 238:lib/USB_Functions/usb_pwr.c ****       break;
 239:lib/USB_Functions/usb_pwr.c ****     case RESUME_OFF:
 240:lib/USB_Functions/usb_pwr.c ****     case RESUME_ESOF:
 241:lib/USB_Functions/usb_pwr.c ****     default:
 242:lib/USB_Functions/usb_pwr.c ****       ResumeS.eState = RESUME_OFF;
 320              		.loc 1 242 0
 321 007a 0620     		movs	r0, #6
 322              	.LVL25:
 323              	.L30:
 324 007c 1870     		strb	r0, [r3, #0]
 325              	.L13:
 326 007e 10BD     		pop	{r4, pc}
 327              	.L34:
 328              		.align	2
 329              	.L33:
 330 0080 00000000 		.word	.LANCHOR0
 331 0084 405C0040 		.word	1073765440
 332              		.cfi_endproc
 333              	.LFE61:
 335              		.global	ResumeS
 336              		.global	fSuspendEnabled
 337              		.global	bDeviceState
 338              		.section	.bss.ResumeS,"aw",%nobits
 339              		.set	.LANCHOR0,. + 0
 342              	ResumeS:
 343 0000 0000     		.space	2
 344              		.section	.data.fSuspendEnabled,"aw",%progbits
 347              	fSuspendEnabled:
 348 0000 01       		.byte	1
 349              		.section	.bss.bDeviceState,"aw",%nobits
 350              		.align	2
 353              	bDeviceState:
 354 0000 00000000 		.space	4
 355              		.text
 356              	.Letext0:
 357              		.file 2 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 358              		.file 3 "./lib/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 359              		.file 4 "./lib/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 360              		.file 5 "./lib/USB_Functions/usb_pwr.h"
 361              		.file 6 "./lib/CMSIS/Include/core_cm3.h"
 362              		.file 7 "./inc/systick.h"
 363              		.file 8 "./lib/STM32_USB-FS-Device_Driver/inc/usb_init.h"
 364              		.file 9 "./inc/hw_config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb_pwr.c
  R:\TEMP\ccPYEKhp.s:19     .text.PowerOn:00000000 $t
  R:\TEMP\ccPYEKhp.s:24     .text.PowerOn:00000000 PowerOn
  R:\TEMP\ccPYEKhp.s:62     .text.PowerOn:00000024 $d
  R:\TEMP\ccPYEKhp.s:69     .text.PowerOff:00000000 $t
  R:\TEMP\ccPYEKhp.s:74     .text.PowerOff:00000000 PowerOff
  R:\TEMP\ccPYEKhp.s:108    .text.PowerOff:0000001c $d
  R:\TEMP\ccPYEKhp.s:114    .text.Suspend:00000000 $t
  R:\TEMP\ccPYEKhp.s:119    .text.Suspend:00000000 Suspend
  R:\TEMP\ccPYEKhp.s:148    .text.Suspend:0000001c $d
  R:\TEMP\ccPYEKhp.s:153    .text.Resume_Init:00000000 $t
  R:\TEMP\ccPYEKhp.s:158    .text.Resume_Init:00000000 Resume_Init
  R:\TEMP\ccPYEKhp.s:189    .text.Resume_Init:0000001c $d
  R:\TEMP\ccPYEKhp.s:194    .text.Resume:00000000 $t
  R:\TEMP\ccPYEKhp.s:199    .text.Resume:00000000 Resume
  R:\TEMP\ccPYEKhp.s:224    .text.Resume:00000016 $d
  R:\TEMP\ccPYEKhp.s:230    .text.Resume:0000001c $t
  R:\TEMP\ccPYEKhp.s:330    .text.Resume:00000080 $d
  R:\TEMP\ccPYEKhp.s:342    .bss.ResumeS:00000000 ResumeS
  R:\TEMP\ccPYEKhp.s:347    .data.fSuspendEnabled:00000000 fSuspendEnabled
  R:\TEMP\ccPYEKhp.s:353    .bss.bDeviceState:00000000 bDeviceState
  R:\TEMP\ccPYEKhp.s:343    .bss.ResumeS:00000000 $d
  R:\TEMP\ccPYEKhp.s:350    .bss.bDeviceState:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USB_Cable_Config
wInterrupt_Mask
Enter_LowPowerMode
Leave_LowPowerMode
