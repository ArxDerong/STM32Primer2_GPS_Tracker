   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"diskio_sdio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.disk_initialize,"ax",%progbits
  19              		.align	1
  20              		.global	disk_initialize
  21              		.thumb
  22              		.thumb_func
  24              	disk_initialize:
  25              	.LFB56:
  26              		.file 1 "lib/ff/diskio_sdio.c"
   1:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   2:lib/ff/diskio_sdio.c **** /* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2007        */
   3:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   4:lib/ff/diskio_sdio.c **** /* by grqd_xp                                                            */
   5:lib/ff/diskio_sdio.c **** /* This is a stub disk I/O module that acts as front end of the existing */
   6:lib/ff/diskio_sdio.c **** /* disk I/O modules and attach it to FatFs module with common interface. */
   7:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   8:lib/ff/diskio_sdio.c **** /* by nemui trinomius                                                    */
   9:lib/ff/diskio_sdio.c **** /* adopted to STM32F2xx_StdPeriph_Driver V1.0.0.						 */
  10:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  11:lib/ff/diskio_sdio.c **** #include <string.h>
  12:lib/ff/diskio_sdio.c **** #include "diskio.h"
  13:lib/ff/diskio_sdio.c **** #include "sdio_stm32f1.h"
  14:lib/ff/diskio_sdio.c **** #include "rtc_support.h"
  15:lib/ff/diskio_sdio.c **** 
  16:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  17:lib/ff/diskio_sdio.c **** /* Correspondence between physical drive number and physical drive.      */
  18:lib/ff/diskio_sdio.c **** /* Note that Tiny-FatFs supports only single drive and always            */
  19:lib/ff/diskio_sdio.c **** /* accesses drive number 0.                                              */
  20:lib/ff/diskio_sdio.c **** 
  21:lib/ff/diskio_sdio.c **** #define SECTOR_SIZE 512
  22:lib/ff/diskio_sdio.c **** 
  23:lib/ff/diskio_sdio.c **** __IO SD_Error Status = SD_OK;
  24:lib/ff/diskio_sdio.c **** SD_CardStatus SDCardStatus;
  25:lib/ff/diskio_sdio.c **** 
  26:lib/ff/diskio_sdio.c **** /* dummy values */
  27:lib/ff/diskio_sdio.c **** #define SOCKPORT	1			/* Socket contact port */
  28:lib/ff/diskio_sdio.c **** #define SOCKWP		0			/* Write protect switch */
  29:lib/ff/diskio_sdio.c **** #define SOCKINS		0			/* Card detect switch */
  30:lib/ff/diskio_sdio.c ****  
  31:lib/ff/diskio_sdio.c ****  /*--------------------------------------------------------------------------
  32:lib/ff/diskio_sdio.c **** 
  33:lib/ff/diskio_sdio.c ****    Module Private Functions
  34:lib/ff/diskio_sdio.c **** 
  35:lib/ff/diskio_sdio.c **** ---------------------------------------------------------------------------*/
  36:lib/ff/diskio_sdio.c **** 
  37:lib/ff/diskio_sdio.c **** static volatile
  38:lib/ff/diskio_sdio.c **** DSTATUS Stat = STA_NOINIT;	/* Disk status */
  39:lib/ff/diskio_sdio.c **** 
  40:lib/ff/diskio_sdio.c **** static volatile
  41:lib/ff/diskio_sdio.c **** DWORD Timer1, Timer2;	/* 100Hz decrement timers */
  42:lib/ff/diskio_sdio.c ****  
  43:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  44:lib/ff/diskio_sdio.c **** /* Correspondence between physical drive number and physical drive.      */
  45:lib/ff/diskio_sdio.c **** #define SDIO_DRIVE		0
  46:lib/ff/diskio_sdio.c **** 
  47:lib/ff/diskio_sdio.c **** 
  48:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  49:lib/ff/diskio_sdio.c **** /* Initialize a Drive                                                    */
  50:lib/ff/diskio_sdio.c **** 
  51:lib/ff/diskio_sdio.c **** DSTATUS disk_initialize (
  52:lib/ff/diskio_sdio.c ****                          BYTE drv				/* Physical drive nmuber (0..) */
  53:lib/ff/diskio_sdio.c ****                            )
  54:lib/ff/diskio_sdio.c **** { 
  27              		.loc 1 54 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  55:lib/ff/diskio_sdio.c ****   switch (drv) 
  37              		.loc 1 55 0
  38 0002 40B9     		cbnz	r0, .L5
  56:lib/ff/diskio_sdio.c ****   {
  57:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
  58:lib/ff/diskio_sdio.c ****     {     
  59:lib/ff/diskio_sdio.c ****       /* Initialize SD Card */
  60:lib/ff/diskio_sdio.c ****       Status = SD_Init(); 
  39              		.loc 1 60 0
  40 0004 FFF7FEFF 		bl	SD_Init
  41              	.LVL1:
  42 0008 044B     		ldr	r3, .L7
  43 000a 1870     		strb	r0, [r3, #0]
  61:lib/ff/diskio_sdio.c ****       
  62:lib/ff/diskio_sdio.c ****       if (Status != SD_OK)
  44              		.loc 1 62 0
  45 000c 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  63:lib/ff/diskio_sdio.c ****         return STA_NOINIT;
  46              		.loc 1 63 0
  47 000e 2A38     		subs	r0, r0, #42
  48 0010 18BF     		it	ne
  49 0012 0120     		movne	r0, #1
  50 0014 08BD     		pop	{r3, pc}
  51              	.LVL2:
  52              	.L5:
  64:lib/ff/diskio_sdio.c ****       else
  65:lib/ff/diskio_sdio.c ****         return 0x00;
  66:lib/ff/diskio_sdio.c ****     }
  67:lib/ff/diskio_sdio.c ****   }
  68:lib/ff/diskio_sdio.c ****   
  69:lib/ff/diskio_sdio.c ****   return STA_NOINIT;
  53              		.loc 1 69 0
  54 0016 0120     		movs	r0, #1
  55              	.LVL3:
  70:lib/ff/diskio_sdio.c ****   
  71:lib/ff/diskio_sdio.c **** }
  56              		.loc 1 71 0
  57 0018 08BD     		pop	{r3, pc}
  58              	.L8:
  59 001a 00BF     		.align	2
  60              	.L7:
  61 001c 00000000 		.word	.LANCHOR0
  62              		.cfi_endproc
  63              	.LFE56:
  65              		.section	.text.disk_status,"ax",%progbits
  66              		.align	1
  67              		.global	disk_status
  68              		.thumb
  69              		.thumb_func
  71              	disk_status:
  72              	.LFB57:
  72:lib/ff/diskio_sdio.c **** 
  73:lib/ff/diskio_sdio.c **** 
  74:lib/ff/diskio_sdio.c **** 
  75:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  76:lib/ff/diskio_sdio.c **** /* Return Disk Status                                                    */
  77:lib/ff/diskio_sdio.c **** 
  78:lib/ff/diskio_sdio.c **** DSTATUS disk_status (
  79:lib/ff/diskio_sdio.c ****                      BYTE drv		/* Physical drive nmuber (0..) */
  80:lib/ff/diskio_sdio.c ****                        )
  81:lib/ff/diskio_sdio.c **** {
  73              		.loc 1 81 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL4:
  78 0000 08B5     		push	{r3, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 3, -8
  82              		.cfi_offset 14, -4
  82:lib/ff/diskio_sdio.c ****   switch (drv) 
  83              		.loc 1 82 0
  84 0002 48B9     		cbnz	r0, .L13
  83:lib/ff/diskio_sdio.c ****   {
  84:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
  85:lib/ff/diskio_sdio.c ****     {
  86:lib/ff/diskio_sdio.c ****       Status = SD_GetCardInfo(&SDCardInfo);
  85              		.loc 1 86 0
  86 0004 0548     		ldr	r0, .L14
  87              	.LVL5:
  88 0006 FFF7FEFF 		bl	SD_GetCardInfo
  89              	.LVL6:
  90 000a 054B     		ldr	r3, .L14+4
  91 000c 1870     		strb	r0, [r3, #0]
  87:lib/ff/diskio_sdio.c **** 
  88:lib/ff/diskio_sdio.c ****       if (Status != SD_OK)
  92              		.loc 1 88 0
  93 000e 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  89:lib/ff/diskio_sdio.c ****         return STA_NOINIT;
  94              		.loc 1 89 0
  95 0010 2A38     		subs	r0, r0, #42
  96 0012 18BF     		it	ne
  97 0014 0120     		movne	r0, #1
  98 0016 08BD     		pop	{r3, pc}
  99              	.LVL7:
 100              	.L13:
  90:lib/ff/diskio_sdio.c ****       else
  91:lib/ff/diskio_sdio.c ****         return 0x00;
  92:lib/ff/diskio_sdio.c ****     }
  93:lib/ff/diskio_sdio.c ****   }
  94:lib/ff/diskio_sdio.c ****   
  95:lib/ff/diskio_sdio.c ****   return STA_NOINIT;
 101              		.loc 1 95 0
 102 0018 0120     		movs	r0, #1
 103              	.LVL8:
  96:lib/ff/diskio_sdio.c **** }
 104              		.loc 1 96 0
 105 001a 08BD     		pop	{r3, pc}
 106              	.L15:
 107              		.align	2
 108              	.L14:
 109 001c 00000000 		.word	SDCardInfo
 110 0020 00000000 		.word	.LANCHOR0
 111              		.cfi_endproc
 112              	.LFE57:
 114              		.section	.text.disk_read,"ax",%progbits
 115              		.align	1
 116              		.global	disk_read
 117              		.thumb
 118              		.thumb_func
 120              	disk_read:
 121              	.LFB58:
  97:lib/ff/diskio_sdio.c **** 
  98:lib/ff/diskio_sdio.c **** 
  99:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 100:lib/ff/diskio_sdio.c **** /* Read Sector(s)                                                        */
 101:lib/ff/diskio_sdio.c **** 
 102:lib/ff/diskio_sdio.c **** DRESULT disk_read (
 103:lib/ff/diskio_sdio.c ****                    BYTE drv,		/* Physical drive nmuber (0..) */
 104:lib/ff/diskio_sdio.c ****                    BYTE *buff,		/* Data buffer to store read data */
 105:lib/ff/diskio_sdio.c ****                    DWORD sector,	/* Sector address (LBA) */
 106:lib/ff/diskio_sdio.c ****                    BYTE count		/* Number of sectors to read (1..255) */
 107:lib/ff/diskio_sdio.c ****                      )
 108:lib/ff/diskio_sdio.c **** {
 122              		.loc 1 108 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL9:
 127 0000 10B5     		push	{r4, lr}
 128              	.LCFI2:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 4, -8
 131              		.cfi_offset 14, -4
 132 0002 0C46     		mov	r4, r1
 109:lib/ff/diskio_sdio.c ****   switch (drv) 
 133              		.loc 1 109 0
 134 0004 78B9     		cbnz	r0, .L22
 135              	.LVL10:
 136              	.LBB2:
 110:lib/ff/diskio_sdio.c ****   {
 111:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 112:lib/ff/diskio_sdio.c ****     {     
 113:lib/ff/diskio_sdio.c ****       SD_Error status = SD_OK;
 114:lib/ff/diskio_sdio.c **** 	  
 115:lib/ff/diskio_sdio.c **** 	 
 116:lib/ff/diskio_sdio.c **** 	if(count==1)
 117:lib/ff/diskio_sdio.c ****     {
 118:lib/ff/diskio_sdio.c **** 		status = SD_ReadBlock((uint8_t*)(buff), 
 137              		.loc 1 118 0
 138 0006 2046     		mov	r0, r4
 139              	.LVL11:
 116:lib/ff/diskio_sdio.c **** 	if(count==1)
 140              		.loc 1 116 0
 141 0008 012B     		cmp	r3, #1
 142 000a 4FEA4221 		lsl	r1, r2, #9
 143              	.LVL12:
 144              		.loc 1 118 0
 145 000e 4FF40072 		mov	r2, #512
 146              	.LVL13:
 116:lib/ff/diskio_sdio.c **** 	if(count==1)
 147              		.loc 1 116 0
 148 0012 02D1     		bne	.L19
 149              		.loc 1 118 0
 150 0014 FFF7FEFF 		bl	SD_ReadBlock
 151              	.LVL14:
 152 0018 01E0     		b	.L20
 153              	.LVL15:
 154              	.L19:
 119:lib/ff/diskio_sdio.c ****                               (sector)*SECTOR_SIZE,
 120:lib/ff/diskio_sdio.c ****                               SECTOR_SIZE);
 121:lib/ff/diskio_sdio.c **** 	}
 122:lib/ff/diskio_sdio.c **** 	else
 123:lib/ff/diskio_sdio.c ****     {
 124:lib/ff/diskio_sdio.c **** 		status = SD_ReadMultiBlocks((uint8_t*)(buff), 
 155              		.loc 1 124 0
 156 001a FFF7FEFF 		bl	SD_ReadMultiBlocks
 157              	.LVL16:
 158              	.L20:
 125:lib/ff/diskio_sdio.c **** 									(sector)*SECTOR_SIZE,
 126:lib/ff/diskio_sdio.c **** 									SECTOR_SIZE
 127:lib/ff/diskio_sdio.c **** 									,count);
 128:lib/ff/diskio_sdio.c **** 	}
 129:lib/ff/diskio_sdio.c **** 	 
 130:lib/ff/diskio_sdio.c **** 	  
 131:lib/ff/diskio_sdio.c **** 	if (status == SD_OK)	return RES_OK;
 159              		.loc 1 131 0
 160 001e 2A38     		subs	r0, r0, #42
 161              	.LVL17:
 162 0020 18BF     		it	ne
 163 0022 0120     		movne	r0, #1
 164              	.LVL18:
 165 0024 10BD     		pop	{r4, pc}
 166              	.LVL19:
 167              	.L22:
 168              	.LBE2:
 132:lib/ff/diskio_sdio.c **** 	else					return RES_ERROR;
 133:lib/ff/diskio_sdio.c ****     }
 134:lib/ff/diskio_sdio.c **** 
 135:lib/ff/diskio_sdio.c ****   }
 136:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 169              		.loc 1 136 0
 170 0026 0420     		movs	r0, #4
 171              	.LVL20:
 137:lib/ff/diskio_sdio.c **** }
 172              		.loc 1 137 0
 173 0028 10BD     		pop	{r4, pc}
 174              		.cfi_endproc
 175              	.LFE58:
 177              		.section	.text.disk_write,"ax",%progbits
 178              		.align	1
 179              		.global	disk_write
 180              		.thumb
 181              		.thumb_func
 183              	disk_write:
 184              	.LFB59:
 138:lib/ff/diskio_sdio.c **** 
 139:lib/ff/diskio_sdio.c **** 
 140:lib/ff/diskio_sdio.c **** 
 141:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 142:lib/ff/diskio_sdio.c **** /* Write Sector(s)                                                       */
 143:lib/ff/diskio_sdio.c **** 
 144:lib/ff/diskio_sdio.c **** #if _READONLY == 0
 145:lib/ff/diskio_sdio.c **** DRESULT disk_write (
 146:lib/ff/diskio_sdio.c ****                     BYTE drv,			/* Physical drive nmuber (0..) */
 147:lib/ff/diskio_sdio.c ****                     const BYTE *buff,	/* Data to be written */
 148:lib/ff/diskio_sdio.c ****                     DWORD sector,		/* Sector address (LBA) */
 149:lib/ff/diskio_sdio.c ****                     BYTE count			/* Number of sectors to write (1..255) */
 150:lib/ff/diskio_sdio.c ****                       )
 151:lib/ff/diskio_sdio.c **** {
 185              		.loc 1 151 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              	.LVL21:
 190 0000 10B5     		push	{r4, lr}
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 4, -8
 194              		.cfi_offset 14, -4
 195 0002 0C46     		mov	r4, r1
 152:lib/ff/diskio_sdio.c ****   switch (drv) 
 196              		.loc 1 152 0
 197 0004 78B9     		cbnz	r0, .L29
 198              	.LVL22:
 199              	.LBB3:
 153:lib/ff/diskio_sdio.c ****   {
 154:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 155:lib/ff/diskio_sdio.c ****     {     
 156:lib/ff/diskio_sdio.c ****       SD_Error status = SD_OK;
 157:lib/ff/diskio_sdio.c **** 	  
 158:lib/ff/diskio_sdio.c **** 	 
 159:lib/ff/diskio_sdio.c **** 	if(count==1)
 160:lib/ff/diskio_sdio.c ****     {
 161:lib/ff/diskio_sdio.c **** 		status = SD_WriteBlock((uint8_t*)(buff), 
 200              		.loc 1 161 0
 201 0006 2046     		mov	r0, r4
 202              	.LVL23:
 159:lib/ff/diskio_sdio.c **** 	if(count==1)
 203              		.loc 1 159 0
 204 0008 012B     		cmp	r3, #1
 205 000a 4FEA4221 		lsl	r1, r2, #9
 206              	.LVL24:
 207              		.loc 1 161 0
 208 000e 4FF40072 		mov	r2, #512
 209              	.LVL25:
 159:lib/ff/diskio_sdio.c **** 	if(count==1)
 210              		.loc 1 159 0
 211 0012 02D1     		bne	.L26
 212              		.loc 1 161 0
 213 0014 FFF7FEFF 		bl	SD_WriteBlock
 214              	.LVL26:
 215 0018 01E0     		b	.L27
 216              	.LVL27:
 217              	.L26:
 162:lib/ff/diskio_sdio.c ****                               (sector)*SECTOR_SIZE,
 163:lib/ff/diskio_sdio.c ****                               SECTOR_SIZE);
 164:lib/ff/diskio_sdio.c **** 	}
 165:lib/ff/diskio_sdio.c **** 	else
 166:lib/ff/diskio_sdio.c ****     {
 167:lib/ff/diskio_sdio.c **** 		status = SD_WriteMultiBlocks((uint8_t*)(buff), 
 218              		.loc 1 167 0
 219 001a FFF7FEFF 		bl	SD_WriteMultiBlocks
 220              	.LVL28:
 221              	.L27:
 168:lib/ff/diskio_sdio.c **** 									(sector)*SECTOR_SIZE,
 169:lib/ff/diskio_sdio.c **** 									SECTOR_SIZE
 170:lib/ff/diskio_sdio.c **** 									,count);
 171:lib/ff/diskio_sdio.c **** 	}
 172:lib/ff/diskio_sdio.c **** 	 
 173:lib/ff/diskio_sdio.c **** 	  
 174:lib/ff/diskio_sdio.c **** 	if (status == SD_OK)	return RES_OK;
 222              		.loc 1 174 0
 223 001e 2A38     		subs	r0, r0, #42
 224              	.LVL29:
 225 0020 18BF     		it	ne
 226 0022 0120     		movne	r0, #1
 227              	.LVL30:
 228 0024 10BD     		pop	{r4, pc}
 229              	.LVL31:
 230              	.L29:
 231              	.LBE3:
 175:lib/ff/diskio_sdio.c **** 	else					return RES_ERROR;
 176:lib/ff/diskio_sdio.c ****     }
 177:lib/ff/diskio_sdio.c **** 
 178:lib/ff/diskio_sdio.c ****   }
 179:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 232              		.loc 1 179 0
 233 0026 0420     		movs	r0, #4
 234              	.LVL32:
 180:lib/ff/diskio_sdio.c **** }
 235              		.loc 1 180 0
 236 0028 10BD     		pop	{r4, pc}
 237              		.cfi_endproc
 238              	.LFE59:
 240              		.section	.text.disk_ioctl,"ax",%progbits
 241              		.align	1
 242              		.global	disk_ioctl
 243              		.thumb
 244              		.thumb_func
 246              	disk_ioctl:
 247              	.LFB60:
 181:lib/ff/diskio_sdio.c **** #endif /* _READONLY */
 182:lib/ff/diskio_sdio.c **** 
 183:lib/ff/diskio_sdio.c **** 
 184:lib/ff/diskio_sdio.c **** 
 185:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 186:lib/ff/diskio_sdio.c **** /* Miscellaneous Functions                                               */
 187:lib/ff/diskio_sdio.c **** 
 188:lib/ff/diskio_sdio.c **** DRESULT disk_ioctl (
 189:lib/ff/diskio_sdio.c ****                     BYTE drv,		/* Physical drive nmuber (0..) */
 190:lib/ff/diskio_sdio.c ****                     BYTE ctrl,		/* Control code */
 191:lib/ff/diskio_sdio.c ****                     void *buff		/* Buffer to send/receive control data */
 192:lib/ff/diskio_sdio.c ****                       )
 193:lib/ff/diskio_sdio.c **** {
 248              		.loc 1 193 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              	.LVL33:
 253 0000 10B5     		push	{r4, lr}
 254              	.LCFI4:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 14, -4
 258 0002 1446     		mov	r4, r2
 194:lib/ff/diskio_sdio.c ****   switch (drv) 
 259              		.loc 1 194 0
 260 0004 0028     		cmp	r0, #0
 261 0006 32D1     		bne	.L44
 195:lib/ff/diskio_sdio.c ****   {
 196:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 197:lib/ff/diskio_sdio.c ****     {      
 198:lib/ff/diskio_sdio.c ****       switch (ctrl)
 262              		.loc 1 198 0
 263 0008 0139     		subs	r1, r1, #1
 264              	.LVL34:
 265 000a 0D29     		cmp	r1, #13
 266 000c 31D8     		bhi	.L43
 267 000e DFE801F0 		tbb	[pc, r1]
 268              	.L41:
 269 0012 0B       		.byte	(.L33-.L41)/2
 270 0013 07       		.byte	(.L34-.L41)/2
 271 0014 12       		.byte	(.L35-.L41)/2
 272 0015 30       		.byte	(.L43-.L41)/2
 273 0016 30       		.byte	(.L43-.L41)/2
 274 0017 30       		.byte	(.L43-.L41)/2
 275 0018 30       		.byte	(.L43-.L41)/2
 276 0019 30       		.byte	(.L43-.L41)/2
 277 001a 30       		.byte	(.L43-.L41)/2
 278 001b 15       		.byte	(.L36-.L41)/2
 279 001c 1A       		.byte	(.L37-.L41)/2
 280 001d 1D       		.byte	(.L38-.L41)/2
 281 001e 21       		.byte	(.L39-.L41)/2
 282 001f 25       		.byte	(.L40-.L41)/2
 283              		.align	1
 284              	.L34:
 199:lib/ff/diskio_sdio.c ****       {
 200:lib/ff/diskio_sdio.c ****         case CTRL_SYNC:
 201:lib/ff/diskio_sdio.c ****           /* no synchronization to do since not buffering in this module */
 202:lib/ff/diskio_sdio.c ****           return RES_OK;
 203:lib/ff/diskio_sdio.c ****         case GET_SECTOR_SIZE:
 204:lib/ff/diskio_sdio.c ****           *(uint16_t*)buff = SECTOR_SIZE;
 285              		.loc 1 204 0
 286 0020 4FF40070 		mov	r0, #512
 287              	.LVL35:
 288 0024 1080     		strh	r0, [r2, #0]	@ movhi
 289 0026 24E0     		b	.L43
 290              	.LVL36:
 291              	.L33:
 205:lib/ff/diskio_sdio.c ****           return RES_OK;
 206:lib/ff/diskio_sdio.c ****         case GET_SECTOR_COUNT:
 207:lib/ff/diskio_sdio.c ****           *(uint32_t*)buff = SDCardInfo.CardCapacity / SECTOR_SIZE;
 292              		.loc 1 207 0
 293 0028 1349     		ldr	r1, .L48
 294 002a CA6C     		ldr	r2, [r1, #76]
 295              	.LVL37:
 296 002c 8B6C     		ldr	r3, [r1, #72]
 297 002e 580A     		lsrs	r0, r3, #9
 298              	.LVL38:
 299 0030 40EAC250 		orr	r0, r0, r2, lsl #23
 300 0034 10E0     		b	.L46
 301              	.LVL39:
 302              	.L35:
 208:lib/ff/diskio_sdio.c ****           return RES_OK;
 209:lib/ff/diskio_sdio.c ****         case GET_BLOCK_SIZE:
 210:lib/ff/diskio_sdio.c ****           *(uint32_t*)buff = SDCardInfo.CardBlockSize;
 303              		.loc 1 210 0
 304 0036 104B     		ldr	r3, .L48
 305 0038 186D     		ldr	r0, [r3, #80]
 306              	.LVL40:
 307 003a 0DE0     		b	.L46
 308              	.LVL41:
 309              	.L36:
 211:lib/ff/diskio_sdio.c **** 		  return RES_OK;
 212:lib/ff/diskio_sdio.c **** 		/* Following command are not used by FatFs module */
 213:lib/ff/diskio_sdio.c **** 		case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
 214:lib/ff/diskio_sdio.c **** 			*(uint8_t*)buff = SDCardInfo.CardType;
 310              		.loc 1 214 0
 311 003c 0E4A     		ldr	r2, .L48
 312              	.LVL42:
 313 003e 92F85610 		ldrb	r1, [r2, #86]	@ zero_extendqisi2
 314 0042 2170     		strb	r1, [r4, #0]
 315 0044 15E0     		b	.L43
 316              	.LVL43:
 317              	.L37:
 215:lib/ff/diskio_sdio.c **** 			return RES_OK;
 216:lib/ff/diskio_sdio.c **** 		case MMC_GET_CSD :		/* Read CSD (16 bytes) */
 217:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardInfo.SD_csd,16);
 318              		.loc 1 217 0
 319 0046 1046     		mov	r0, r2
 320              	.LVL44:
 321 0048 0B49     		ldr	r1, .L48
 322 004a 01E0     		b	.L47
 323              	.LVL45:
 324              	.L38:
 218:lib/ff/diskio_sdio.c **** 			return RES_OK;
 219:lib/ff/diskio_sdio.c **** 		case MMC_GET_CID :		/* Read CID (16 bytes) */
 220:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardInfo.SD_cid,16);
 325              		.loc 1 220 0
 326 004c 1046     		mov	r0, r2
 327              	.LVL46:
 328 004e 0B49     		ldr	r1, .L48+4
 329              	.LVL47:
 330              	.L47:
 331 0050 1022     		movs	r2, #16
 332 0052 09E0     		b	.L45
 333              	.LVL48:
 334              	.L39:
 221:lib/ff/diskio_sdio.c **** 			return RES_OK;
 222:lib/ff/diskio_sdio.c **** 		case MMC_GET_OCR :		/* Read OCR (4 bytes) */
 223:lib/ff/diskio_sdio.c **** 			*(uint32_t*)buff = SDCardInfo.SD_csd.MaxRdCurrentVDDMin;
 335              		.loc 1 223 0
 336 0054 084B     		ldr	r3, .L48
 337 0056 187D     		ldrb	r0, [r3, #20]	@ zero_extendqisi2
 338              	.LVL49:
 339              	.L46:
 340 0058 2060     		str	r0, [r4, #0]
 341 005a 0AE0     		b	.L43
 342              	.LVL50:
 343              	.L40:
 224:lib/ff/diskio_sdio.c **** 			return RES_OK;
 225:lib/ff/diskio_sdio.c **** 		case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
 226:lib/ff/diskio_sdio.c **** 			SD_GetCardStatus(&SDCardStatus);
 344              		.loc 1 226 0
 345 005c 0848     		ldr	r0, .L48+8
 346              	.LVL51:
 347 005e FFF7FEFF 		bl	SD_GetCardStatus
 348              	.LVL52:
 227:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardStatus,64);
 349              		.loc 1 227 0
 350 0062 2046     		mov	r0, r4
 351 0064 0649     		ldr	r1, .L48+8
 352 0066 4022     		movs	r2, #64
 353              	.LVL53:
 354              	.L45:
 355 0068 FFF7FEFF 		bl	memcpy
 356              	.LVL54:
 357 006c 01E0     		b	.L43
 358              	.LVL55:
 359              	.L44:
 228:lib/ff/diskio_sdio.c **** 			return RES_OK;
 229:lib/ff/diskio_sdio.c **** 		default :
 230:lib/ff/diskio_sdio.c **** 			return RES_OK;
 231:lib/ff/diskio_sdio.c **** 
 232:lib/ff/diskio_sdio.c ****       }
 233:lib/ff/diskio_sdio.c ****     }
 234:lib/ff/diskio_sdio.c ****   }
 235:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 360              		.loc 1 235 0
 361 006e 0420     		movs	r0, #4
 362              	.LVL56:
 363 0070 10BD     		pop	{r4, pc}
 364              	.LVL57:
 365              	.L43:
 202:lib/ff/diskio_sdio.c ****           return RES_OK;
 366              		.loc 1 202 0
 367 0072 0020     		movs	r0, #0
 236:lib/ff/diskio_sdio.c **** }
 368              		.loc 1 236 0
 369 0074 10BD     		pop	{r4, pc}
 370              	.L49:
 371 0076 00BF     		.align	2
 372              	.L48:
 373 0078 00000000 		.word	SDCardInfo
 374 007c 2C000000 		.word	SDCardInfo+44
 375 0080 00000000 		.word	.LANCHOR1
 376              		.cfi_endproc
 377              	.LFE60:
 379              		.global	SDCardStatus
 380              		.global	Status
 381              		.section	.bss.Timer1,"aw",%nobits
 382              		.align	2
 385              	Timer1:
 386 0000 00000000 		.space	4
 387              		.section	.bss.Timer2,"aw",%nobits
 388              		.align	2
 391              	Timer2:
 392 0000 00000000 		.space	4
 393              		.section	.bss.SDCardStatus,"aw",%nobits
 394              		.align	2
 395              		.set	.LANCHOR1,. + 0
 398              	SDCardStatus:
 399 0000 00000000 		.space	16
 399      00000000 
 399      00000000 
 399      00000000 
 400              		.section	.data.Status,"aw",%progbits
 401              		.set	.LANCHOR0,. + 0
 404              	Status:
 405 0000 2A       		.byte	42
 406              		.section	.data.Stat,"aw",%progbits
 409              	Stat:
 410 0000 01       		.byte	1
 411              		.text
 412              	.Letext0:
 413              		.file 2 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stddef.h"
 414              		.file 3 "lib/ff/integer.h"
 415              		.file 4 "lib/ff/diskio.h"
 416              		.file 5 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 417              		.file 6 "lib/ff/sdio_stm32f1.h"
 418              		.file 7 "./lib/CMSIS/Include/core_cm3.h"
 419              		.file 8 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eabi/i
DEFINED SYMBOLS
                            *ABS*:00000000 diskio_sdio.c
  R:\TEMP\ccv8lH0D.s:19     .text.disk_initialize:00000000 $t
  R:\TEMP\ccv8lH0D.s:24     .text.disk_initialize:00000000 disk_initialize
  R:\TEMP\ccv8lH0D.s:61     .text.disk_initialize:0000001c $d
  R:\TEMP\ccv8lH0D.s:66     .text.disk_status:00000000 $t
  R:\TEMP\ccv8lH0D.s:71     .text.disk_status:00000000 disk_status
  R:\TEMP\ccv8lH0D.s:109    .text.disk_status:0000001c $d
  R:\TEMP\ccv8lH0D.s:115    .text.disk_read:00000000 $t
  R:\TEMP\ccv8lH0D.s:120    .text.disk_read:00000000 disk_read
  R:\TEMP\ccv8lH0D.s:178    .text.disk_write:00000000 $t
  R:\TEMP\ccv8lH0D.s:183    .text.disk_write:00000000 disk_write
  R:\TEMP\ccv8lH0D.s:241    .text.disk_ioctl:00000000 $t
  R:\TEMP\ccv8lH0D.s:246    .text.disk_ioctl:00000000 disk_ioctl
  R:\TEMP\ccv8lH0D.s:269    .text.disk_ioctl:00000012 $d
  R:\TEMP\ccv8lH0D.s:283    .text.disk_ioctl:00000020 $t
  R:\TEMP\ccv8lH0D.s:373    .text.disk_ioctl:00000078 $d
  R:\TEMP\ccv8lH0D.s:398    .bss.SDCardStatus:00000000 SDCardStatus
  R:\TEMP\ccv8lH0D.s:404    .data.Status:00000000 Status
  R:\TEMP\ccv8lH0D.s:382    .bss.Timer1:00000000 $d
  R:\TEMP\ccv8lH0D.s:385    .bss.Timer1:00000000 Timer1
  R:\TEMP\ccv8lH0D.s:388    .bss.Timer2:00000000 $d
  R:\TEMP\ccv8lH0D.s:391    .bss.Timer2:00000000 Timer2
  R:\TEMP\ccv8lH0D.s:394    .bss.SDCardStatus:00000000 $d
  R:\TEMP\ccv8lH0D.s:409    .data.Stat:00000000 Stat
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SD_Init
SD_GetCardInfo
SDCardInfo
SD_ReadBlock
SD_ReadMultiBlocks
SD_WriteBlock
SD_WriteMultiBlocks
SD_GetCardStatus
memcpy
