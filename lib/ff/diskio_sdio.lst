   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"diskio_sdio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.disk_initialize,"ax",%progbits
  19              		.align	1
  20              		.global	disk_initialize
  21              		.thumb
  22              		.thumb_func
  24              	disk_initialize:
  25              	.LFB56:
  26              		.file 1 "lib/ff/diskio_sdio.c"
   1:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   2:lib/ff/diskio_sdio.c **** /* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2007        */
   3:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   4:lib/ff/diskio_sdio.c **** /* by grqd_xp                                                            */
   5:lib/ff/diskio_sdio.c **** /* This is a stub disk I/O module that acts as front end of the existing */
   6:lib/ff/diskio_sdio.c **** /* disk I/O modules and attach it to FatFs module with common interface. */
   7:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
   8:lib/ff/diskio_sdio.c **** /* by nemui trinomius                                                    */
   9:lib/ff/diskio_sdio.c **** /* adopted to STM32F2xx_StdPeriph_Driver V1.0.0.						 */
  10:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  11:lib/ff/diskio_sdio.c **** #include <string.h>
  12:lib/ff/diskio_sdio.c **** #include "diskio.h"
  13:lib/ff/diskio_sdio.c **** #include "sdio_stm32f1.h"
  14:lib/ff/diskio_sdio.c **** #include "rtc_support.h"
  15:lib/ff/diskio_sdio.c **** 
  16:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  17:lib/ff/diskio_sdio.c **** /* Correspondence between physical drive number and physical drive.      */
  18:lib/ff/diskio_sdio.c **** /* Note that Tiny-FatFs supports only single drive and always            */
  19:lib/ff/diskio_sdio.c **** /* accesses drive number 0.                                              */
  20:lib/ff/diskio_sdio.c **** 
  21:lib/ff/diskio_sdio.c **** #define SECTOR_SIZE 512
  22:lib/ff/diskio_sdio.c **** 
  23:lib/ff/diskio_sdio.c **** __IO SD_Error Status = SD_OK;
  24:lib/ff/diskio_sdio.c **** SD_CardStatus SDCardStatus;
  25:lib/ff/diskio_sdio.c **** 
  26:lib/ff/diskio_sdio.c **** /* dummy values */
  27:lib/ff/diskio_sdio.c **** #define SOCKPORT	1			/* Socket contact port */
  28:lib/ff/diskio_sdio.c **** #define SOCKWP		0			/* Write protect switch */
  29:lib/ff/diskio_sdio.c **** #define SOCKINS		0			/* Card detect switch */
  30:lib/ff/diskio_sdio.c ****  
  31:lib/ff/diskio_sdio.c ****  /*--------------------------------------------------------------------------
  32:lib/ff/diskio_sdio.c **** 
  33:lib/ff/diskio_sdio.c ****    Module Private Functions
  34:lib/ff/diskio_sdio.c **** 
  35:lib/ff/diskio_sdio.c **** ---------------------------------------------------------------------------*/
  36:lib/ff/diskio_sdio.c **** 
  37:lib/ff/diskio_sdio.c **** static volatile
  38:lib/ff/diskio_sdio.c **** DSTATUS Stat = STA_NOINIT;	/* Disk status */
  39:lib/ff/diskio_sdio.c **** 
  40:lib/ff/diskio_sdio.c **** static volatile
  41:lib/ff/diskio_sdio.c **** DWORD Timer1, Timer2;	/* 100Hz decrement timers */
  42:lib/ff/diskio_sdio.c ****  
  43:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  44:lib/ff/diskio_sdio.c **** /* Correspondence between physical drive number and physical drive.      */
  45:lib/ff/diskio_sdio.c **** #define SDIO_DRIVE		0
  46:lib/ff/diskio_sdio.c **** 
  47:lib/ff/diskio_sdio.c **** 
  48:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  49:lib/ff/diskio_sdio.c **** /* Initialize a Drive                                                    */
  50:lib/ff/diskio_sdio.c **** 
  51:lib/ff/diskio_sdio.c **** DSTATUS disk_initialize (
  52:lib/ff/diskio_sdio.c ****                          BYTE drv				/* Physical drive nmuber (0..) */
  53:lib/ff/diskio_sdio.c ****                            )
  54:lib/ff/diskio_sdio.c **** { 
  27              		.loc 1 54 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  55:lib/ff/diskio_sdio.c ****   switch (drv) 
  37              		.loc 1 55 0
  38 0002 40B9     		cbnz	r0, .L5
  56:lib/ff/diskio_sdio.c ****   {
  57:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
  58:lib/ff/diskio_sdio.c ****     {     
  59:lib/ff/diskio_sdio.c ****       /* Initialize SD Card */
  60:lib/ff/diskio_sdio.c ****       Status = SD_Init(); 
  39              		.loc 1 60 0
  40 0004 FFF7FEFF 		bl	SD_Init
  41              	.LVL1:
  42 0008 044B     		ldr	r3, .L7
  43 000a 1870     		strb	r0, [r3, #0]
  61:lib/ff/diskio_sdio.c ****       
  62:lib/ff/diskio_sdio.c ****       if (Status != SD_OK)
  44              		.loc 1 62 0
  45 000c 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  63:lib/ff/diskio_sdio.c ****         return STA_NOINIT;
  46              		.loc 1 63 0
  47 000e 2A38     		subs	r0, r0, #42
  48 0010 18BF     		it	ne
  49 0012 0120     		movne	r0, #1
  50 0014 08BD     		pop	{r3, pc}
  51              	.LVL2:
  52              	.L5:
  64:lib/ff/diskio_sdio.c ****       else
  65:lib/ff/diskio_sdio.c ****         return 0x00;
  66:lib/ff/diskio_sdio.c ****     }
  67:lib/ff/diskio_sdio.c ****   }
  68:lib/ff/diskio_sdio.c ****   
  69:lib/ff/diskio_sdio.c ****   return STA_NOINIT;
  53              		.loc 1 69 0
  54 0016 0120     		movs	r0, #1
  55              	.LVL3:
  70:lib/ff/diskio_sdio.c ****   
  71:lib/ff/diskio_sdio.c **** }
  56              		.loc 1 71 0
  57 0018 08BD     		pop	{r3, pc}
  58              	.L8:
  59 001a 00BF     		.align	2
  60              	.L7:
  61 001c 00000000 		.word	.LANCHOR0
  62              		.cfi_endproc
  63              	.LFE56:
  65              		.section	.text.disk_status,"ax",%progbits
  66              		.align	1
  67              		.global	disk_status
  68              		.thumb
  69              		.thumb_func
  71              	disk_status:
  72              	.LFB57:
  72:lib/ff/diskio_sdio.c **** 
  73:lib/ff/diskio_sdio.c **** 
  74:lib/ff/diskio_sdio.c **** 
  75:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
  76:lib/ff/diskio_sdio.c **** /* Return Disk Status                                                    */
  77:lib/ff/diskio_sdio.c **** 
  78:lib/ff/diskio_sdio.c **** DSTATUS disk_status (
  79:lib/ff/diskio_sdio.c ****                      BYTE drv		/* Physical drive nmuber (0..) */
  80:lib/ff/diskio_sdio.c ****                        )
  81:lib/ff/diskio_sdio.c **** {
  73              		.loc 1 81 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL4:
  78 0000 08B5     		push	{r3, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 3, -8
  82              		.cfi_offset 14, -4
  82:lib/ff/diskio_sdio.c ****   switch (drv) 
  83              		.loc 1 82 0
  84 0002 48B9     		cbnz	r0, .L13
  83:lib/ff/diskio_sdio.c ****   {
  84:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
  85:lib/ff/diskio_sdio.c ****     {
  86:lib/ff/diskio_sdio.c ****       Status = SD_GetCardInfo(&SDCardInfo);
  85              		.loc 1 86 0
  86 0004 0548     		ldr	r0, .L14
  87              	.LVL5:
  88 0006 FFF7FEFF 		bl	SD_GetCardInfo
  89              	.LVL6:
  90 000a 054B     		ldr	r3, .L14+4
  91 000c 1870     		strb	r0, [r3, #0]
  87:lib/ff/diskio_sdio.c **** 
  88:lib/ff/diskio_sdio.c ****       if (Status != SD_OK)
  92              		.loc 1 88 0
  93 000e 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  89:lib/ff/diskio_sdio.c ****         return STA_NOINIT;
  94              		.loc 1 89 0
  95 0010 2A38     		subs	r0, r0, #42
  96 0012 18BF     		it	ne
  97 0014 0120     		movne	r0, #1
  98 0016 08BD     		pop	{r3, pc}
  99              	.LVL7:
 100              	.L13:
  90:lib/ff/diskio_sdio.c ****       else
  91:lib/ff/diskio_sdio.c ****         return 0x00;
  92:lib/ff/diskio_sdio.c ****     }
  93:lib/ff/diskio_sdio.c ****   }
  94:lib/ff/diskio_sdio.c ****   
  95:lib/ff/diskio_sdio.c ****   return STA_NOINIT;
 101              		.loc 1 95 0
 102 0018 0120     		movs	r0, #1
 103              	.LVL8:
  96:lib/ff/diskio_sdio.c **** }
 104              		.loc 1 96 0
 105 001a 08BD     		pop	{r3, pc}
 106              	.L15:
 107              		.align	2
 108              	.L14:
 109 001c 00000000 		.word	SDCardInfo
 110 0020 00000000 		.word	.LANCHOR0
 111              		.cfi_endproc
 112              	.LFE57:
 114              		.section	.text.disk_read,"ax",%progbits
 115              		.align	1
 116              		.global	disk_read
 117              		.thumb
 118              		.thumb_func
 120              	disk_read:
 121              	.LFB58:
  97:lib/ff/diskio_sdio.c **** 
  98:lib/ff/diskio_sdio.c **** 
  99:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 100:lib/ff/diskio_sdio.c **** /* Read Sector(s)                                                        */
 101:lib/ff/diskio_sdio.c **** 
 102:lib/ff/diskio_sdio.c **** DRESULT disk_read (
 103:lib/ff/diskio_sdio.c ****                    BYTE drv,		/* Physical drive nmuber (0..) */
 104:lib/ff/diskio_sdio.c ****                    BYTE *buff,		/* Data buffer to store read data */
 105:lib/ff/diskio_sdio.c ****                    DWORD sector,	/* Sector address (LBA) */
 106:lib/ff/diskio_sdio.c ****                    BYTE count		/* Number of sectors to read (1..255) */
 107:lib/ff/diskio_sdio.c ****                      )
 108:lib/ff/diskio_sdio.c **** {
 122              		.loc 1 108 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL9:
 127 0000 13B5     		push	{r0, r1, r4, lr}
 128              	.LCFI2:
 129              		.cfi_def_cfa_offset 16
 130              		.cfi_offset 0, -16
 131              		.cfi_offset 1, -12
 132              		.cfi_offset 4, -8
 133              		.cfi_offset 14, -4
 134 0002 1C46     		mov	r4, r3
 109:lib/ff/diskio_sdio.c ****   switch (drv) 
 135              		.loc 1 109 0
 136 0004 A0B9     		cbnz	r0, .L22
 137              	.LVL10:
 138              	.LBB2:
 110:lib/ff/diskio_sdio.c ****   {
 111:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 112:lib/ff/diskio_sdio.c ****     {     
 113:lib/ff/diskio_sdio.c ****       SD_Error status = SD_OK;
 114:lib/ff/diskio_sdio.c **** 	  
 115:lib/ff/diskio_sdio.c **** 	 
 116:lib/ff/diskio_sdio.c **** 	if(count==1)
 139              		.loc 1 116 0
 140 0006 012B     		cmp	r3, #1
 141 0008 4FEAD253 		lsr	r3, r2, #23
 142              	.LVL11:
 143 000c 4FEA4222 		lsl	r2, r2, #9
 144              	.LVL12:
 145 0010 4FF40070 		mov	r0, #512
 146              	.LVL13:
 117:lib/ff/diskio_sdio.c ****     {
 118:lib/ff/diskio_sdio.c **** 		status = SD_ReadBlock((uint8_t*)(buff), 
 147              		.loc 1 118 0
 148 0014 0090     		str	r0, [sp, #0]
 116:lib/ff/diskio_sdio.c ****     {
 149              		.loc 1 116 0
 150 0016 03D1     		bne	.L19
 151              		.loc 1 118 0
 152 0018 0846     		mov	r0, r1
 153 001a FFF7FEFF 		bl	SD_ReadBlock
 154              	.LVL14:
 155 001e 03E0     		b	.L20
 156              	.LVL15:
 157              	.L19:
 119:lib/ff/diskio_sdio.c ****                               ((uint64_t)(sector)*SECTOR_SIZE),
 120:lib/ff/diskio_sdio.c ****                               SECTOR_SIZE);
 121:lib/ff/diskio_sdio.c **** 	}
 122:lib/ff/diskio_sdio.c **** 	else
 123:lib/ff/diskio_sdio.c ****     {
 124:lib/ff/diskio_sdio.c **** 		status = SD_ReadMultiBlocks((uint8_t*)(buff), 
 158              		.loc 1 124 0
 159 0020 0194     		str	r4, [sp, #4]
 160 0022 0846     		mov	r0, r1
 161 0024 FFF7FEFF 		bl	SD_ReadMultiBlocks
 162              	.LVL16:
 163              	.L20:
 125:lib/ff/diskio_sdio.c **** 									((uint64_t)(sector)*SECTOR_SIZE),
 126:lib/ff/diskio_sdio.c **** 									SECTOR_SIZE
 127:lib/ff/diskio_sdio.c **** 									,count);
 128:lib/ff/diskio_sdio.c **** 	}
 129:lib/ff/diskio_sdio.c **** 	 
 130:lib/ff/diskio_sdio.c **** 	  
 131:lib/ff/diskio_sdio.c **** 	if (status == SD_OK)	return RES_OK;
 164              		.loc 1 131 0
 165 0028 2A38     		subs	r0, r0, #42
 166              	.LVL17:
 167 002a 18BF     		it	ne
 168 002c 0120     		movne	r0, #1
 169              	.LVL18:
 170 002e 00E0     		b	.L17
 171              	.LVL19:
 172              	.L22:
 173              	.LBE2:
 132:lib/ff/diskio_sdio.c **** 	else					return RES_ERROR;
 133:lib/ff/diskio_sdio.c ****     }
 134:lib/ff/diskio_sdio.c **** 
 135:lib/ff/diskio_sdio.c ****   }
 136:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 174              		.loc 1 136 0
 175 0030 0420     		movs	r0, #4
 176              	.LVL20:
 177              	.L17:
 137:lib/ff/diskio_sdio.c **** }
 178              		.loc 1 137 0
 179 0032 1CBD     		pop	{r2, r3, r4, pc}
 180              		.cfi_endproc
 181              	.LFE58:
 183              		.section	.text.disk_write,"ax",%progbits
 184              		.align	1
 185              		.global	disk_write
 186              		.thumb
 187              		.thumb_func
 189              	disk_write:
 190              	.LFB59:
 138:lib/ff/diskio_sdio.c **** 
 139:lib/ff/diskio_sdio.c **** 
 140:lib/ff/diskio_sdio.c **** 
 141:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 142:lib/ff/diskio_sdio.c **** /* Write Sector(s)                                                       */
 143:lib/ff/diskio_sdio.c **** 
 144:lib/ff/diskio_sdio.c **** #if _READONLY == 0
 145:lib/ff/diskio_sdio.c **** DRESULT disk_write (
 146:lib/ff/diskio_sdio.c ****                     BYTE drv,			/* Physical drive nmuber (0..) */
 147:lib/ff/diskio_sdio.c ****                     const BYTE *buff,	/* Data to be written */
 148:lib/ff/diskio_sdio.c ****                     DWORD sector,		/* Sector address (LBA) */
 149:lib/ff/diskio_sdio.c ****                     BYTE count			/* Number of sectors to write (1..255) */
 150:lib/ff/diskio_sdio.c ****                       )
 151:lib/ff/diskio_sdio.c **** {
 191              		.loc 1 151 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL21:
 196 0000 13B5     		push	{r0, r1, r4, lr}
 197              	.LCFI3:
 198              		.cfi_def_cfa_offset 16
 199              		.cfi_offset 0, -16
 200              		.cfi_offset 1, -12
 201              		.cfi_offset 4, -8
 202              		.cfi_offset 14, -4
 203 0002 1C46     		mov	r4, r3
 152:lib/ff/diskio_sdio.c ****   switch (drv) 
 204              		.loc 1 152 0
 205 0004 A0B9     		cbnz	r0, .L29
 206              	.LVL22:
 207              	.LBB3:
 153:lib/ff/diskio_sdio.c ****   {
 154:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 155:lib/ff/diskio_sdio.c ****     {     
 156:lib/ff/diskio_sdio.c ****       SD_Error status = SD_OK;
 157:lib/ff/diskio_sdio.c **** 	  
 158:lib/ff/diskio_sdio.c **** 	 
 159:lib/ff/diskio_sdio.c **** 	if(count==1)
 208              		.loc 1 159 0
 209 0006 012B     		cmp	r3, #1
 210 0008 4FEAD253 		lsr	r3, r2, #23
 211              	.LVL23:
 212 000c 4FEA4222 		lsl	r2, r2, #9
 213              	.LVL24:
 214 0010 4FF40070 		mov	r0, #512
 215              	.LVL25:
 160:lib/ff/diskio_sdio.c ****     {
 161:lib/ff/diskio_sdio.c **** 		status = SD_WriteBlock((uint8_t*)(buff), 
 216              		.loc 1 161 0
 217 0014 0090     		str	r0, [sp, #0]
 159:lib/ff/diskio_sdio.c ****     {
 218              		.loc 1 159 0
 219 0016 03D1     		bne	.L26
 220              		.loc 1 161 0
 221 0018 0846     		mov	r0, r1
 222 001a FFF7FEFF 		bl	SD_WriteBlock
 223              	.LVL26:
 224 001e 03E0     		b	.L27
 225              	.LVL27:
 226              	.L26:
 162:lib/ff/diskio_sdio.c ****                               ((uint64_t)(sector)*SECTOR_SIZE),
 163:lib/ff/diskio_sdio.c ****                               SECTOR_SIZE);
 164:lib/ff/diskio_sdio.c **** 	}
 165:lib/ff/diskio_sdio.c **** 	else
 166:lib/ff/diskio_sdio.c ****     {
 167:lib/ff/diskio_sdio.c **** 		status = SD_WriteMultiBlocks((uint8_t*)(buff), 
 227              		.loc 1 167 0
 228 0020 0194     		str	r4, [sp, #4]
 229 0022 0846     		mov	r0, r1
 230 0024 FFF7FEFF 		bl	SD_WriteMultiBlocks
 231              	.LVL28:
 232              	.L27:
 168:lib/ff/diskio_sdio.c **** 									((uint64_t)(sector)*SECTOR_SIZE),
 169:lib/ff/diskio_sdio.c **** 									SECTOR_SIZE
 170:lib/ff/diskio_sdio.c **** 									,count);
 171:lib/ff/diskio_sdio.c **** 	}
 172:lib/ff/diskio_sdio.c **** 	 
 173:lib/ff/diskio_sdio.c **** 	  
 174:lib/ff/diskio_sdio.c **** 	if (status == SD_OK)	return RES_OK;
 233              		.loc 1 174 0
 234 0028 2A38     		subs	r0, r0, #42
 235              	.LVL29:
 236 002a 18BF     		it	ne
 237 002c 0120     		movne	r0, #1
 238              	.LVL30:
 239 002e 00E0     		b	.L24
 240              	.LVL31:
 241              	.L29:
 242              	.LBE3:
 175:lib/ff/diskio_sdio.c **** 	else					return RES_ERROR;
 176:lib/ff/diskio_sdio.c ****     }
 177:lib/ff/diskio_sdio.c **** 
 178:lib/ff/diskio_sdio.c ****   }
 179:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 243              		.loc 1 179 0
 244 0030 0420     		movs	r0, #4
 245              	.LVL32:
 246              	.L24:
 180:lib/ff/diskio_sdio.c **** }
 247              		.loc 1 180 0
 248 0032 1CBD     		pop	{r2, r3, r4, pc}
 249              		.cfi_endproc
 250              	.LFE59:
 252              		.section	.text.disk_ioctl,"ax",%progbits
 253              		.align	1
 254              		.global	disk_ioctl
 255              		.thumb
 256              		.thumb_func
 258              	disk_ioctl:
 259              	.LFB60:
 181:lib/ff/diskio_sdio.c **** #endif /* _READONLY */
 182:lib/ff/diskio_sdio.c **** 
 183:lib/ff/diskio_sdio.c **** 
 184:lib/ff/diskio_sdio.c **** 
 185:lib/ff/diskio_sdio.c **** /*-----------------------------------------------------------------------*/
 186:lib/ff/diskio_sdio.c **** /* Miscellaneous Functions                                               */
 187:lib/ff/diskio_sdio.c **** 
 188:lib/ff/diskio_sdio.c **** DRESULT disk_ioctl (
 189:lib/ff/diskio_sdio.c ****                     BYTE drv,		/* Physical drive nmuber (0..) */
 190:lib/ff/diskio_sdio.c ****                     BYTE ctrl,		/* Control code */
 191:lib/ff/diskio_sdio.c ****                     void *buff		/* Buffer to send/receive control data */
 192:lib/ff/diskio_sdio.c ****                       )
 193:lib/ff/diskio_sdio.c **** {
 260              		.loc 1 193 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL33:
 265 0000 10B5     		push	{r4, lr}
 266              	.LCFI4:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 4, -8
 269              		.cfi_offset 14, -4
 270 0002 1446     		mov	r4, r2
 194:lib/ff/diskio_sdio.c ****   switch (drv) 
 271              		.loc 1 194 0
 272 0004 0028     		cmp	r0, #0
 273 0006 32D1     		bne	.L44
 195:lib/ff/diskio_sdio.c ****   {
 196:lib/ff/diskio_sdio.c ****     case SDIO_DRIVE:
 197:lib/ff/diskio_sdio.c ****     {      
 198:lib/ff/diskio_sdio.c ****       switch (ctrl)
 274              		.loc 1 198 0
 275 0008 0139     		subs	r1, r1, #1
 276              	.LVL34:
 277 000a 0D29     		cmp	r1, #13
 278 000c 31D8     		bhi	.L43
 279 000e DFE801F0 		tbb	[pc, r1]
 280              	.L41:
 281 0012 0B       		.byte	(.L33-.L41)/2
 282 0013 07       		.byte	(.L34-.L41)/2
 283 0014 12       		.byte	(.L35-.L41)/2
 284 0015 30       		.byte	(.L43-.L41)/2
 285 0016 30       		.byte	(.L43-.L41)/2
 286 0017 30       		.byte	(.L43-.L41)/2
 287 0018 30       		.byte	(.L43-.L41)/2
 288 0019 30       		.byte	(.L43-.L41)/2
 289 001a 30       		.byte	(.L43-.L41)/2
 290 001b 15       		.byte	(.L36-.L41)/2
 291 001c 1A       		.byte	(.L37-.L41)/2
 292 001d 1D       		.byte	(.L38-.L41)/2
 293 001e 21       		.byte	(.L39-.L41)/2
 294 001f 25       		.byte	(.L40-.L41)/2
 295              		.align	1
 296              	.L34:
 199:lib/ff/diskio_sdio.c ****       {
 200:lib/ff/diskio_sdio.c ****         case CTRL_SYNC:
 201:lib/ff/diskio_sdio.c ****           /* no synchronization to do since not buffering in this module */
 202:lib/ff/diskio_sdio.c ****           return RES_OK;
 203:lib/ff/diskio_sdio.c ****         case GET_SECTOR_SIZE:
 204:lib/ff/diskio_sdio.c ****           *(uint16_t*)buff = SECTOR_SIZE;
 297              		.loc 1 204 0
 298 0020 4FF40070 		mov	r0, #512
 299              	.LVL35:
 300 0024 1080     		strh	r0, [r2, #0]	@ movhi
 301 0026 24E0     		b	.L43
 302              	.LVL36:
 303              	.L33:
 205:lib/ff/diskio_sdio.c ****           return RES_OK;
 206:lib/ff/diskio_sdio.c ****         case GET_SECTOR_COUNT:
 207:lib/ff/diskio_sdio.c ****           *(uint32_t*)buff = SDCardInfo.CardCapacity / SECTOR_SIZE;
 304              		.loc 1 207 0
 305 0028 1349     		ldr	r1, .L48
 306 002a CA6C     		ldr	r2, [r1, #76]
 307              	.LVL37:
 308 002c 8B6C     		ldr	r3, [r1, #72]
 309 002e 580A     		lsrs	r0, r3, #9
 310              	.LVL38:
 311 0030 40EAC250 		orr	r0, r0, r2, lsl #23
 312 0034 10E0     		b	.L46
 313              	.LVL39:
 314              	.L35:
 208:lib/ff/diskio_sdio.c ****           return RES_OK;
 209:lib/ff/diskio_sdio.c ****         case GET_BLOCK_SIZE:
 210:lib/ff/diskio_sdio.c ****           *(uint32_t*)buff = SDCardInfo.CardBlockSize;
 315              		.loc 1 210 0
 316 0036 104B     		ldr	r3, .L48
 317 0038 186D     		ldr	r0, [r3, #80]
 318              	.LVL40:
 319 003a 0DE0     		b	.L46
 320              	.LVL41:
 321              	.L36:
 211:lib/ff/diskio_sdio.c **** 		  return RES_OK;
 212:lib/ff/diskio_sdio.c **** 		/* Following command are not used by FatFs module */
 213:lib/ff/diskio_sdio.c **** 		case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
 214:lib/ff/diskio_sdio.c **** 			*(uint8_t*)buff = SDCardInfo.CardType;
 322              		.loc 1 214 0
 323 003c 0E4A     		ldr	r2, .L48
 324              	.LVL42:
 325 003e 92F85610 		ldrb	r1, [r2, #86]	@ zero_extendqisi2
 326 0042 2170     		strb	r1, [r4, #0]
 327 0044 15E0     		b	.L43
 328              	.LVL43:
 329              	.L37:
 215:lib/ff/diskio_sdio.c **** 			return RES_OK;
 216:lib/ff/diskio_sdio.c **** 		case MMC_GET_CSD :		/* Read CSD (16 bytes) */
 217:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardInfo.SD_csd,16);
 330              		.loc 1 217 0
 331 0046 1046     		mov	r0, r2
 332              	.LVL44:
 333 0048 0B49     		ldr	r1, .L48
 334 004a 01E0     		b	.L47
 335              	.LVL45:
 336              	.L38:
 218:lib/ff/diskio_sdio.c **** 			return RES_OK;
 219:lib/ff/diskio_sdio.c **** 		case MMC_GET_CID :		/* Read CID (16 bytes) */
 220:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardInfo.SD_cid,16);
 337              		.loc 1 220 0
 338 004c 1046     		mov	r0, r2
 339              	.LVL46:
 340 004e 0B49     		ldr	r1, .L48+4
 341              	.LVL47:
 342              	.L47:
 343 0050 1022     		movs	r2, #16
 344 0052 09E0     		b	.L45
 345              	.LVL48:
 346              	.L39:
 221:lib/ff/diskio_sdio.c **** 			return RES_OK;
 222:lib/ff/diskio_sdio.c **** 		case MMC_GET_OCR :		/* Read OCR (4 bytes) */
 223:lib/ff/diskio_sdio.c **** 			*(uint32_t*)buff = SDCardInfo.SD_csd.MaxRdCurrentVDDMin;
 347              		.loc 1 223 0
 348 0054 084B     		ldr	r3, .L48
 349 0056 187D     		ldrb	r0, [r3, #20]	@ zero_extendqisi2
 350              	.LVL49:
 351              	.L46:
 352 0058 2060     		str	r0, [r4, #0]
 353 005a 0AE0     		b	.L43
 354              	.LVL50:
 355              	.L40:
 224:lib/ff/diskio_sdio.c **** 			return RES_OK;
 225:lib/ff/diskio_sdio.c **** 		case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
 226:lib/ff/diskio_sdio.c **** 			SD_GetCardStatus(&SDCardStatus);
 356              		.loc 1 226 0
 357 005c 0848     		ldr	r0, .L48+8
 358              	.LVL51:
 359 005e FFF7FEFF 		bl	SD_GetCardStatus
 360              	.LVL52:
 227:lib/ff/diskio_sdio.c **** 			memcpy((void *)buff,&SDCardStatus,64);
 361              		.loc 1 227 0
 362 0062 2046     		mov	r0, r4
 363 0064 0649     		ldr	r1, .L48+8
 364 0066 4022     		movs	r2, #64
 365              	.LVL53:
 366              	.L45:
 367 0068 FFF7FEFF 		bl	memcpy
 368              	.LVL54:
 369 006c 01E0     		b	.L43
 370              	.LVL55:
 371              	.L44:
 228:lib/ff/diskio_sdio.c **** 			return RES_OK;
 229:lib/ff/diskio_sdio.c **** 		default :
 230:lib/ff/diskio_sdio.c **** 			return RES_OK;
 231:lib/ff/diskio_sdio.c **** 
 232:lib/ff/diskio_sdio.c ****       }
 233:lib/ff/diskio_sdio.c ****     }
 234:lib/ff/diskio_sdio.c ****   }
 235:lib/ff/diskio_sdio.c ****   return RES_PARERR;
 372              		.loc 1 235 0
 373 006e 0420     		movs	r0, #4
 374              	.LVL56:
 375 0070 10BD     		pop	{r4, pc}
 376              	.LVL57:
 377              	.L43:
 202:lib/ff/diskio_sdio.c ****         case GET_SECTOR_SIZE:
 378              		.loc 1 202 0
 379 0072 0020     		movs	r0, #0
 236:lib/ff/diskio_sdio.c **** }
 380              		.loc 1 236 0
 381 0074 10BD     		pop	{r4, pc}
 382              	.L49:
 383 0076 00BF     		.align	2
 384              	.L48:
 385 0078 00000000 		.word	SDCardInfo
 386 007c 2C000000 		.word	SDCardInfo+44
 387 0080 00000000 		.word	.LANCHOR1
 388              		.cfi_endproc
 389              	.LFE60:
 391              		.global	SDCardStatus
 392              		.global	Status
 393              		.section	.bss.Timer1,"aw",%nobits
 394              		.align	2
 397              	Timer1:
 398 0000 00000000 		.space	4
 399              		.section	.bss.Timer2,"aw",%nobits
 400              		.align	2
 403              	Timer2:
 404 0000 00000000 		.space	4
 405              		.section	.bss.SDCardStatus,"aw",%nobits
 406              		.align	2
 407              		.set	.LANCHOR1,. + 0
 410              	SDCardStatus:
 411 0000 00000000 		.space	16
 411      00000000 
 411      00000000 
 411      00000000 
 412              		.section	.data.Status,"aw",%progbits
 413              		.set	.LANCHOR0,. + 0
 416              	Status:
 417 0000 2A       		.byte	42
 418              		.section	.data.Stat,"aw",%progbits
 421              	Stat:
 422 0000 01       		.byte	1
 423              		.text
 424              	.Letext0:
 425              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stddef.h"
 426              		.file 3 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 427              		.file 4 "lib/ff/integer.h"
 428              		.file 5 "lib/ff/diskio.h"
 429              		.file 6 "lib/ff/sdio_stm32f1.h"
 430              		.file 7 "./lib/CMSIS/Include/core_cm3.h"
 431              		.file 8 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-ea
DEFINED SYMBOLS
                            *ABS*:0000000000000000 diskio_sdio.c
  R:\TEMP\ccQTDdJk.s:19     .text.disk_initialize:0000000000000000 $t
  R:\TEMP\ccQTDdJk.s:24     .text.disk_initialize:0000000000000000 disk_initialize
  R:\TEMP\ccQTDdJk.s:61     .text.disk_initialize:000000000000001c $d
  R:\TEMP\ccQTDdJk.s:66     .text.disk_status:0000000000000000 $t
  R:\TEMP\ccQTDdJk.s:71     .text.disk_status:0000000000000000 disk_status
  R:\TEMP\ccQTDdJk.s:109    .text.disk_status:000000000000001c $d
  R:\TEMP\ccQTDdJk.s:115    .text.disk_read:0000000000000000 $t
  R:\TEMP\ccQTDdJk.s:120    .text.disk_read:0000000000000000 disk_read
  R:\TEMP\ccQTDdJk.s:184    .text.disk_write:0000000000000000 $t
  R:\TEMP\ccQTDdJk.s:189    .text.disk_write:0000000000000000 disk_write
  R:\TEMP\ccQTDdJk.s:253    .text.disk_ioctl:0000000000000000 $t
  R:\TEMP\ccQTDdJk.s:258    .text.disk_ioctl:0000000000000000 disk_ioctl
  R:\TEMP\ccQTDdJk.s:281    .text.disk_ioctl:0000000000000012 $d
  R:\TEMP\ccQTDdJk.s:295    .text.disk_ioctl:0000000000000020 $t
  R:\TEMP\ccQTDdJk.s:385    .text.disk_ioctl:0000000000000078 $d
  R:\TEMP\ccQTDdJk.s:410    .bss.SDCardStatus:0000000000000000 SDCardStatus
  R:\TEMP\ccQTDdJk.s:416    .data.Status:0000000000000000 Status
  R:\TEMP\ccQTDdJk.s:394    .bss.Timer1:0000000000000000 $d
  R:\TEMP\ccQTDdJk.s:397    .bss.Timer1:0000000000000000 Timer1
  R:\TEMP\ccQTDdJk.s:400    .bss.Timer2:0000000000000000 $d
  R:\TEMP\ccQTDdJk.s:403    .bss.Timer2:0000000000000000 Timer2
  R:\TEMP\ccQTDdJk.s:406    .bss.SDCardStatus:0000000000000000 $d
  R:\TEMP\ccQTDdJk.s:421    .data.Stat:0000000000000000 Stat
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SD_Init
SD_GetCardInfo
SDCardInfo
SD_ReadBlock
SD_ReadMultiBlocks
SD_WriteBlock
SD_WriteMultiBlocks
SD_GetCardStatus
memcpy
