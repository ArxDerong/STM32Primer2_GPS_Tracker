   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWR_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	PWR_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	PWR_DeInit:
  25              	.LFB56:
  26              		.file 1 "lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c"
   1:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
   2:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   3:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @file    stm32f10x_pwr.c
   4:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @author  MCD Application Team
   5:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @version V3.6.1
   6:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @date    05-March-2012
   7:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief   This file provides all the PWR firmware functions.
   8:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   9:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @attention
  10:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  11:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  12:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  13:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * You may not use this file except in compliance with the License.
  15:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * You may obtain a copy of the License at:
  16:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  17:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  19:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  20:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * See the License for the specific language governing permissions and
  23:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * limitations under the License.
  24:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  25:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
  26:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  27:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  28:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  29:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_pwr.h"
  30:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_rcc.h"
  31:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  32:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  33:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  34:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  35:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  36:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR 
  37:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief PWR driver modules
  38:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  39:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */ 
  40:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  41:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_TypesDefinitions
  42:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  43:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  44:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  45:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  46:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  47:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  48:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  49:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Defines
  50:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  51:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  52:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  53:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  54:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  55:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  56:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CR Register ---*/
  57:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  58:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of DBP bit */
  59:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  60:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define DBP_BitNumber            0x08
  61:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  62:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  63:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of PVDE bit */
  64:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PVDE_BitNumber           0x04
  65:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  66:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  67:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CSR Register ---*/
  68:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  69:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of EWUP bit */
  70:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  71:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define EWUP_BitNumber           0x08
  72:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  73:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  74:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  75:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  76:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* CR register bit mask */
  77:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  78:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  79:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  80:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  81:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  82:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  83:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  84:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  85:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Macros
  86:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  87:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  88:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  89:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  90:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  91:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  92:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  93:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Variables
  94:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  95:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  96:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  97:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  98:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  99:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 100:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 101:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_FunctionPrototypes
 102:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
 103:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 104:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 105:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 106:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
 107:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 108:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 109:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Functions
 110:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
 111:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 112:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 113:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 114:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
 115:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 116:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 117:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 118:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_DeInit(void)
 119:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  27              		.loc 1 119 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 120:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  36              		.loc 1 120 0
  37 0002 4FF08050 		mov	r0, #268435456
  38 0006 0121     		movs	r1, #1
  39 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  40              	.LVL0:
 121:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  41              		.loc 1 121 0
  42 000c 4FF08050 		mov	r0, #268435456
  43 0010 0021     		movs	r1, #0
 122:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
  44              		.loc 1 122 0
  45 0012 BDE80840 		pop	{r3, lr}
 121:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  46              		.loc 1 121 0
  47 0016 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  48              	.LVL1:
  49              		.cfi_endproc
  50              	.LFE56:
  52              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  53              		.align	1
  54              		.global	PWR_BackupAccessCmd
  55              		.thumb
  56              		.thumb_func
  58              	PWR_BackupAccessCmd:
  59              	.LFB57:
 123:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 124:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 125:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables access to the RTC and backup registers.
 126:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the access to the RTC and backup registers.
 127:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 128:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 129:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 130:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 131:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  60              		.loc 1 131 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              	.LVL2:
 132:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 133:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 134:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  66              		.loc 1 134 0
  67 0000 014B     		ldr	r3, .L3
  68 0002 1860     		str	r0, [r3, #0]
  69 0004 7047     		bx	lr
  70              	.L4:
  71 0006 00BF     		.align	2
  72              	.L3:
  73 0008 20000E42 		.word	1108213792
  74              		.cfi_endproc
  75              	.LFE57:
  77              		.section	.text.PWR_PVDCmd,"ax",%progbits
  78              		.align	1
  79              		.global	PWR_PVDCmd
  80              		.thumb
  81              		.thumb_func
  83              	PWR_PVDCmd:
  84              	.LFB58:
 135:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 136:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 137:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 138:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 139:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the PVD.
 140:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 141:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 142:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 143:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 144:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  85              		.loc 1 144 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90              	.LVL3:
 145:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 146:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 147:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
  91              		.loc 1 147 0
  92 0000 014B     		ldr	r3, .L6
  93 0002 1860     		str	r0, [r3, #0]
  94 0004 7047     		bx	lr
  95              	.L7:
  96 0006 00BF     		.align	2
  97              	.L6:
  98 0008 10000E42 		.word	1108213776
  99              		.cfi_endproc
 100              	.LFE58:
 102              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 103              		.align	1
 104              		.global	PWR_PVDLevelConfig
 105              		.thumb
 106              		.thumb_func
 108              	PWR_PVDLevelConfig:
 109              	.LFB59:
 148:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 149:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 150:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 151:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 152:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 153:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 154:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
 155:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
 156:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
 157:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
 158:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
 159:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
 160:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
 161:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
 162:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 163:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 164:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 165:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 110              		.loc 1 165 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL4:
 116              	.LVL5:
 166:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 167:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 168:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 169:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 117              		.loc 1 169 0
 118 0000 034B     		ldr	r3, .L9
 119 0002 1A68     		ldr	r2, [r3, #0]
 120              	.LVL6:
 170:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PLS[7:5] bits */
 171:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_PLS_MASK;
 121              		.loc 1 171 0
 122 0004 22F0E001 		bic	r1, r2, #224
 123              	.LVL7:
 172:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 173:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_PVDLevel;
 124              		.loc 1 173 0
 125 0008 0843     		orrs	r0, r0, r1
 126              	.LVL8:
 174:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 175:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 127              		.loc 1 175 0
 128 000a 1860     		str	r0, [r3, #0]
 129 000c 7047     		bx	lr
 130              	.L10:
 131 000e 00BF     		.align	2
 132              	.L9:
 133 0010 00700040 		.word	1073770496
 134              		.cfi_endproc
 135              	.LFE59:
 137              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 138              		.align	1
 139              		.global	PWR_WakeUpPinCmd
 140              		.thumb
 141              		.thumb_func
 143              	PWR_WakeUpPinCmd:
 144              	.LFB60:
 176:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 177:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 178:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 179:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 180:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 181:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 182:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 183:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 184:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 185:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 145              		.loc 1 185 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150              	.LVL9:
 186:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 187:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 188:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 151              		.loc 1 188 0
 152 0000 014B     		ldr	r3, .L12
 153 0002 1860     		str	r0, [r3, #0]
 154 0004 7047     		bx	lr
 155              	.L13:
 156 0006 00BF     		.align	2
 157              	.L12:
 158 0008 A0000E42 		.word	1108213920
 159              		.cfi_endproc
 160              	.LFE60:
 162              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 163              		.align	1
 164              		.global	PWR_EnterSTOPMode
 165              		.thumb
 166              		.thumb_func
 168              	PWR_EnterSTOPMode:
 169              	.LFB61:
 189:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 190:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 191:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 192:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STOP mode.
 193:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 194:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 195:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_ON: STOP mode with regulator ON
 196:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 197:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 198:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 199:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 200:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 201:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 202:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 203:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 204:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 170              		.loc 1 204 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175              	.LVL10:
 176              	.LVL11:
 205:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 206:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 207:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 208:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 209:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 210:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 211:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 177              		.loc 1 211 0
 178 0000 0A4B     		ldr	r3, .L18
 179 0002 1A68     		ldr	r2, [r3, #0]
 180              	.LVL12:
 212:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PDDS and LPDS bits */
 213:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_DS_MASK;
 181              		.loc 1 213 0
 182 0004 22F00302 		bic	r2, r2, #3
 183              	.LVL13:
 214:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 215:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_Regulator;
 184              		.loc 1 215 0
 185 0008 1043     		orrs	r0, r0, r2
 186              	.LVL14:
 216:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 217:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 187              		.loc 1 217 0
 188 000a 1860     		str	r0, [r3, #0]
 218:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 219:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 189              		.loc 1 219 0
 190 000c 0848     		ldr	r0, .L18+4
 191              	.LVL15:
 192 000e 0369     		ldr	r3, [r0, #16]
 193              	.LVL16:
 194 0010 43F00402 		orr	r2, r3, #4
 195 0014 0261     		str	r2, [r0, #16]
 220:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 221:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 222:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 196              		.loc 1 222 0
 197 0016 0129     		cmp	r1, #1
 198 0018 01D1     		bne	.L15
 199              	.LBB8:
 200              	.LBB9:
 201              		.file 2 "./lib/CMSIS/Include/core_cmInstr.h"
   1:./lib/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:./lib/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./lib/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./lib/CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:./lib/CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:./lib/CMSIS/Include/core_cmInstr.h ****  *
   7:./lib/CMSIS/Include/core_cmInstr.h ****  * @note
   8:./lib/CMSIS/Include/core_cmInstr.h ****  *
   9:./lib/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:./lib/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:./lib/CMSIS/Include/core_cmInstr.h **** 
  12:./lib/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:./lib/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./lib/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./lib/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./lib/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./lib/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./lib/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./lib/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./lib/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./lib/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./lib/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:./lib/CMSIS/Include/core_cmInstr.h ****    *
  24:./lib/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./lib/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./lib/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./lib/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./lib/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./lib/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./lib/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./lib/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./lib/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./lib/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./lib/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./lib/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./lib/CMSIS/Include/core_cmInstr.h **** 
  37:./lib/CMSIS/Include/core_cmInstr.h **** 
  38:./lib/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./lib/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./lib/CMSIS/Include/core_cmInstr.h **** 
  41:./lib/CMSIS/Include/core_cmInstr.h **** 
  42:./lib/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./lib/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./lib/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:./lib/CMSIS/Include/core_cmInstr.h ****   @{
  46:./lib/CMSIS/Include/core_cmInstr.h **** */
  47:./lib/CMSIS/Include/core_cmInstr.h **** 
  48:./lib/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./lib/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./lib/CMSIS/Include/core_cmInstr.h **** 
  51:./lib/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./lib/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./lib/CMSIS/Include/core_cmInstr.h **** #endif
  54:./lib/CMSIS/Include/core_cmInstr.h **** 
  55:./lib/CMSIS/Include/core_cmInstr.h **** 
  56:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:./lib/CMSIS/Include/core_cmInstr.h **** 
  58:./lib/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./lib/CMSIS/Include/core_cmInstr.h ****  */
  60:./lib/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:./lib/CMSIS/Include/core_cmInstr.h **** 
  62:./lib/CMSIS/Include/core_cmInstr.h **** 
  63:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./lib/CMSIS/Include/core_cmInstr.h **** 
  65:./lib/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./lib/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:./lib/CMSIS/Include/core_cmInstr.h ****  */
  68:./lib/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:./lib/CMSIS/Include/core_cmInstr.h **** 
  70:./lib/CMSIS/Include/core_cmInstr.h **** 
  71:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:./lib/CMSIS/Include/core_cmInstr.h **** 
  73:./lib/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./lib/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./lib/CMSIS/Include/core_cmInstr.h ****  */
  76:./lib/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:./lib/CMSIS/Include/core_cmInstr.h **** 
  78:./lib/CMSIS/Include/core_cmInstr.h **** 
  79:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:./lib/CMSIS/Include/core_cmInstr.h **** 
  81:./lib/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./lib/CMSIS/Include/core_cmInstr.h ****  */
  83:./lib/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:./lib/CMSIS/Include/core_cmInstr.h **** 
  85:./lib/CMSIS/Include/core_cmInstr.h **** 
  86:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./lib/CMSIS/Include/core_cmInstr.h **** 
  88:./lib/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./lib/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./lib/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./lib/CMSIS/Include/core_cmInstr.h ****  */
  92:./lib/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:./lib/CMSIS/Include/core_cmInstr.h **** 
  94:./lib/CMSIS/Include/core_cmInstr.h **** 
  95:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:./lib/CMSIS/Include/core_cmInstr.h **** 
  97:./lib/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:./lib/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:./lib/CMSIS/Include/core_cmInstr.h ****  */
 100:./lib/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:./lib/CMSIS/Include/core_cmInstr.h **** 
 102:./lib/CMSIS/Include/core_cmInstr.h **** 
 103:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:./lib/CMSIS/Include/core_cmInstr.h **** 
 105:./lib/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:./lib/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:./lib/CMSIS/Include/core_cmInstr.h ****  */
 108:./lib/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:./lib/CMSIS/Include/core_cmInstr.h **** 
 110:./lib/CMSIS/Include/core_cmInstr.h **** 
 111:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:./lib/CMSIS/Include/core_cmInstr.h **** 
 113:./lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:./lib/CMSIS/Include/core_cmInstr.h **** 
 115:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:./lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:./lib/CMSIS/Include/core_cmInstr.h ****  */
 118:./lib/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:./lib/CMSIS/Include/core_cmInstr.h **** 
 120:./lib/CMSIS/Include/core_cmInstr.h **** 
 121:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:./lib/CMSIS/Include/core_cmInstr.h **** 
 123:./lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:./lib/CMSIS/Include/core_cmInstr.h **** 
 125:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:./lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:./lib/CMSIS/Include/core_cmInstr.h ****  */
 128:./lib/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:./lib/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:./lib/CMSIS/Include/core_cmInstr.h **** {
 131:./lib/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:./lib/CMSIS/Include/core_cmInstr.h ****   bx lr
 133:./lib/CMSIS/Include/core_cmInstr.h **** }
 134:./lib/CMSIS/Include/core_cmInstr.h **** #endif
 135:./lib/CMSIS/Include/core_cmInstr.h **** 
 136:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:./lib/CMSIS/Include/core_cmInstr.h **** 
 138:./lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:./lib/CMSIS/Include/core_cmInstr.h **** 
 140:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:./lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:./lib/CMSIS/Include/core_cmInstr.h ****  */
 143:./lib/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:./lib/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:./lib/CMSIS/Include/core_cmInstr.h **** {
 146:./lib/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:./lib/CMSIS/Include/core_cmInstr.h ****   bx lr
 148:./lib/CMSIS/Include/core_cmInstr.h **** }
 149:./lib/CMSIS/Include/core_cmInstr.h **** #endif
 150:./lib/CMSIS/Include/core_cmInstr.h **** 
 151:./lib/CMSIS/Include/core_cmInstr.h **** 
 152:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:./lib/CMSIS/Include/core_cmInstr.h **** 
 154:./lib/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:./lib/CMSIS/Include/core_cmInstr.h **** 
 156:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:./lib/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:./lib/CMSIS/Include/core_cmInstr.h ****  */
 160:./lib/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:./lib/CMSIS/Include/core_cmInstr.h **** 
 162:./lib/CMSIS/Include/core_cmInstr.h **** 
 163:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:./lib/CMSIS/Include/core_cmInstr.h **** 
 165:./lib/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:./lib/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:./lib/CMSIS/Include/core_cmInstr.h **** 
 168:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:./lib/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:./lib/CMSIS/Include/core_cmInstr.h ****  */
 171:./lib/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:./lib/CMSIS/Include/core_cmInstr.h **** 
 173:./lib/CMSIS/Include/core_cmInstr.h **** 
 174:./lib/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:./lib/CMSIS/Include/core_cmInstr.h **** 
 176:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:./lib/CMSIS/Include/core_cmInstr.h **** 
 178:./lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:./lib/CMSIS/Include/core_cmInstr.h **** 
 180:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:./lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:./lib/CMSIS/Include/core_cmInstr.h ****  */
 183:./lib/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 184:./lib/CMSIS/Include/core_cmInstr.h **** 
 185:./lib/CMSIS/Include/core_cmInstr.h **** 
 186:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:./lib/CMSIS/Include/core_cmInstr.h **** 
 188:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:./lib/CMSIS/Include/core_cmInstr.h **** 
 190:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:./lib/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:./lib/CMSIS/Include/core_cmInstr.h ****  */
 193:./lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:./lib/CMSIS/Include/core_cmInstr.h **** 
 195:./lib/CMSIS/Include/core_cmInstr.h **** 
 196:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:./lib/CMSIS/Include/core_cmInstr.h **** 
 198:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:./lib/CMSIS/Include/core_cmInstr.h **** 
 200:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:./lib/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:./lib/CMSIS/Include/core_cmInstr.h ****  */
 203:./lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:./lib/CMSIS/Include/core_cmInstr.h **** 
 205:./lib/CMSIS/Include/core_cmInstr.h **** 
 206:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:./lib/CMSIS/Include/core_cmInstr.h **** 
 208:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:./lib/CMSIS/Include/core_cmInstr.h **** 
 210:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:./lib/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:./lib/CMSIS/Include/core_cmInstr.h ****  */
 213:./lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:./lib/CMSIS/Include/core_cmInstr.h **** 
 215:./lib/CMSIS/Include/core_cmInstr.h **** 
 216:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:./lib/CMSIS/Include/core_cmInstr.h **** 
 218:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:./lib/CMSIS/Include/core_cmInstr.h **** 
 220:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:./lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:./lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:./lib/CMSIS/Include/core_cmInstr.h ****  */
 225:./lib/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:./lib/CMSIS/Include/core_cmInstr.h **** 
 227:./lib/CMSIS/Include/core_cmInstr.h **** 
 228:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:./lib/CMSIS/Include/core_cmInstr.h **** 
 230:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:./lib/CMSIS/Include/core_cmInstr.h **** 
 232:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:./lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:./lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:./lib/CMSIS/Include/core_cmInstr.h ****  */
 237:./lib/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:./lib/CMSIS/Include/core_cmInstr.h **** 
 239:./lib/CMSIS/Include/core_cmInstr.h **** 
 240:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:./lib/CMSIS/Include/core_cmInstr.h **** 
 242:./lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:./lib/CMSIS/Include/core_cmInstr.h **** 
 244:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:./lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:./lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:./lib/CMSIS/Include/core_cmInstr.h ****  */
 249:./lib/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:./lib/CMSIS/Include/core_cmInstr.h **** 
 251:./lib/CMSIS/Include/core_cmInstr.h **** 
 252:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:./lib/CMSIS/Include/core_cmInstr.h **** 
 254:./lib/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:./lib/CMSIS/Include/core_cmInstr.h **** 
 256:./lib/CMSIS/Include/core_cmInstr.h ****  */
 257:./lib/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:./lib/CMSIS/Include/core_cmInstr.h **** 
 259:./lib/CMSIS/Include/core_cmInstr.h **** 
 260:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:./lib/CMSIS/Include/core_cmInstr.h **** 
 262:./lib/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:./lib/CMSIS/Include/core_cmInstr.h **** 
 264:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:./lib/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:./lib/CMSIS/Include/core_cmInstr.h ****  */
 268:./lib/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:./lib/CMSIS/Include/core_cmInstr.h **** 
 270:./lib/CMSIS/Include/core_cmInstr.h **** 
 271:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:./lib/CMSIS/Include/core_cmInstr.h **** 
 273:./lib/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:./lib/CMSIS/Include/core_cmInstr.h **** 
 275:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:./lib/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:./lib/CMSIS/Include/core_cmInstr.h ****  */
 279:./lib/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:./lib/CMSIS/Include/core_cmInstr.h **** 
 281:./lib/CMSIS/Include/core_cmInstr.h **** 
 282:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:./lib/CMSIS/Include/core_cmInstr.h **** 
 284:./lib/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:./lib/CMSIS/Include/core_cmInstr.h **** 
 286:./lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:./lib/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:./lib/CMSIS/Include/core_cmInstr.h ****  */
 289:./lib/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:./lib/CMSIS/Include/core_cmInstr.h **** 
 291:./lib/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:./lib/CMSIS/Include/core_cmInstr.h **** 
 293:./lib/CMSIS/Include/core_cmInstr.h **** 
 294:./lib/CMSIS/Include/core_cmInstr.h **** 
 295:./lib/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:./lib/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:./lib/CMSIS/Include/core_cmInstr.h **** 
 298:./lib/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:./lib/CMSIS/Include/core_cmInstr.h **** 
 300:./lib/CMSIS/Include/core_cmInstr.h **** 
 301:./lib/CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:./lib/CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:./lib/CMSIS/Include/core_cmInstr.h **** 
 304:./lib/CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:./lib/CMSIS/Include/core_cmInstr.h **** 
 306:./lib/CMSIS/Include/core_cmInstr.h **** 
 307:./lib/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:./lib/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:./lib/CMSIS/Include/core_cmInstr.h **** 
 310:./lib/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:./lib/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:./lib/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:./lib/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:./lib/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:./lib/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:./lib/CMSIS/Include/core_cmInstr.h **** #else
 317:./lib/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:./lib/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:./lib/CMSIS/Include/core_cmInstr.h **** #endif
 320:./lib/CMSIS/Include/core_cmInstr.h **** 
 321:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:./lib/CMSIS/Include/core_cmInstr.h **** 
 323:./lib/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:./lib/CMSIS/Include/core_cmInstr.h ****  */
 325:./lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:./lib/CMSIS/Include/core_cmInstr.h **** {
 327:./lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:./lib/CMSIS/Include/core_cmInstr.h **** }
 329:./lib/CMSIS/Include/core_cmInstr.h **** 
 330:./lib/CMSIS/Include/core_cmInstr.h **** 
 331:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:./lib/CMSIS/Include/core_cmInstr.h **** 
 333:./lib/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:./lib/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:./lib/CMSIS/Include/core_cmInstr.h ****  */
 336:./lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:./lib/CMSIS/Include/core_cmInstr.h **** {
 338:./lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 202              		.loc 2 338 0
 203              	@ 338 "./lib/CMSIS/Include/core_cmInstr.h" 1
 204 001a 30BF     		wfi
 205              	@ 0 "" 2
 206              		.thumb
 207 001c 00E0     		b	.L16
 208              	.L15:
 209              	.LBE9:
 210              	.LBE8:
 211              	.LBB10:
 212              	.LBB11:
 339:./lib/CMSIS/Include/core_cmInstr.h **** }
 340:./lib/CMSIS/Include/core_cmInstr.h **** 
 341:./lib/CMSIS/Include/core_cmInstr.h **** 
 342:./lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:./lib/CMSIS/Include/core_cmInstr.h **** 
 344:./lib/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:./lib/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:./lib/CMSIS/Include/core_cmInstr.h ****  */
 347:./lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:./lib/CMSIS/Include/core_cmInstr.h **** {
 349:./lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 213              		.loc 2 349 0
 214              	@ 349 "./lib/CMSIS/Include/core_cmInstr.h" 1
 215 001e 20BF     		wfe
 216              	@ 0 "" 2
 217              		.thumb
 218              	.L16:
 219              	.LBE11:
 220              	.LBE10:
 223:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {   
 224:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Interrupt */
 225:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFI();
 226:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 227:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 228:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 229:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Event */
 230:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFE();
 231:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 232:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 233:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 234:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 221              		.loc 1 234 0
 222 0020 0169     		ldr	r1, [r0, #16]
 223              	.LVL17:
 224 0022 21F00403 		bic	r3, r1, #4
 225 0026 0361     		str	r3, [r0, #16]
 226 0028 7047     		bx	lr
 227              	.L19:
 228 002a 00BF     		.align	2
 229              	.L18:
 230 002c 00700040 		.word	1073770496
 231 0030 00ED00E0 		.word	-536810240
 232              		.cfi_endproc
 233              	.LFE61:
 235              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 236              		.align	1
 237              		.global	PWR_EnterSTANDBYMode
 238              		.thumb
 239              		.thumb_func
 241              	PWR_EnterSTANDBYMode:
 242              	.LFB62:
 235:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 236:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 237:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 238:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STANDBY mode.
 239:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 240:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 241:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 242:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 243:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 243              		.loc 1 243 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 244:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear Wake-up flag */
 245:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 248              		.loc 1 245 0
 249 0000 074B     		ldr	r3, .L21
 250 0002 1A68     		ldr	r2, [r3, #0]
 251 0004 42F00400 		orr	r0, r2, #4
 252 0008 1860     		str	r0, [r3, #0]
 246:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STANDBY mode */
 247:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 253              		.loc 1 247 0
 254 000a 1968     		ldr	r1, [r3, #0]
 255 000c 41F00202 		orr	r2, r1, #2
 256 0010 1A60     		str	r2, [r3, #0]
 248:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 249:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 257              		.loc 1 249 0
 258 0012 044B     		ldr	r3, .L21+4
 259 0014 1869     		ldr	r0, [r3, #16]
 260 0016 40F00401 		orr	r1, r0, #4
 261 001a 1961     		str	r1, [r3, #16]
 262              	.LBB12:
 263              	.LBB13:
 338:./lib/CMSIS/Include/core_cmInstr.h **** }
 264              		.loc 2 338 0
 265              	@ 338 "./lib/CMSIS/Include/core_cmInstr.h" 1
 266 001c 30BF     		wfi
 267              	@ 0 "" 2
 268              		.thumb
 269 001e 7047     		bx	lr
 270              	.L22:
 271              		.align	2
 272              	.L21:
 273 0020 00700040 		.word	1073770496
 274 0024 00ED00E0 		.word	-536810240
 275              	.LBE13:
 276              	.LBE12:
 277              		.cfi_endproc
 278              	.LFE62:
 280              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 281              		.align	1
 282              		.global	PWR_GetFlagStatus
 283              		.thumb
 284              		.thumb_func
 286              	PWR_GetFlagStatus:
 287              	.LFB63:
 250:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* This option is used to ensure that store operations are completed */
 251:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #if defined ( __CC_ARM   )
 252:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __force_stores();
 253:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #endif
 254:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Request Wait For Interrupt */
 255:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __WFI();
 256:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 257:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 258:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 259:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 260:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 261:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 262:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 263:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 264:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_PVDO: PVD Output
 265:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 266:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 267:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 268:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 288              		.loc 1 268 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293              	.LVL18:
 294              	.LVL19:
 269:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   FlagStatus bitstatus = RESET;
 270:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 271:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 272:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 273:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 295              		.loc 1 273 0
 296 0000 034B     		ldr	r3, .L24
 297 0002 5968     		ldr	r1, [r3, #4]
 298              	.LVL20:
 299 0004 0842     		tst	r0, r1
 274:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 275:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = SET;
 276:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 277:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 278:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 279:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = RESET;
 280:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 281:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Return the flag status */
 282:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   return bitstatus;
 283:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 300              		.loc 1 283 0
 301 0006 0CBF     		ite	eq
 302 0008 0020     		moveq	r0, #0
 303 000a 0120     		movne	r0, #1
 304              	.LVL21:
 305 000c 7047     		bx	lr
 306              	.L25:
 307 000e 00BF     		.align	2
 308              	.L24:
 309 0010 00700040 		.word	1073770496
 310              		.cfi_endproc
 311              	.LFE63:
 313              		.section	.text.PWR_ClearFlag,"ax",%progbits
 314              		.align	1
 315              		.global	PWR_ClearFlag
 316              		.thumb
 317              		.thumb_func
 319              	PWR_ClearFlag:
 320              	.LFB64:
 284:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 285:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 286:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 287:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 288:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 289:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 290:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 291:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 292:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 293:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 294:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 321              		.loc 1 294 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326              	.LVL22:
 295:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 296:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 297:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****          
 298:lib/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 327              		.loc 1 298 0
 328 0000 024B     		ldr	r3, .L27
 329 0002 1A68     		ldr	r2, [r3, #0]
 330 0004 42EA8000 		orr	r0, r2, r0, lsl #2
 331              	.LVL23:
 332 0008 1860     		str	r0, [r3, #0]
 333 000a 7047     		bx	lr
 334              	.L28:
 335              		.align	2
 336              	.L27:
 337 000c 00700040 		.word	1073770496
 338              		.cfi_endproc
 339              	.LFE64:
 341              		.text
 342              	.Letext0:
 343              		.file 3 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 344              		.file 4 "./lib/CMSIS/Include/core_cm3.h"
 345              		.file 5 "./lib/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 346              		.file 6 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_pwr.c
  R:\TEMP\ccuFJVTl.s:19     .text.PWR_DeInit:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:24     .text.PWR_DeInit:0000000000000000 PWR_DeInit
  R:\TEMP\ccuFJVTl.s:53     .text.PWR_BackupAccessCmd:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:58     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
  R:\TEMP\ccuFJVTl.s:73     .text.PWR_BackupAccessCmd:0000000000000008 $d
  R:\TEMP\ccuFJVTl.s:78     .text.PWR_PVDCmd:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:83     .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
  R:\TEMP\ccuFJVTl.s:98     .text.PWR_PVDCmd:0000000000000008 $d
  R:\TEMP\ccuFJVTl.s:103    .text.PWR_PVDLevelConfig:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:108    .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
  R:\TEMP\ccuFJVTl.s:133    .text.PWR_PVDLevelConfig:0000000000000010 $d
  R:\TEMP\ccuFJVTl.s:138    .text.PWR_WakeUpPinCmd:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:143    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
  R:\TEMP\ccuFJVTl.s:158    .text.PWR_WakeUpPinCmd:0000000000000008 $d
  R:\TEMP\ccuFJVTl.s:163    .text.PWR_EnterSTOPMode:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:168    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
  R:\TEMP\ccuFJVTl.s:230    .text.PWR_EnterSTOPMode:000000000000002c $d
  R:\TEMP\ccuFJVTl.s:236    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:241    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
  R:\TEMP\ccuFJVTl.s:273    .text.PWR_EnterSTANDBYMode:0000000000000020 $d
  R:\TEMP\ccuFJVTl.s:281    .text.PWR_GetFlagStatus:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:286    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
  R:\TEMP\ccuFJVTl.s:309    .text.PWR_GetFlagStatus:0000000000000010 $d
  R:\TEMP\ccuFJVTl.s:314    .text.PWR_ClearFlag:0000000000000000 $t
  R:\TEMP\ccuFJVTl.s:319    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
  R:\TEMP\ccuFJVTl.s:337    .text.PWR_ClearFlag:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
