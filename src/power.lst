   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"power.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.GetVbat,"ax",%progbits
  19              		.align	1
  20              		.global	GetVbat
  21              		.thumb
  22              		.thumb_func
  24              	GetVbat:
  25              	.LFB60:
  26              		.file 1 "src/power.c"
   1:src/power.c   **** /********************************************************************************/
   2:src/power.c   **** /*!
   3:src/power.c   **** 	@file			power.c
   4:src/power.c   **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:src/power.c   ****     @version        2.00
   6:src/power.c   ****     @date           2011.03.10
   7:src/power.c   **** 	@brief          Power Control and Battery Supervisor on STM32Primer2.
   8:src/power.c   **** 
   9:src/power.c   ****     @section HISTORY
  10:src/power.c   **** 		2009.12.26	V0.02	See Update.txt
  11:src/power.c   **** 		2011.03.10	V2.00	C++ Ready.
  12:src/power.c   **** 
  13:src/power.c   ****     @section LICENSE
  14:src/power.c   **** 		BSD License. See Copyright.txt
  15:src/power.c   **** */
  16:src/power.c   **** /********************************************************************************/
  17:src/power.c   **** 
  18:src/power.c   **** /* Includes ------------------------------------------------------------------*/
  19:src/power.c   **** #include "stm32f10x.h"
  20:src/power.c   **** #include "hw_config.h"
  21:src/power.c   **** /* include bitmap */
  22:src/power.c   **** 
  23:src/power.c   **** /* Defines -------------------------------------------------------------------*/
  24:src/power.c   **** 
  25:src/power.c   **** /* Variables -----------------------------------------------------------------*/
  26:src/power.c   **** __IO uint32_t BatState = BAT_MIDDLE;
  27:src/power.c   **** 
  28:src/power.c   **** /* Constants -----------------------------------------------------------------*/
  29:src/power.c   **** 
  30:src/power.c   **** /* Function prototypes -------------------------------------------------------*/
  31:src/power.c   **** static void ShutKey_Chk(void);
  32:src/power.c   **** static void ShutVbat_Chk(void);
  33:src/power.c   **** 
  34:src/power.c   **** /* Functions -----------------------------------------------------------------*/
  35:src/power.c   **** 
  36:src/power.c   **** /**************************************************************************/
  37:src/power.c   **** /*! 
  38:src/power.c   ****     @brief  STM32 Primer2 Power managements.
  39:src/power.c   **** 	@param  None.
  40:src/power.c   ****     @retval None.
  41:src/power.c   **** */
  42:src/power.c   **** /**************************************************************************/
  43:src/power.c   **** void PWR_Mgn(void)
  44:src/power.c   **** {
  45:src/power.c   **** 	ShutKey_Chk();
  46:src/power.c   **** 	ShutVbat_Chk();
  47:src/power.c   **** }
  48:src/power.c   **** 
  49:src/power.c   **** 
  50:src/power.c   **** /**************************************************************************/
  51:src/power.c   **** /*! 
  52:src/power.c   ****     @brief  A Piece of STM32 Primer2 Power managements.
  53:src/power.c   **** 	@param  None.
  54:src/power.c   ****     @retval None.
  55:src/power.c   **** */
  56:src/power.c   **** /**************************************************************************/
  57:src/power.c   **** static void ShutKey_Chk(void)
  58:src/power.c   **** {
  59:src/power.c   **** 	/* execute 1mSec every in Systick Timer */
  60:src/power.c   **** 	static uint32_t shutcounts;
  61:src/power.c   **** 
  62:src/power.c   **** 	if(GPIO_ReadInputDataBit(GPIOA, KEY_CT)==1)
  63:src/power.c   **** 		{
  64:src/power.c   **** 			/* Key Pressed sequencery 3000mSec */
  65:src/power.c   **** 			if(++shutcounts > SHUT_TIME)
  66:src/power.c   **** 				{
  67:src/power.c   **** 					ShutFileClose();
  68:src/power.c   **** 					PWR_OFF();
  69:src/power.c   **** 					for(;;);
  70:src/power.c   **** 				}
  71:src/power.c   **** 		}
  72:src/power.c   **** 	else
  73:src/power.c   **** 		{
  74:src/power.c   **** 			shutcounts = 0;
  75:src/power.c   **** 		}
  76:src/power.c   **** }
  77:src/power.c   **** 
  78:src/power.c   **** 
  79:src/power.c   **** /**************************************************************************/
  80:src/power.c   **** /*! 
  81:src/power.c   ****     @brief  A Piece of STM32 Primer2 Power managements.
  82:src/power.c   **** 	@param  None.
  83:src/power.c   ****     @retval None.
  84:src/power.c   **** */
  85:src/power.c   **** /**************************************************************************/
  86:src/power.c   **** static void ShutVbat_Chk(void)
  87:src/power.c   **** {
  88:src/power.c   **** 	/* execute 1mSec every in Systick Timer */
  89:src/power.c   **** 	static uint32_t vbatcounts;
  90:src/power.c   **** 	static uint32_t vbatlow;
  91:src/power.c   **** 	static uint32_t vbatbabyflag=15;
  92:src/power.c   **** 	static uint32_t CurrentVbat;
  93:src/power.c   **** 	
  94:src/power.c   **** 	if(vbatbabyflag)
  95:src/power.c   **** 	{
  96:src/power.c   **** 		CurrentVbat = GetVbat();
  97:src/power.c   **** 		vbatbabyflag--;
  98:src/power.c   **** 	}
  99:src/power.c   **** 	
 100:src/power.c   **** 	/* execute every 1Sec (about 1024mSec) */
 101:src/power.c   **** 	if(++vbatcounts > 1000 ){
 102:src/power.c   **** 		vbatcounts =0;
 103:src/power.c   **** 		CurrentVbat =  ((CurrentVbat * 3) + (GetVbat()) ) / 4;
 104:src/power.c   **** 		
 105:src/power.c   **** 		if(CurrentVbat > NO_BAT_VOLTAGE)
 106:src/power.c   **** 		{
 107:src/power.c   **** 			if(CurrentVbat < MID_BAT_VOLTAGE) 	{BatState = BAT_LOW;}
 108:src/power.c   **** 			else 								{BatState = BAT_MIDDLE;}
 109:src/power.c   **** 			
 110:src/power.c   **** 			if(CurrentVbat < LIPO_LOWER_VOLT)
 111:src/power.c   **** 			{
 112:src/power.c   **** 				if(++vbatlow > LOWER_FILT) 
 113:src/power.c   **** 				{
 114:src/power.c   **** 					ShutFileClose();
 115:src/power.c   **** 					PWR_OFF();
 116:src/power.c   **** 					for(;;);
 117:src/power.c   **** 				}
 118:src/power.c   **** 			}
 119:src/power.c   **** 			else
 120:src/power.c   **** 			{
 121:src/power.c   **** 				vbatlow =0;
 122:src/power.c   **** 			}
 123:src/power.c   **** 		}
 124:src/power.c   **** 		else
 125:src/power.c   **** 		{
 126:src/power.c   **** 				vbatlow =0;
 127:src/power.c   **** 		}
 128:src/power.c   **** 	}
 129:src/power.c   **** }
 130:src/power.c   **** 
 131:src/power.c   **** 
 132:src/power.c   **** /**************************************************************************/
 133:src/power.c   **** /*! 
 134:src/power.c   ****     @brief  A Piece of STM32 Primer2 Power managements.
 135:src/power.c   **** 	@param  None.
 136:src/power.c   ****     @retval Singned int value at milliVolt order.
 137:src/power.c   **** */
 138:src/power.c   **** /**************************************************************************/
 139:src/power.c   **** int16_t GetVbat()
 140:src/power.c   **** {
  27              		.loc 1 140 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              		.loc 1 140 0
  34 0000 0023     		movs	r3, #0
 141:src/power.c   ****     uint16_t vbat;
 142:src/power.c   **** 	static int16_t VBat; /* signed 16bit int */
 143:src/power.c   ****     int i;
 144:src/power.c   **** 
 145:src/power.c   ****     vbat = 0;
  35              		.loc 1 145 0
  36 0002 1A46     		mov	r2, r3
  37              	.LVL1:
  38              	.L2:
 146:src/power.c   ****     for ( i = 0; i < ADC_NB_SAMPLES; i++)
 147:src/power.c   ****         {
 148:src/power.c   ****         vbat += ADC_RegularConvertedValueTab[0 + i*ADC_NB_CHANNELS];
  39              		.loc 1 148 0 discriminator 2
  40 0004 0F49     		ldr	r1, .L8
  41 0006 31F81300 		ldrh	r0, [r1, r3, lsl #1]
  42 000a 1218     		adds	r2, r2, r0
  43 000c 92B2     		uxth	r2, r2
  44              	.LVL2:
  45 000e 0533     		adds	r3, r3, #5
 146:src/power.c   ****     for ( i = 0; i < ADC_NB_SAMPLES; i++)
  46              		.loc 1 146 0 discriminator 2
  47 0010 322B     		cmp	r3, #50
  48 0012 F7D1     		bne	.L2
 149:src/power.c   ****         }
 150:src/power.c   ****     vbat = vbat / ADC_NB_SAMPLES;
  49              		.loc 1 150 0
  50 0014 0A21     		movs	r1, #10
  51 0016 B2FBF1F0 		udiv	r0, r2, r1
  52              	.LVL3:
 151:src/power.c   **** 
 152:src/power.c   ****     vbat = vbat & 0xFFF;
  53              		.loc 1 152 0
  54 001a 0205     		lsls	r2, r0, #20
 153:src/power.c   ****     vbat = ( vbat * VDD_VOLTAGE_MV ) / 0x1000;
  55              		.loc 1 153 0
  56 001c 110D     		lsrs	r1, r2, #20
  57 001e 40F6C623 		movw	r3, #2758
  58 0022 5943     		muls	r1, r3, r1
  59 0024 C1F30F30 		ubfx	r0, r1, #12, #16
  60              	.LVL4:
 154:src/power.c   **** 	
 155:src/power.c   **** 	/* Divider bridge  Vbat <-> 1M -<--|-->- 1M <-> Gnd,@STM32 Primer2. */
 156:src/power.c   ****     vbat *= 2;
  61              		.loc 1 156 0
  62 0028 4200     		lsls	r2, r0, #1
  63 002a 92B2     		uxth	r2, r2
  64              	.LVL5:
 157:src/power.c   **** 
 158:src/power.c   ****     if ( VBat == -1)
  65              		.loc 1 158 0
  66 002c 064B     		ldr	r3, .L8+4
  67 002e B3F90010 		ldrsh	r1, [r3, #0]
  68 0032 481C     		adds	r0, r1, #1
  69 0034 02D0     		beq	.L6
  70              	.L3:
 159:src/power.c   ****         {
 160:src/power.c   ****         VBat = vbat;
 161:src/power.c   ****         }
 162:src/power.c   ****     else
 163:src/power.c   ****         {
 164:src/power.c   ****         VBat = (VBat>>1) + (vbat>>1);
  71              		.loc 1 164 0
  72 0036 4810     		asrs	r0, r1, #1
  73 0038 00EB5202 		add	r2, r0, r2, lsr #1
  74              	.LVL6:
  75              	.L6:
  76 003c 1A80     		strh	r2, [r3, #0]	@ movhi
 165:src/power.c   ****         }
 166:src/power.c   ****     return VBat;
 167:src/power.c   **** }
  77              		.loc 1 167 0
  78 003e B3F90000 		ldrsh	r0, [r3, #0]
  79 0042 7047     		bx	lr
  80              	.L9:
  81              		.align	2
  82              	.L8:
  83 0044 00000000 		.word	ADC_RegularConvertedValueTab
  84 0048 00000000 		.word	.LANCHOR0
  85              		.cfi_endproc
  86              	.LFE60:
  88              		.section	.text.PWR_Mgn,"ax",%progbits
  89              		.align	1
  90              		.global	PWR_Mgn
  91              		.thumb
  92              		.thumb_func
  94              	PWR_Mgn:
  95              	.LFB57:
  44:src/power.c   **** 	ShutKey_Chk();
  96              		.loc 1 44 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100 0000 70B5     		push	{r4, r5, r6, lr}
 101              	.LCFI0:
 102              		.cfi_def_cfa_offset 16
 103              		.cfi_offset 4, -16
 104              		.cfi_offset 5, -12
 105              		.cfi_offset 6, -8
 106              		.cfi_offset 14, -4
 107              	.LBB6:
 108              	.LBB7:
  62:src/power.c   **** 		{
 109              		.loc 1 62 0
 110 0002 2C48     		ldr	r0, .L26
 111 0004 4FF48071 		mov	r1, #256
 112 0008 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 113              	.LVL7:
 114 000c 0128     		cmp	r0, #1
 115 000e 2A4B     		ldr	r3, .L26+4
 116 0010 0ED1     		bne	.L11
  65:src/power.c   **** 				{
 117              		.loc 1 65 0
 118 0012 1868     		ldr	r0, [r3, #0]
 119 0014 411C     		adds	r1, r0, #1
 120 0016 1960     		str	r1, [r3, #0]
 121 0018 40F6B834 		movw	r4, #3000
 122 001c A142     		cmp	r1, r4
 123 001e 09D9     		bls	.L12
  67:src/power.c   **** 					PWR_OFF();
 124              		.loc 1 67 0
 125 0020 FFF7FEFF 		bl	ShutFileClose
 126              	.LVL8:
  68:src/power.c   **** 					for(;;);
 127              		.loc 1 68 0
 128 0024 2548     		ldr	r0, .L26+8
 129 0026 4FF40051 		mov	r1, #8192
 130 002a FFF7FEFF 		bl	GPIO_SetBits
 131              	.LVL9:
 132              	.L13:
 133 002e FEE7     		b	.L13
 134              	.L11:
  74:src/power.c   **** 		}
 135              		.loc 1 74 0
 136 0030 0022     		movs	r2, #0
 137 0032 1A60     		str	r2, [r3, #0]
 138              	.L12:
 139              	.LBE7:
 140              	.LBE6:
 141              	.LBB8:
 142              	.LBB9:
  94:src/power.c   **** 	{
 143              		.loc 1 94 0
 144 0034 224C     		ldr	r4, .L26+12
 145 0036 2568     		ldr	r5, [r4, #0]
 146 0038 2DB1     		cbz	r5, .L14
  96:src/power.c   **** 		vbatbabyflag--;
 147              		.loc 1 96 0
 148 003a FFF7FEFF 		bl	GetVbat
 149              	.LVL10:
 150 003e 214B     		ldr	r3, .L26+16
 151 0040 1860     		str	r0, [r3, #0]
  97:src/power.c   **** 	}
 152              		.loc 1 97 0
 153 0042 013D     		subs	r5, r5, #1
 154 0044 2560     		str	r5, [r4, #0]
 155              	.L14:
 101:src/power.c   **** 		vbatcounts =0;
 156              		.loc 1 101 0
 157 0046 2048     		ldr	r0, .L26+20
 158 0048 0268     		ldr	r2, [r0, #0]
 159 004a 511C     		adds	r1, r2, #1
 160 004c 0160     		str	r1, [r0, #0]
 161 004e B1F57A7F 		cmp	r1, #1000
 162 0052 2ED9     		bls	.L10
 102:src/power.c   **** 		CurrentVbat =  ((CurrentVbat * 3) + (GetVbat()) ) / 4;
 163              		.loc 1 102 0
 164 0054 0024     		movs	r4, #0
 165 0056 0460     		str	r4, [r0, #0]
 103:src/power.c   **** 		
 166              		.loc 1 103 0
 167 0058 1A4D     		ldr	r5, .L26+16
 168 005a 2B68     		ldr	r3, [r5, #0]
 169 005c 0326     		movs	r6, #3
 170 005e 5E43     		muls	r6, r3, r6
 171 0060 FFF7FEFF 		bl	GetVbat
 172              	.LVL11:
 173 0064 8019     		adds	r0, r0, r6
 174 0066 8008     		lsrs	r0, r0, #2
 175 0068 2860     		str	r0, [r5, #0]
 105:src/power.c   **** 		{
 176              		.loc 1 105 0
 177 006a 40F6B832 		movw	r2, #3000
 178 006e 9042     		cmp	r0, r2
 179 0070 164B     		ldr	r3, .L26+24
 180 0072 1DD9     		bls	.L17
 107:src/power.c   **** 			else 								{BatState = BAT_MIDDLE;}
 181              		.loc 1 107 0
 182 0074 B0F5616F 		cmp	r0, #3600
 183 0078 154A     		ldr	r2, .L26+28
 184 007a 06D2     		bcs	.L18
 185 007c 0221     		movs	r1, #2
 186 007e 1160     		str	r1, [r2, #0]
 110:src/power.c   **** 			{
 187              		.loc 1 110 0
 188 0080 40F62E52 		movw	r2, #3374
 189 0084 9042     		cmp	r0, r2
 190 0086 03D9     		bls	.L19
 191 0088 0FE0     		b	.L20
 192              	.L18:
 108:src/power.c   **** 			
 193              		.loc 1 108 0
 194 008a 0121     		movs	r1, #1
 195 008c 1160     		str	r1, [r2, #0]
 196 008e 0CE0     		b	.L20
 197              	.L19:
 112:src/power.c   **** 				{
 198              		.loc 1 112 0
 199 0090 1968     		ldr	r1, [r3, #0]
 200 0092 4A1C     		adds	r2, r1, #1
 201 0094 1A60     		str	r2, [r3, #0]
 202 0096 0C2A     		cmp	r2, #12
 203 0098 0BD9     		bls	.L10
 114:src/power.c   **** 					PWR_OFF();
 204              		.loc 1 114 0
 205 009a FFF7FEFF 		bl	ShutFileClose
 206              	.LVL12:
 115:src/power.c   **** 					for(;;);
 207              		.loc 1 115 0
 208 009e 0748     		ldr	r0, .L26+8
 209 00a0 4FF40051 		mov	r1, #8192
 210 00a4 FFF7FEFF 		bl	GPIO_SetBits
 211              	.LVL13:
 212              	.L22:
 213 00a8 FEE7     		b	.L22
 214              	.L20:
 121:src/power.c   **** 			}
 215              		.loc 1 121 0
 216 00aa 0020     		movs	r0, #0
 217 00ac 1860     		str	r0, [r3, #0]
 218 00ae 70BD     		pop	{r4, r5, r6, pc}
 219              	.L17:
 126:src/power.c   **** 		}
 220              		.loc 1 126 0
 221 00b0 1C60     		str	r4, [r3, #0]
 222              	.L10:
 223 00b2 70BD     		pop	{r4, r5, r6, pc}
 224              	.L27:
 225              		.align	2
 226              	.L26:
 227 00b4 00080140 		.word	1073809408
 228 00b8 00000000 		.word	.LANCHOR1
 229 00bc 00100140 		.word	1073811456
 230 00c0 00000000 		.word	.LANCHOR2
 231 00c4 00000000 		.word	.LANCHOR3
 232 00c8 00000000 		.word	.LANCHOR4
 233 00cc 00000000 		.word	.LANCHOR6
 234 00d0 00000000 		.word	.LANCHOR5
 235              	.LBE9:
 236              	.LBE8:
 237              		.cfi_endproc
 238              	.LFE57:
 240              		.global	__aeabi_i2d
 241              		.global	__aeabi_ddiv
 242              		.section	.text.GetTemp,"ax",%progbits
 243              		.align	1
 244              		.global	GetTemp
 245              		.thumb
 246              		.thumb_func
 248              	GetTemp:
 249              	.LFB61:
 168:src/power.c   **** 
 169:src/power.c   **** /**************************************************************************/
 170:src/power.c   **** /*! 
 171:src/power.c   ****     @brief  This function is reserved (not in use).
 172:src/power.c   **** 	@param  None.
 173:src/power.c   ****     @retval Degree Celsius.
 174:src/power.c   **** */
 175:src/power.c   **** /**************************************************************************/
 176:src/power.c   **** double GetTemp()
 177:src/power.c   **** {
 250              		.loc 1 177 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 8
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254 0000 07B5     		push	{r0, r1, r2, lr}
 255              	.LCFI1:
 256              		.cfi_def_cfa_offset 16
 257              		.cfi_offset 0, -16
 258              		.cfi_offset 1, -12
 259              		.cfi_offset 2, -8
 260              		.cfi_offset 14, -4
 261              	.LVL14:
 178:src/power.c   ****     s32 temp;
 179:src/power.c   ****     volatile int i;
 180:src/power.c   **** 
 181:src/power.c   ****     // Measure temp
 182:src/power.c   ****     //    s16 *p=&ADC_ConvertedValue[1];     // intent; point to first of x results from same sourc
 183:src/power.c   ****     // will not help reduce mains ripple because conversions are SO FAST!!
 184:src/power.c   ****     // Calculate the mean value
 185:src/power.c   ****     //    temp = (p[0]+p[1]+p[2]+p[3])/4;    // take avg of burst of 4 temp reads. may only help re
 186:src/power.c   ****     // YRT 20081023 : add touchsreen adc channels for Primer2, buffer managed by DMA
 187:src/power.c   **** 
 188:src/power.c   ****     // Calculate the mean value
 189:src/power.c   ****     temp = 0;
 190:src/power.c   ****     for ( i = 0; i < ADC_NB_SAMPLES; i++)
 262              		.loc 1 190 0
 263 0002 0023     		movs	r3, #0
 264 0004 0193     		str	r3, [sp, #4]
 265              	.LVL15:
 266              	.L29:
 267              		.loc 1 190 0 is_stmt 0 discriminator 1
 268 0006 019A     		ldr	r2, [sp, #4]
 269 0008 092A     		cmp	r2, #9
 270 000a 09DC     		bgt	.L31
 271              	.L30:
 191:src/power.c   ****         {
 192:src/power.c   ****         temp += ADC_RegularConvertedValueTab[i];
 272              		.loc 1 192 0 is_stmt 1 discriminator 2
 273 000c 0199     		ldr	r1, [sp, #4]
 274 000e 124A     		ldr	r2, .L32
 275 0010 32F81100 		ldrh	r0, [r2, r1, lsl #1]
 276 0014 81B2     		uxth	r1, r0
 277 0016 5B18     		adds	r3, r3, r1
 278              	.LVL16:
 190:src/power.c   ****         {
 279              		.loc 1 190 0 discriminator 2
 280 0018 019A     		ldr	r2, [sp, #4]
 281 001a 501C     		adds	r0, r2, #1
 282              	.LVL17:
 283 001c 0190     		str	r0, [sp, #4]
 284              	.LVL18:
 285 001e F2E7     		b	.L29
 286              	.L31:
 193:src/power.c   ****         }
 194:src/power.c   ****     temp = temp / ADC_NB_SAMPLES;
 287              		.loc 1 194 0
 288 0020 0A20     		movs	r0, #10
 289 0022 93FBF0F1 		sdiv	r1, r3, r0
 290              	.LVL19:
 195:src/power.c   ****     temp = temp & 0xFFF;
 291              		.loc 1 195 0
 292 0026 0B05     		lsls	r3, r1, #20
 293 0028 1A0D     		lsrs	r2, r3, #20
 196:src/power.c   ****     temp = ( temp * VDD_VOLTAGE_MV ) / 0x1000;  		   //finds mV
 294              		.loc 1 196 0
 295 002a 40F6C620 		movw	r0, #2758
 296 002e 4243     		muls	r2, r0, r2
 297              	.LVL20:
 298 0030 1113     		asrs	r1, r2, #12
 299              	.LVL21:
 197:src/power.c   ****     temp = (((V25_MV-temp)*100000)/AVG_SLOPE_UV)+25000;    //gives approx temp x 1000 degrees C
 300              		.loc 1 197 0
 301 0032 0A4B     		ldr	r3, .L32+4
 302 0034 5943     		muls	r1, r3, r1
 303              	.LVL22:
 304 0036 0A4A     		ldr	r2, .L32+8
 305              	.LVL23:
 306 0038 8918     		adds	r1, r1, r2
 307 003a 40F2BB10 		movw	r0, #443
 308 003e 91FBF0F3 		sdiv	r3, r1, r0
 309              	.LVL24:
 310 0042 03F5C340 		add	r0, r3, #24960
 198:src/power.c   **** 
 199:src/power.c   **** 
 200:src/power.c   ****     return (double)temp/1000;
 311              		.loc 1 200 0
 312 0046 2830     		adds	r0, r0, #40
 313 0048 FFF7FEFF 		bl	__aeabi_i2d
 314              	.LVL25:
 315 004c 0022     		movs	r2, #0
 316 004e 054B     		ldr	r3, .L32+12
 317 0050 FFF7FEFF 		bl	__aeabi_ddiv
 318              	.LVL26:
 201:src/power.c   **** }
 319              		.loc 1 201 0
 320 0054 03B0     		add	sp, sp, #12
 321 0056 00BD     		pop	{pc}
 322              	.L33:
 323              		.align	2
 324              	.L32:
 325 0058 00000000 		.word	ADC_RegularConvertedValueTab
 326 005c 6079FEFF 		.word	-100000
 327 0060 80BF7608 		.word	142000000
 328 0064 00408F40 		.word	1083129856
 329              		.cfi_endproc
 330              	.LFE61:
 332              		.section	.text.PWR_Configuration,"ax",%progbits
 333              		.align	1
 334              		.global	PWR_Configuration
 335              		.thumb
 336              		.thumb_func
 338              	PWR_Configuration:
 339              	.LFB62:
 202:src/power.c   **** 
 203:src/power.c   **** 
 204:src/power.c   **** /**************************************************************************/
 205:src/power.c   **** /*! 
 206:src/power.c   ****     @brief  Configures the SHUTDOWN(PC13) on STM32Primer2.
 207:src/power.c   **** 	@param  None.
 208:src/power.c   ****     @retval None.
 209:src/power.c   **** */
 210:src/power.c   **** /**************************************************************************/
 211:src/power.c   **** void PWR_Configuration(void)
 212:src/power.c   **** {
 340              		.loc 1 212 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 8
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344 0000 07B5     		push	{r0, r1, r2, lr}
 345              	.LCFI2:
 346              		.cfi_def_cfa_offset 16
 347              		.cfi_offset 0, -16
 348              		.cfi_offset 1, -12
 349              		.cfi_offset 2, -8
 350              		.cfi_offset 14, -4
 213:src/power.c   **** 	GPIO_InitTypeDef GPIO_InitStructure;
 214:src/power.c   **** 
 215:src/power.c   **** 	/* Enable GPIO_PWR clock */
 216:src/power.c   **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_PWR, ENABLE);
 351              		.loc 1 216 0
 352 0002 1020     		movs	r0, #16
 353 0004 0121     		movs	r1, #1
 354 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 355              	.LVL27:
 217:src/power.c   **** 	
 218:src/power.c   **** 	/* Configure GPIO for PWR as Output push-pull */
 219:src/power.c   **** 	GPIO_InitStructure.GPIO_Pin 	= SHUTDOWN;
 356              		.loc 1 219 0
 357 000a 4FF40053 		mov	r3, #8192
 358 000e ADF80430 		strh	r3, [sp, #4]	@ movhi
 220:src/power.c   **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_10MHz;
 359              		.loc 1 220 0
 360 0012 0120     		movs	r0, #1
 361 0014 8DF80600 		strb	r0, [sp, #6]
 221:src/power.c   **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
 362              		.loc 1 221 0
 363 0018 1021     		movs	r1, #16
 364 001a 8DF80710 		strb	r1, [sp, #7]
 222:src/power.c   **** 	GPIO_Init(GPIO_PWR, &GPIO_InitStructure);
 365              		.loc 1 222 0
 366 001e 0248     		ldr	r0, .L35
 367 0020 01A9     		add	r1, sp, #4
 368 0022 FFF7FEFF 		bl	GPIO_Init
 369              	.LVL28:
 223:src/power.c   **** }
 370              		.loc 1 223 0
 371 0026 0EBD     		pop	{r1, r2, r3, pc}
 372              	.L36:
 373              		.align	2
 374              	.L35:
 375 0028 00100140 		.word	1073811456
 376              		.cfi_endproc
 377              	.LFE62:
 379              		.global	BatState
 380              		.section	.data.vbatbabyflag.8838,"aw",%progbits
 381              		.align	2
 382              		.set	.LANCHOR2,. + 0
 385              	vbatbabyflag.8838:
 386 0000 0F000000 		.word	15
 387              		.section	.data.BatState,"aw",%progbits
 388              		.align	2
 389              		.set	.LANCHOR5,. + 0
 392              	BatState:
 393 0000 01000000 		.word	1
 394              		.section	.bss.shutcounts.8831,"aw",%nobits
 395              		.align	2
 396              		.set	.LANCHOR1,. + 0
 399              	shutcounts.8831:
 400 0000 00000000 		.space	4
 401              		.section	.bss.vbatlow.8837,"aw",%nobits
 402              		.align	2
 403              		.set	.LANCHOR6,. + 0
 406              	vbatlow.8837:
 407 0000 00000000 		.space	4
 408              		.section	.bss.vbatcounts.8836,"aw",%nobits
 409              		.align	2
 410              		.set	.LANCHOR4,. + 0
 413              	vbatcounts.8836:
 414 0000 00000000 		.space	4
 415              		.section	.bss.VBat.8844,"aw",%nobits
 416              		.align	1
 417              		.set	.LANCHOR0,. + 0
 420              	VBat.8844:
 421 0000 0000     		.space	2
 422              		.section	.bss.CurrentVbat.8839,"aw",%nobits
 423              		.align	2
 424              		.set	.LANCHOR3,. + 0
 427              	CurrentVbat.8839:
 428 0000 00000000 		.space	4
 429              		.text
 430              	.Letext0:
 431              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 432              		.file 3 "./lib/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 433              		.file 4 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 434              		.file 5 "./inc/power.h"
 435              		.file 6 "./lib/CMSIS/Include/core_cm3.h"
 436              		.file 7 "./inc/systick.h"
 437              		.file 8 "./inc/adc_support.h"
 438              		.file 9 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
 439              		.file 10 "./inc/gps_support.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 power.c
  R:\TEMP\ccSWPYHm.s:19     .text.GetVbat:0000000000000000 $t
  R:\TEMP\ccSWPYHm.s:24     .text.GetVbat:0000000000000000 GetVbat
  R:\TEMP\ccSWPYHm.s:83     .text.GetVbat:0000000000000044 $d
  R:\TEMP\ccSWPYHm.s:89     .text.PWR_Mgn:0000000000000000 $t
  R:\TEMP\ccSWPYHm.s:94     .text.PWR_Mgn:0000000000000000 PWR_Mgn
  R:\TEMP\ccSWPYHm.s:227    .text.PWR_Mgn:00000000000000b4 $d
  R:\TEMP\ccSWPYHm.s:243    .text.GetTemp:0000000000000000 $t
  R:\TEMP\ccSWPYHm.s:248    .text.GetTemp:0000000000000000 GetTemp
  R:\TEMP\ccSWPYHm.s:325    .text.GetTemp:0000000000000058 $d
  R:\TEMP\ccSWPYHm.s:333    .text.PWR_Configuration:0000000000000000 $t
  R:\TEMP\ccSWPYHm.s:338    .text.PWR_Configuration:0000000000000000 PWR_Configuration
  R:\TEMP\ccSWPYHm.s:375    .text.PWR_Configuration:0000000000000028 $d
  R:\TEMP\ccSWPYHm.s:392    .data.BatState:0000000000000000 BatState
  R:\TEMP\ccSWPYHm.s:381    .data.vbatbabyflag.8838:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:385    .data.vbatbabyflag.8838:0000000000000000 vbatbabyflag.8838
  R:\TEMP\ccSWPYHm.s:388    .data.BatState:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:395    .bss.shutcounts.8831:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:399    .bss.shutcounts.8831:0000000000000000 shutcounts.8831
  R:\TEMP\ccSWPYHm.s:402    .bss.vbatlow.8837:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:406    .bss.vbatlow.8837:0000000000000000 vbatlow.8837
  R:\TEMP\ccSWPYHm.s:409    .bss.vbatcounts.8836:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:413    .bss.vbatcounts.8836:0000000000000000 vbatcounts.8836
  R:\TEMP\ccSWPYHm.s:416    .bss.VBat.8844:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:420    .bss.VBat.8844:0000000000000000 VBat.8844
  R:\TEMP\ccSWPYHm.s:423    .bss.CurrentVbat.8839:0000000000000000 $d
  R:\TEMP\ccSWPYHm.s:427    .bss.CurrentVbat.8839:0000000000000000 CurrentVbat.8839
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_RegularConvertedValueTab
GPIO_ReadInputDataBit
ShutFileClose
GPIO_SetBits
__aeabi_i2d
__aeabi_ddiv
RCC_APB2PeriphClockCmd
GPIO_Init
