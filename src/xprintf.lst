   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"xprintf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.xputc,"ax",%progbits
  19              		.align	1
  20              		.global	xputc
  21              		.thumb
  22              		.thumb_func
  24              	xputc:
  25              	.LFB0:
  26              		.file 1 "src/xprintf.c"
   1:src/xprintf.c **** /*------------------------------------------------------------------------/
   2:src/xprintf.c **** /  Universal string handler for user console interface
   3:src/xprintf.c **** /-------------------------------------------------------------------------/
   4:src/xprintf.c **** /
   5:src/xprintf.c **** /  Copyright (C) 2011, ChaN, all right reserved.
   6:src/xprintf.c **** /
   7:src/xprintf.c **** / * This software is a free software and there is NO WARRANTY.
   8:src/xprintf.c **** / * No restriction on use. You can use, modify and redistribute it for
   9:src/xprintf.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  10:src/xprintf.c **** / * Redistributions of source code must retain the above copyright notice.
  11:src/xprintf.c **** /
  12:src/xprintf.c **** /-------------------------------------------------------------------------*/
  13:src/xprintf.c **** 
  14:src/xprintf.c **** #include "xprintf.h"
  15:src/xprintf.c **** 
  16:src/xprintf.c **** 
  17:src/xprintf.c **** #if _USE_XFUNC_OUT
  18:src/xprintf.c **** #include <stdarg.h>
  19:src/xprintf.c **** void (*xfunc_out)(unsigned char);	/* Pointer to the output stream */
  20:src/xprintf.c **** static char *outptr;
  21:src/xprintf.c **** 
  22:src/xprintf.c **** /*----------------------------------------------*/
  23:src/xprintf.c **** /* Put a character                              */
  24:src/xprintf.c **** /*----------------------------------------------*/
  25:src/xprintf.c **** 
  26:src/xprintf.c **** void xputc (char c)
  27:src/xprintf.c **** {
  27              		.loc 1 27 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
  28:src/xprintf.c **** 	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
  38              		.loc 1 28 0
  39 0004 0A28     		cmp	r0, #10
  40 0006 02D1     		bne	.L2
  41              		.loc 1 28 0 is_stmt 0 discriminator 1
  42 0008 0D20     		movs	r0, #13
  43              	.LVL1:
  44 000a FFF7FEFF 		bl	xputc
  45              	.LVL2:
  46              	.L2:
  29:src/xprintf.c **** 
  30:src/xprintf.c **** 	if (outptr) {
  47              		.loc 1 30 0 is_stmt 1
  48 000e 064A     		ldr	r2, .L9
  49 0010 1368     		ldr	r3, [r2, #0]
  50 0012 1BB1     		cbz	r3, .L3
  31:src/xprintf.c **** 		*outptr++ = (unsigned char)c;
  51              		.loc 1 31 0
  52 0014 03F8014B 		strb	r4, [r3], #1
  53 0018 1360     		str	r3, [r2, #0]
  32:src/xprintf.c **** 		return;
  54              		.loc 1 32 0
  55 001a 10BD     		pop	{r4, pc}
  56              	.L3:
  57              	.LVL3:
  58              	.LBB4:
  59              	.LBB5:
  33:src/xprintf.c **** 	}
  34:src/xprintf.c **** 
  35:src/xprintf.c **** 	if (xfunc_out) xfunc_out((unsigned char)c);
  60              		.loc 1 35 0
  61 001c 0348     		ldr	r0, .L9+4
  62 001e 0168     		ldr	r1, [r0, #0]
  63 0020 09B1     		cbz	r1, .L1
  64 0022 E0B2     		uxtb	r0, r4
  65 0024 8847     		blx	r1
  66              	.LVL4:
  67              	.L1:
  68 0026 10BD     		pop	{r4, pc}
  69              	.L10:
  70              		.align	2
  71              	.L9:
  72 0028 00000000 		.word	.LANCHOR0
  73 002c 00000000 		.word	.LANCHOR1
  74              	.LBE5:
  75              	.LBE4:
  76              		.cfi_endproc
  77              	.LFE0:
  79              		.section	.text.xputs,"ax",%progbits
  80              		.align	1
  81              		.global	xputs
  82              		.thumb
  83              		.thumb_func
  85              	xputs:
  86              	.LFB1:
  36:src/xprintf.c **** }
  37:src/xprintf.c **** 
  38:src/xprintf.c **** 
  39:src/xprintf.c **** 
  40:src/xprintf.c **** /*----------------------------------------------*/
  41:src/xprintf.c **** /* Put a null-terminated string                 */
  42:src/xprintf.c **** /*----------------------------------------------*/
  43:src/xprintf.c **** 
  44:src/xprintf.c **** void xputs (					/* Put a string to the default device */
  45:src/xprintf.c **** 	const char* str				/* Pointer to the string */
  46:src/xprintf.c **** )
  47:src/xprintf.c **** {
  87              		.loc 1 47 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              	.LVL5:
  92 0000 10B5     		push	{r4, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 4, -8
  96              		.cfi_offset 14, -4
  44:src/xprintf.c **** void xputs (					/* Put a string to the default device */
  97              		.loc 1 44 0
  98 0002 441E     		subs	r4, r0, #1
  99              	.LVL6:
 100              	.L12:
  48:src/xprintf.c **** 	while (*str)
 101              		.loc 1 48 0 discriminator 1
 102 0004 14F8010F 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 103 0008 18B1     		cbz	r0, .L14
 104              	.L13:
  49:src/xprintf.c **** 		xputc(*str++);
 105              		.loc 1 49 0
 106 000a 40B2     		sxtb	r0, r0
 107 000c FFF7FEFF 		bl	xputc
 108              	.LVL7:
 109 0010 F8E7     		b	.L12
 110              	.L14:
  50:src/xprintf.c **** }
 111              		.loc 1 50 0
 112 0012 10BD     		pop	{r4, pc}
 113              		.cfi_endproc
 114              	.LFE1:
 116              		.section	.text.xvprintf,"ax",%progbits
 117              		.align	1
 118              		.thumb
 119              		.thumb_func
 121              	xvprintf:
 122              	.LFB3:
  51:src/xprintf.c **** 
  52:src/xprintf.c **** 
  53:src/xprintf.c **** void xfputs (					/* Put a string to the specified device */
  54:src/xprintf.c **** 	void(*func)(unsigned char),	/* Pointer to the output function */
  55:src/xprintf.c **** 	const char*	str				/* Pointer to the string */
  56:src/xprintf.c **** )
  57:src/xprintf.c **** {
  58:src/xprintf.c **** 	void (*pf)(unsigned char);
  59:src/xprintf.c **** 
  60:src/xprintf.c **** 
  61:src/xprintf.c **** 	pf = xfunc_out;		/* Save current output device */
  62:src/xprintf.c **** 	xfunc_out = func;	/* Switch output to specified device */
  63:src/xprintf.c **** 	while (*str)		/* Put the string */
  64:src/xprintf.c **** 		xputc(*str++);
  65:src/xprintf.c **** 	xfunc_out = pf;		/* Restore output device */
  66:src/xprintf.c **** }
  67:src/xprintf.c **** 
  68:src/xprintf.c **** 
  69:src/xprintf.c **** 
  70:src/xprintf.c **** /*----------------------------------------------*/
  71:src/xprintf.c **** /* Formatted string output                      */
  72:src/xprintf.c **** /*----------------------------------------------*/
  73:src/xprintf.c **** /*  xprintf("%d", 1234);			"1234"
  74:src/xprintf.c ****     xprintf("%6d,%3d%%", -200, 5);	"  -200,  5%"
  75:src/xprintf.c ****     xprintf("%-6u", 100);			"100   "
  76:src/xprintf.c ****     xprintf("%ld", 12345678L);		"12345678"
  77:src/xprintf.c ****     xprintf("%04x", 0xA3);			"00a3"
  78:src/xprintf.c ****     xprintf("%08LX", 0x123ABC);		"00123ABC"
  79:src/xprintf.c ****     xprintf("%016b", 0x550F);		"0101010100001111"
  80:src/xprintf.c ****     xprintf("%s", "String");		"String"
  81:src/xprintf.c ****     xprintf("%-4s", "abc");			"abc "
  82:src/xprintf.c ****     xprintf("%4s", "abc");			" abc"
  83:src/xprintf.c ****     xprintf("%c", 'a');				"a"
  84:src/xprintf.c ****     xprintf("%f", 10.0);            <xprintf lacks floating point support>
  85:src/xprintf.c **** */
  86:src/xprintf.c **** 
  87:src/xprintf.c **** static
  88:src/xprintf.c **** void xvprintf (
  89:src/xprintf.c **** 	const char*	fmt,	/* Pointer to the format string */
  90:src/xprintf.c **** 	va_list arp			/* Pointer to arguments */
  91:src/xprintf.c **** )
  92:src/xprintf.c **** {
 123              		.loc 1 92 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 16
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              	.LVL8:
 128 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 129              	.LCFI2:
 130              		.cfi_def_cfa_offset 36
 131              		.cfi_offset 4, -36
 132              		.cfi_offset 5, -32
 133              		.cfi_offset 6, -28
 134              		.cfi_offset 7, -24
 135              		.cfi_offset 8, -20
 136              		.cfi_offset 9, -16
 137              		.cfi_offset 10, -12
 138              		.cfi_offset 11, -8
 139              		.cfi_offset 14, -4
 140 0004 85B0     		sub	sp, sp, #20
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 56
 143 0006 0446     		mov	r4, r0
 144 0008 0E46     		mov	r6, r1
 145              	.LVL9:
 146              	.L16:
  93:src/xprintf.c **** 	unsigned int r, i, j, w, f;
  94:src/xprintf.c **** 	unsigned long v;
  95:src/xprintf.c **** 	char s[16], c, d, *p;
  96:src/xprintf.c **** 
  97:src/xprintf.c **** 
  98:src/xprintf.c **** 	for (;;) {
  99:src/xprintf.c **** 		c = *fmt++;					/* Get a char */
 147              		.loc 1 99 0
 148 000a 2078     		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 149              	.LVL10:
 100:src/xprintf.c **** 		if (!c) break;				/* End of format? */
 150              		.loc 1 100 0
 151 000c 0028     		cmp	r0, #0
 152 000e 00F0D080 		beq	.L15
 101:src/xprintf.c **** 		if (c != '%') {				/* Pass through it if not a % sequense */
 153              		.loc 1 101 0
 154 0012 40B2     		sxtb	r0, r0
 155 0014 2528     		cmp	r0, #37
 156 0016 01D0     		beq	.L18
  99:src/xprintf.c **** 		c = *fmt++;					/* Get a char */
 157              		.loc 1 99 0
 158 0018 0134     		adds	r4, r4, #1
 159              	.LVL11:
 160 001a 6EE0     		b	.L92
 161              	.LVL12:
 162              	.L18:
 102:src/xprintf.c **** 			xputc(c); continue;
 103:src/xprintf.c **** 		}
 104:src/xprintf.c **** 		f = 0;
 105:src/xprintf.c **** 		c = *fmt++;					/* Get first char of the sequense */
 163              		.loc 1 105 0
 164 001c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 165              	.LVL13:
 106:src/xprintf.c **** 		if (c == '0') {				/* Flag: '0' padded */
 166              		.loc 1 106 0
 167 001e 43B2     		sxtb	r3, r0
 168 0020 302B     		cmp	r3, #48
 169 0022 03D1     		bne	.L20
 170              	.LVL14:
 107:src/xprintf.c **** 			f = 1; c = *fmt++;
 171              		.loc 1 107 0
 172 0024 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 173              	.LVL15:
 174 0026 0334     		adds	r4, r4, #3
 175              	.LVL16:
 176 0028 0125     		movs	r5, #1
 177 002a 07E0     		b	.L21
 178              	.LVL17:
 179              	.L20:
 108:src/xprintf.c **** 		} else {
 109:src/xprintf.c **** 			if (c == '-') {			/* Flag: left justified */
 180              		.loc 1 109 0
 181 002c 2D2B     		cmp	r3, #45
 182 002e 02D0     		beq	.L22
 105:src/xprintf.c **** 		c = *fmt++;					/* Get first char of the sequense */
 183              		.loc 1 105 0
 184 0030 0234     		adds	r4, r4, #2
 185              	.LVL18:
 104:src/xprintf.c **** 		f = 0;
 186              		.loc 1 104 0
 187 0032 0025     		movs	r5, #0
 188 0034 02E0     		b	.L21
 189              	.LVL19:
 190              	.L22:
 110:src/xprintf.c **** 				f = 2; c = *fmt++;
 191              		.loc 1 110 0
 192 0036 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 193              	.LVL20:
 194 0038 0334     		adds	r4, r4, #3
 195              	.LVL21:
 196 003a 0225     		movs	r5, #2
 197              	.LVL22:
 198              	.L21:
 111:src/xprintf.c **** 			}
 112:src/xprintf.c **** 		}
 113:src/xprintf.c **** 		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 199              		.loc 1 113 0
 200 003c 4FF00008 		mov	r8, #0
 201              	.LVL23:
 202              	.L23:
 203              		.loc 1 113 0 is_stmt 0 discriminator 1
 204 0040 A0F13001 		sub	r1, r0, #48
 205              	.LVL24:
 206 0044 0929     		cmp	r1, #9
 207 0046 43B2     		sxtb	r3, r0
 208 0048 07D8     		bhi	.L94
 209              	.L24:
 114:src/xprintf.c **** 			w = w * 10 + c - '0';
 210              		.loc 1 114 0 is_stmt 1 discriminator 2
 211 004a 0A22     		movs	r2, #10
 212 004c 02FB0838 		mla	r8, r2, r8, r3
 213              	.LVL25:
 214 0050 A8F13008 		sub	r8, r8, #48
 215              	.LVL26:
 113:src/xprintf.c **** 		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 216              		.loc 1 113 0 discriminator 2
 217 0054 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 218              	.LVL27:
 219 0058 F2E7     		b	.L23
 220              	.LVL28:
 221              	.L94:
 115:src/xprintf.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 222              		.loc 1 115 0
 223 005a 6C2B     		cmp	r3, #108
 224 005c 01D0     		beq	.L25
 225              		.loc 1 115 0 is_stmt 0 discriminator 1
 226 005e 4C2B     		cmp	r3, #76
 227 0060 03D1     		bne	.L26
 228              	.L25:
 116:src/xprintf.c **** 			f |= 4; c = *fmt++;
 229              		.loc 1 116 0 is_stmt 1
 230 0062 45F00405 		orr	r5, r5, #4
 231              	.LVL29:
 232 0066 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 233              	.LVL30:
 234              	.L26:
 117:src/xprintf.c **** 		}
 118:src/xprintf.c **** 		if (!c) break;				/* End of format? */
 235              		.loc 1 118 0
 236 006a 0028     		cmp	r0, #0
 237 006c 00F0A180 		beq	.L15
 238              	.LVL31:
 119:src/xprintf.c **** 		d = c;
 120:src/xprintf.c **** 		if (d >= 'a') d -= 0x20;
 239              		.loc 1 120 0
 240 0070 47B2     		sxtb	r7, r0
 241 0072 602F     		cmp	r7, #96
 242 0074 C6BF     		itte	gt
 243 0076 A0F12002 		subgt	r2, r0, #32
 244 007a D2B2     		uxtbgt	r2, r2
 245              	.LVL32:
 246 007c 0246     		movle	r2, r0
 247              	.LVL33:
 121:src/xprintf.c **** 		switch (d) {				/* Type is... */
 248              		.loc 1 121 0
 249 007e 51B2     		sxtb	r1, r2
 250 0080 4F29     		cmp	r1, #79
 251 0082 40D0     		beq	.L60
 252 0084 06DC     		bgt	.L35
 253 0086 4329     		cmp	r1, #67
 254 0088 2ED0     		beq	.L30
 255 008a 4429     		cmp	r1, #68
 256 008c 0DD0     		beq	.L31
 257 008e 4229     		cmp	r1, #66
 258 0090 32D1     		bne	.L28
 259 0092 36E0     		b	.L95
 260              	.L35:
 261 0094 5529     		cmp	r1, #85
 262 0096 08D0     		beq	.L31
 263 0098 5829     		cmp	r1, #88
 264 009a 2BD0     		beq	.L34
 265 009c 5329     		cmp	r1, #83
 266 009e 2BD1     		bne	.L28
 122:src/xprintf.c **** 		case 'S' :					/* String */
 123:src/xprintf.c **** 			p = va_arg(arp, char*);
 267              		.loc 1 123 0
 268 00a0 371D     		adds	r7, r6, #4
 269              	.LVL34:
 270 00a2 D6F80090 		ldr	r9, [r6, #0]
 271              	.LVL35:
 124:src/xprintf.c **** 			for (j = 0; p[j]; j++) ;
 272              		.loc 1 124 0
 273 00a6 0026     		movs	r6, #0
 274 00a8 01E0     		b	.L36
 275              	.LVL36:
 276              	.L31:
 125:src/xprintf.c **** 			while (!(f & 2) && j++ < w) xputc(' ');
 126:src/xprintf.c **** 			xputs(p);
 127:src/xprintf.c **** 			while (j++ < w) xputc(' ');
 128:src/xprintf.c **** 			continue;
 129:src/xprintf.c **** 		case 'C' :					/* Character */
 130:src/xprintf.c **** 			xputc((char)va_arg(arp, int)); continue;
 131:src/xprintf.c **** 		case 'B' :					/* Binary */
 132:src/xprintf.c **** 			r = 2; break;
 133:src/xprintf.c **** 		case 'O' :					/* Octal */
 134:src/xprintf.c **** 			r = 8; break;
 135:src/xprintf.c **** 		case 'D' :					/* Signed decimal */
 136:src/xprintf.c **** 		case 'U' :					/* Unsigned decimal */
 137:src/xprintf.c **** 			r = 10; break;
 277              		.loc 1 137 0
 278 00aa 0A21     		movs	r1, #10
 279 00ac 2CE0     		b	.L32
 280              	.LVL37:
 281              	.L36:
 124:src/xprintf.c **** 			for (j = 0; p[j]; j++) ;
 282              		.loc 1 124 0 discriminator 1
 283 00ae 19F90620 		ldrsb	r2, [r9, r6]
 284 00b2 4AB1     		cbz	r2, .L90
 285              	.L37:
 124:src/xprintf.c **** 			for (j = 0; p[j]; j++) ;
 286              		.loc 1 124 0 is_stmt 0 discriminator 2
 287 00b4 0136     		adds	r6, r6, #1
 288              	.LVL38:
 289 00b6 FAE7     		b	.L36
 290              	.LVL39:
 291              	.L97:
 125:src/xprintf.c **** 			while (!(f & 2) && j++ < w) xputc(' ');
 292              		.loc 1 125 0 is_stmt 1 discriminator 2
 293 00b8 06F1010A 		add	sl, r6, #1
 294              	.LVL40:
 295 00bc 4645     		cmp	r6, r8
 296 00be 06D2     		bcs	.L96
 297              	.L40:
 125:src/xprintf.c **** 			while (!(f & 2) && j++ < w) xputc(' ');
 298              		.loc 1 125 0 is_stmt 0 discriminator 1
 299 00c0 2020     		movs	r0, #32
 300 00c2 FFF7FEFF 		bl	xputc
 301              	.LVL41:
 302 00c6 5646     		mov	r6, sl
 303              	.LVL42:
 304              	.L90:
 305 00c8 A807     		lsls	r0, r5, #30
 306 00ca 01D4     		bmi	.L39
 307 00cc F4E7     		b	.L97
 308              	.LVL43:
 309              	.L96:
 125:src/xprintf.c **** 			while (!(f & 2) && j++ < w) xputc(' ');
 310              		.loc 1 125 0
 311 00ce 5646     		mov	r6, sl
 312              	.LVL44:
 313              	.L39:
 126:src/xprintf.c **** 			xputs(p);
 314              		.loc 1 126 0 is_stmt 1
 315 00d0 4846     		mov	r0, r9
 316 00d2 FFF7FEFF 		bl	xputs
 317              	.LVL45:
 318              	.L41:
 127:src/xprintf.c **** 			while (j++ < w) xputc(' ');
 319              		.loc 1 127 0 discriminator 1
 320 00d6 4645     		cmp	r6, r8
 321 00d8 01D3     		bcc	.L42
 322              	.LVL46:
 323              	.L19:
 138:src/xprintf.c **** 		case 'X' :					/* Hexdecimal */
 139:src/xprintf.c **** 			r = 16; break;
 140:src/xprintf.c **** 		default:					/* Unknown type (passthrough) */
 141:src/xprintf.c **** 			xputc(c); continue;
 324              		.loc 1 141 0
 325 00da 3E46     		mov	r6, r7
 326 00dc 95E7     		b	.L16
 327              	.LVL47:
 328              	.L42:
 127:src/xprintf.c **** 			while (j++ < w) xputc(' ');
 329              		.loc 1 127 0 discriminator 2
 330 00de 2020     		movs	r0, #32
 331 00e0 FFF7FEFF 		bl	xputc
 332              	.LVL48:
 333 00e4 0136     		adds	r6, r6, #1
 334 00e6 F6E7     		b	.L41
 335              	.LVL49:
 336              	.L30:
 130:src/xprintf.c **** 			xputc((char)va_arg(arp, int)); continue;
 337              		.loc 1 130 0
 338 00e8 371D     		adds	r7, r6, #4
 339              	.LVL50:
 340 00ea 96F90000 		ldrsb	r0, [r6, #0]
 341              	.LVL51:
 342 00ee FFF7FEFF 		bl	xputc
 343              	.LVL52:
 344 00f2 F2E7     		b	.L19
 345              	.LVL53:
 346              	.L34:
 139:src/xprintf.c **** 			r = 16; break;
 347              		.loc 1 139 0
 348 00f4 1021     		movs	r1, #16
 349 00f6 07E0     		b	.L32
 350              	.LVL54:
 351              	.L28:
 352              		.loc 1 141 0
 353 00f8 40B2     		sxtb	r0, r0
 354              	.LVL55:
 355              	.L92:
 356 00fa FFF7FEFF 		bl	xputc
 357              	.LVL56:
 358 00fe 3746     		mov	r7, r6
 359 0100 EBE7     		b	.L19
 360              	.LVL57:
 361              	.L95:
 132:src/xprintf.c **** 			r = 2; break;
 362              		.loc 1 132 0
 363 0102 0221     		movs	r1, #2
 364 0104 00E0     		b	.L32
 365              	.L60:
 134:src/xprintf.c **** 			r = 8; break;
 366              		.loc 1 134 0
 367 0106 0821     		movs	r1, #8
 368              	.L32:
 369              	.LVL58:
 142:src/xprintf.c **** 		}
 143:src/xprintf.c **** 
 144:src/xprintf.c **** 		/* Get an argument and put it in numeral */
 145:src/xprintf.c **** 		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsign
 370              		.loc 1 145 0
 371 0108 3368     		ldr	r3, [r6, #0]
 372 010a 52B2     		sxtb	r2, r2
 373              	.LVL59:
 374 010c 371D     		adds	r7, r6, #4
 375 010e 442A     		cmp	r2, #68
 376 0110 04D1     		bne	.L45
 377              	.LVL60:
 146:src/xprintf.c **** 		if (d == 'D' && (v & 0x80000000)) {
 378              		.loc 1 146 0 discriminator 1
 379 0112 002B     		cmp	r3, #0
 380 0114 02DA     		bge	.L45
 147:src/xprintf.c **** 			v = 0 - v;
 381              		.loc 1 147 0
 382 0116 5B42     		negs	r3, r3
 383              	.LVL61:
 148:src/xprintf.c **** 			f |= 8;
 384              		.loc 1 148 0
 385 0118 45F00805 		orr	r5, r5, #8
 386              	.LVL62:
 387              	.L45:
 149:src/xprintf.c **** 		}
 150:src/xprintf.c **** 		i = 0;
 388              		.loc 1 150 0
 389 011c 0022     		movs	r2, #0
 390              	.LVL63:
 391              	.L50:
 151:src/xprintf.c **** 		do {
 152:src/xprintf.c **** 			d = (char)(v % r); v /= r;
 392              		.loc 1 152 0
 393 011e B3FBF1FE 		udiv	lr, r3, r1
 394 0122 01FB1E33 		mls	r3, r1, lr, r3
 395              	.LVL64:
 396 0126 DEB2     		uxtb	r6, r3
 397              	.LVL65:
 398 0128 7346     		mov	r3, lr
 399              	.LVL66:
 153:src/xprintf.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 400              		.loc 1 153 0
 401 012a 4FFA86FC 		sxtb	ip, r6
 402 012e BCF1090F 		cmp	ip, #9
 403 0132 07DD     		ble	.L47
 404              		.loc 1 153 0 is_stmt 0 discriminator 1
 405 0134 7828     		cmp	r0, #120
 406 0136 14BF     		ite	ne
 407 0138 4FF00709 		movne	r9, #7
 408 013c 4FF02709 		moveq	r9, #39
 409 0140 4E44     		add	r6, r9, r6
 410              	.LVL67:
 411 0142 F6B2     		uxtb	r6, r6
 412              	.LVL68:
 413              	.L47:
 154:src/xprintf.c **** 			s[i++] = d + '0';
 414              		.loc 1 154 0 is_stmt 1
 415 0144 3036     		adds	r6, r6, #48
 416              	.LVL69:
 417 0146 0DF80260 		strb	r6, [sp, r2]
 418 014a 561C     		adds	r6, r2, #1
 419              	.LVL70:
 155:src/xprintf.c **** 		} while (v && i < sizeof(s));
 420              		.loc 1 155 0
 421 014c BEF1000F 		cmp	lr, #0
 422 0150 04D0     		beq	.L49
 423              		.loc 1 155 0 is_stmt 0 discriminator 1
 424 0152 102E     		cmp	r6, #16
 425 0154 01D0     		beq	.L98
 426              	.L62:
 154:src/xprintf.c **** 			s[i++] = d + '0';
 427              		.loc 1 154 0 is_stmt 1
 428 0156 3246     		mov	r2, r6
 429 0158 E1E7     		b	.L50
 430              	.L98:
 431              		.loc 1 155 0
 432 015a 0F22     		movs	r2, #15
 433              	.L49:
 156:src/xprintf.c **** 		if (f & 8) s[i++] = '-';
 434              		.loc 1 156 0
 435 015c 2907     		lsls	r1, r5, #28
 436              	.LVL71:
 437 015e 05D5     		bpl	.L51
 438              		.loc 1 156 0 is_stmt 0 discriminator 1
 439 0160 04A8     		add	r0, sp, #16
 440              	.LVL72:
 441 0162 8119     		adds	r1, r0, r6
 442 0164 2D23     		movs	r3, #45
 443              	.LVL73:
 444 0166 01F8103C 		strb	r3, [r1, #-16]
 445 016a 961C     		adds	r6, r2, #2
 446              	.LVL74:
 447              	.L51:
 157:src/xprintf.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 448              		.loc 1 157 0 is_stmt 1
 449 016c 15F0010F 		tst	r5, #1
 450 0170 0CBF     		ite	eq
 451 0172 4FF0200B 		moveq	fp, #32
 452 0176 4FF0300B 		movne	fp, #48
 453              	.LVL75:
 454 017a B146     		mov	r9, r6
 455              	.LVL76:
 456              	.L53:
 158:src/xprintf.c **** 		while (!(f & 2) && j++ < w) xputc(d);
 457              		.loc 1 158 0 discriminator 1
 458 017c AB07     		lsls	r3, r5, #30
 459 017e 09D4     		bmi	.L80
 460              		.loc 1 158 0 is_stmt 0 discriminator 2
 461 0180 09F1010A 		add	sl, r9, #1
 462              	.LVL77:
 463 0184 C145     		cmp	r9, r8
 464 0186 04D2     		bcs	.L99
 465              	.L55:
 466              		.loc 1 158 0 discriminator 1
 467 0188 5846     		mov	r0, fp
 468 018a FFF7FEFF 		bl	xputc
 469              	.LVL78:
 470 018e D146     		mov	r9, sl
 471 0190 F4E7     		b	.L53
 472              	.L99:
 473              		.loc 1 158 0
 474 0192 D146     		mov	r9, sl
 475              	.LVL79:
 476              	.L80:
 159:src/xprintf.c **** 		do xputc(s[--i]); while(i);
 477              		.loc 1 159 0 is_stmt 1 discriminator 1
 478 0194 013E     		subs	r6, r6, #1
 479              	.LVL80:
 480 0196 1DF90600 		ldrsb	r0, [sp, r6]
 481 019a FFF7FEFF 		bl	xputc
 482              	.LVL81:
 483 019e 002E     		cmp	r6, #0
 484 01a0 F8D1     		bne	.L80
 485              	.L91:
 160:src/xprintf.c **** 		while (j++ < w) xputc(' ');
 486              		.loc 1 160 0 discriminator 1
 487 01a2 C145     		cmp	r9, r8
 488 01a4 99D2     		bcs	.L19
 489              	.L58:
 490              		.loc 1 160 0 is_stmt 0 discriminator 2
 491 01a6 2020     		movs	r0, #32
 492 01a8 FFF7FEFF 		bl	xputc
 493              	.LVL82:
 494 01ac 09F10109 		add	r9, r9, #1
 495 01b0 F7E7     		b	.L91
 496              	.LVL83:
 497              	.L15:
 161:src/xprintf.c **** 	}
 162:src/xprintf.c **** }
 498              		.loc 1 162 0 is_stmt 1
 499 01b2 05B0     		add	sp, sp, #20
 500 01b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 501              		.cfi_endproc
 502              	.LFE3:
 504              		.section	.text.xfputs,"ax",%progbits
 505              		.align	1
 506              		.global	xfputs
 507              		.thumb
 508              		.thumb_func
 510              	xfputs:
 511              	.LFB2:
  57:src/xprintf.c **** {
 512              		.loc 1 57 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              	.LVL84:
 517 0000 70B5     		push	{r4, r5, r6, lr}
 518              	.LCFI4:
 519              		.cfi_def_cfa_offset 16
 520              		.cfi_offset 4, -16
 521              		.cfi_offset 5, -12
 522              		.cfi_offset 6, -8
 523              		.cfi_offset 14, -4
  61:src/xprintf.c **** 	pf = xfunc_out;		/* Save current output device */
 524              		.loc 1 61 0
 525 0002 074B     		ldr	r3, .L104
 526 0004 1D68     		ldr	r5, [r3, #0]
 527              	.LVL85:
  62:src/xprintf.c **** 	xfunc_out = func;	/* Switch output to specified device */
 528              		.loc 1 62 0
 529 0006 1860     		str	r0, [r3, #0]
  53:src/xprintf.c **** void xfputs (					/* Put a string to the specified device */
 530              		.loc 1 53 0
 531 0008 4C1E     		subs	r4, r1, #1
 532 000a 1E46     		mov	r6, r3
 533              	.LVL86:
 534              	.L101:
  63:src/xprintf.c **** 	while (*str)		/* Put the string */
 535              		.loc 1 63 0 discriminator 1
 536 000c 14F8010F 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 537 0010 18B1     		cbz	r0, .L103
 538              	.L102:
  64:src/xprintf.c **** 		xputc(*str++);
 539              		.loc 1 64 0
 540 0012 40B2     		sxtb	r0, r0
 541 0014 FFF7FEFF 		bl	xputc
 542              	.LVL87:
 543 0018 F8E7     		b	.L101
 544              	.L103:
  65:src/xprintf.c **** 	xfunc_out = pf;		/* Restore output device */
 545              		.loc 1 65 0
 546 001a 3560     		str	r5, [r6, #0]
 547 001c 70BD     		pop	{r4, r5, r6, pc}
 548              	.L105:
 549 001e 00BF     		.align	2
 550              	.L104:
 551 0020 00000000 		.word	.LANCHOR1
 552              		.cfi_endproc
 553              	.LFE2:
 555              		.section	.text.xprintf,"ax",%progbits
 556              		.align	1
 557              		.global	xprintf
 558              		.thumb
 559              		.thumb_func
 561              	xprintf:
 562              	.LFB4:
 163:src/xprintf.c **** 
 164:src/xprintf.c **** 
 165:src/xprintf.c **** void xprintf (			/* Put a formatted string to the default device */
 166:src/xprintf.c **** 	const char*	fmt,	/* Pointer to the format string */
 167:src/xprintf.c **** 	...					/* Optional arguments */
 168:src/xprintf.c **** )
 169:src/xprintf.c **** {
 563              		.loc 1 169 0
 564              		.cfi_startproc
 565              		@ args = 4, pretend = 16, frame = 8
 566              		@ frame_needed = 0, uses_anonymous_args = 1
 567              	.LVL88:
 568 0000 0FB4     		push	{r0, r1, r2, r3}
 569              	.LCFI5:
 570              		.cfi_def_cfa_offset 16
 571              		.cfi_offset 0, -16
 572              		.cfi_offset 1, -12
 573              		.cfi_offset 2, -8
 574              		.cfi_offset 3, -4
 575 0002 07B5     		push	{r0, r1, r2, lr}
 576              	.LCFI6:
 577              		.cfi_def_cfa_offset 32
 578              		.cfi_offset 0, -32
 579              		.cfi_offset 1, -28
 580              		.cfi_offset 2, -24
 581              		.cfi_offset 14, -20
 582 0004 04A9     		add	r1, sp, #16
 583 0006 51F8040B 		ldr	r0, [r1], #4
 170:src/xprintf.c **** 	va_list arp;
 171:src/xprintf.c **** 
 172:src/xprintf.c **** 
 173:src/xprintf.c **** 	va_start(arp, fmt);
 584              		.loc 1 173 0
 585 000a 0191     		str	r1, [sp, #4]
 174:src/xprintf.c **** 	xvprintf(fmt, arp);
 586              		.loc 1 174 0
 587 000c FFF7FEFF 		bl	xvprintf
 588              	.LVL89:
 175:src/xprintf.c **** 	va_end(arp);
 176:src/xprintf.c **** }
 589              		.loc 1 176 0
 590 0010 BDE80E40 		pop	{r1, r2, r3, lr}
 591 0014 04B0     		add	sp, sp, #16
 592 0016 7047     		bx	lr
 593              		.cfi_endproc
 594              	.LFE4:
 596              		.section	.text.xsprintf,"ax",%progbits
 597              		.align	1
 598              		.global	xsprintf
 599              		.thumb
 600              		.thumb_func
 602              	xsprintf:
 603              	.LFB5:
 177:src/xprintf.c **** 
 178:src/xprintf.c **** 
 179:src/xprintf.c **** void xsprintf (			/* Put a formatted string to the memory */
 180:src/xprintf.c **** 	char* buff,			/* Pointer to the output buffer */
 181:src/xprintf.c **** 	const char*	fmt,	/* Pointer to the format string */
 182:src/xprintf.c **** 	...					/* Optional arguments */
 183:src/xprintf.c **** )
 184:src/xprintf.c **** {
 604              		.loc 1 184 0
 605              		.cfi_startproc
 606              		@ args = 4, pretend = 12, frame = 8
 607              		@ frame_needed = 0, uses_anonymous_args = 1
 608              	.LVL90:
 609 0000 0EB4     		push	{r1, r2, r3}
 610              	.LCFI7:
 611              		.cfi_def_cfa_offset 12
 612              		.cfi_offset 1, -12
 613              		.cfi_offset 2, -8
 614              		.cfi_offset 3, -4
 615 0002 17B5     		push	{r0, r1, r2, r4, lr}
 616              	.LCFI8:
 617              		.cfi_def_cfa_offset 32
 618              		.cfi_offset 0, -32
 619              		.cfi_offset 1, -28
 620              		.cfi_offset 2, -24
 621              		.cfi_offset 4, -20
 622              		.cfi_offset 14, -16
 623 0004 05A9     		add	r1, sp, #20
 624 0006 51F8043B 		ldr	r3, [r1], #4
 185:src/xprintf.c **** 	va_list arp;
 186:src/xprintf.c **** 
 187:src/xprintf.c **** 
 188:src/xprintf.c **** 	outptr = buff;		/* Switch destination for memory */
 625              		.loc 1 188 0
 626 000a 074C     		ldr	r4, .L108
 627 000c 2060     		str	r0, [r4, #0]
 189:src/xprintf.c **** 
 190:src/xprintf.c **** 	va_start(arp, fmt);
 628              		.loc 1 190 0
 629 000e 0191     		str	r1, [sp, #4]
 191:src/xprintf.c **** 	xvprintf(fmt, arp);
 630              		.loc 1 191 0
 631 0010 1846     		mov	r0, r3
 632              	.LVL91:
 633 0012 FFF7FEFF 		bl	xvprintf
 634              	.LVL92:
 192:src/xprintf.c **** 	va_end(arp);
 193:src/xprintf.c **** 
 194:src/xprintf.c **** 	*outptr = 0;		/* Terminate output string with a \0 */
 635              		.loc 1 194 0
 636 0016 2268     		ldr	r2, [r4, #0]
 637 0018 0020     		movs	r0, #0
 638 001a 1070     		strb	r0, [r2, #0]
 195:src/xprintf.c **** 	outptr = 0;			/* Switch destination for device */
 639              		.loc 1 195 0
 640 001c 2060     		str	r0, [r4, #0]
 196:src/xprintf.c **** }
 641              		.loc 1 196 0
 642 001e BDE81E40 		pop	{r1, r2, r3, r4, lr}
 643 0022 03B0     		add	sp, sp, #12
 644 0024 7047     		bx	lr
 645              	.L109:
 646 0026 00BF     		.align	2
 647              	.L108:
 648 0028 00000000 		.word	.LANCHOR0
 649              		.cfi_endproc
 650              	.LFE5:
 652              		.section	.text.xfprintf,"ax",%progbits
 653              		.align	1
 654              		.global	xfprintf
 655              		.thumb
 656              		.thumb_func
 658              	xfprintf:
 659              	.LFB6:
 197:src/xprintf.c **** 
 198:src/xprintf.c **** 
 199:src/xprintf.c **** void xfprintf (					/* Put a formatted string to the specified device */
 200:src/xprintf.c **** 	void(*func)(unsigned char),	/* Pointer to the output function */
 201:src/xprintf.c **** 	const char*	fmt,			/* Pointer to the format string */
 202:src/xprintf.c **** 	...							/* Optional arguments */
 203:src/xprintf.c **** )
 204:src/xprintf.c **** {
 660              		.loc 1 204 0
 661              		.cfi_startproc
 662              		@ args = 4, pretend = 12, frame = 8
 663              		@ frame_needed = 0, uses_anonymous_args = 1
 664              	.LVL93:
 665 0000 0EB4     		push	{r1, r2, r3}
 666              	.LCFI9:
 667              		.cfi_def_cfa_offset 12
 668              		.cfi_offset 1, -12
 669              		.cfi_offset 2, -8
 670              		.cfi_offset 3, -4
 671 0002 33B5     		push	{r0, r1, r4, r5, lr}
 672              	.LCFI10:
 673              		.cfi_def_cfa_offset 32
 674              		.cfi_offset 0, -32
 675              		.cfi_offset 1, -28
 676              		.cfi_offset 4, -24
 677              		.cfi_offset 5, -20
 678              		.cfi_offset 14, -16
 679 0004 05A9     		add	r1, sp, #20
 680 0006 51F8043B 		ldr	r3, [r1], #4
 205:src/xprintf.c **** 	va_list arp;
 206:src/xprintf.c **** 	void (*pf)(unsigned char);
 207:src/xprintf.c **** 
 208:src/xprintf.c **** 
 209:src/xprintf.c **** 	pf = xfunc_out;		/* Save current output device */
 681              		.loc 1 209 0
 682 000a 064C     		ldr	r4, .L111
 683 000c 2568     		ldr	r5, [r4, #0]
 684              	.LVL94:
 210:src/xprintf.c **** 	xfunc_out = func;	/* Switch output to specified device */
 685              		.loc 1 210 0
 686 000e 2060     		str	r0, [r4, #0]
 211:src/xprintf.c **** 
 212:src/xprintf.c **** 	va_start(arp, fmt);
 687              		.loc 1 212 0
 688 0010 0191     		str	r1, [sp, #4]
 213:src/xprintf.c **** 	xvprintf(fmt, arp);
 689              		.loc 1 213 0
 690 0012 1846     		mov	r0, r3
 691              	.LVL95:
 692 0014 FFF7FEFF 		bl	xvprintf
 693              	.LVL96:
 214:src/xprintf.c **** 	va_end(arp);
 215:src/xprintf.c **** 
 216:src/xprintf.c **** 	xfunc_out = pf;		/* Restore output device */
 694              		.loc 1 216 0
 695 0018 2560     		str	r5, [r4, #0]
 217:src/xprintf.c **** }
 696              		.loc 1 217 0
 697 001a BDE83C40 		pop	{r2, r3, r4, r5, lr}
 698 001e 03B0     		add	sp, sp, #12
 699 0020 7047     		bx	lr
 700              	.L112:
 701 0022 00BF     		.align	2
 702              	.L111:
 703 0024 00000000 		.word	.LANCHOR1
 704              		.cfi_endproc
 705              	.LFE6:
 707              		.section	.text.put_dump,"ax",%progbits
 708              		.align	1
 709              		.global	put_dump
 710              		.thumb
 711              		.thumb_func
 713              	put_dump:
 714              	.LFB7:
 218:src/xprintf.c **** 
 219:src/xprintf.c **** 
 220:src/xprintf.c **** 
 221:src/xprintf.c **** /*----------------------------------------------*/
 222:src/xprintf.c **** /* Dump a line of binary dump                   */
 223:src/xprintf.c **** /*----------------------------------------------*/
 224:src/xprintf.c **** 
 225:src/xprintf.c **** void put_dump (
 226:src/xprintf.c **** 	const void* buff,		/* Pointer to the array to be dumped */
 227:src/xprintf.c **** 	unsigned long addr,		/* Heading address value */
 228:src/xprintf.c **** 	int len,				/* Number of items to be dumped */
 229:src/xprintf.c **** 	int width				/* Size of the items (DW_CHAR, DW_SHORT, DW_LONG) */
 230:src/xprintf.c **** )
 231:src/xprintf.c **** {
 715              		.loc 1 231 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              	.LVL97:
 720 0000 70B5     		push	{r4, r5, r6, lr}
 721              	.LCFI11:
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 4, -16
 724              		.cfi_offset 5, -12
 725              		.cfi_offset 6, -8
 726              		.cfi_offset 14, -4
 727 0002 0546     		mov	r5, r0
 728 0004 1446     		mov	r4, r2
 729 0006 1E46     		mov	r6, r3
 232:src/xprintf.c **** 	int i;
 233:src/xprintf.c **** 	const unsigned char *bp;
 234:src/xprintf.c **** 	const unsigned short *sp;
 235:src/xprintf.c **** 	const unsigned long *lp;
 236:src/xprintf.c **** 
 237:src/xprintf.c **** 
 238:src/xprintf.c **** 	xprintf("%08lX ", addr);		/* address */
 730              		.loc 1 238 0
 731 0008 1B48     		ldr	r0, .L130
 732              	.LVL98:
 733 000a FFF7FEFF 		bl	xprintf
 734              	.LVL99:
 239:src/xprintf.c **** 
 240:src/xprintf.c **** 	switch (width) {
 735              		.loc 1 240 0
 736 000e 022E     		cmp	r6, #2
 737 0010 1ED0     		beq	.L122
 738 0012 042E     		cmp	r6, #4
 739 0014 24D0     		beq	.L124
 740 0016 012E     		cmp	r6, #1
 741 0018 29D1     		bne	.L114
 742 001a 0026     		movs	r6, #0
 743              	.LVL100:
 744              	.L115:
 241:src/xprintf.c **** 	case DW_CHAR:
 242:src/xprintf.c **** 		bp = buff;
 243:src/xprintf.c **** 		for (i = 0; i < len; i++)		/* Hexdecimal dump */
 745              		.loc 1 243 0 discriminator 1
 746 001c A642     		cmp	r6, r4
 747 001e 05DA     		bge	.L129
 748              	.L118:
 244:src/xprintf.c **** 			xprintf(" %02X", bp[i]);
 749              		.loc 1 244 0 discriminator 2
 750 0020 1648     		ldr	r0, .L130+4
 751 0022 A95D     		ldrb	r1, [r5, r6]	@ zero_extendqisi2
 752 0024 FFF7FEFF 		bl	xprintf
 753              	.LVL101:
 243:src/xprintf.c **** 		for (i = 0; i < len; i++)		/* Hexdecimal dump */
 754              		.loc 1 243 0 discriminator 2
 755 0028 0136     		adds	r6, r6, #1
 756              	.LVL102:
 757 002a F7E7     		b	.L115
 758              	.L129:
 245:src/xprintf.c **** 		xputc(' ');
 759              		.loc 1 245 0
 760 002c 2020     		movs	r0, #32
 761 002e FFF7FEFF 		bl	xputc
 762              	.LVL103:
 246:src/xprintf.c **** 		for (i = 0; i < len; i++)		/* ASCII dump */
 763              		.loc 1 246 0
 764 0032 0026     		movs	r6, #0
 765              	.LVL104:
 766              	.L119:
 767              		.loc 1 246 0 is_stmt 0 discriminator 1
 768 0034 A642     		cmp	r6, r4
 769 0036 1ADA     		bge	.L114
 770              	.L121:
 247:src/xprintf.c **** 			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
 771              		.loc 1 247 0 is_stmt 1
 772 0038 A85D     		ldrb	r0, [r5, r6]	@ zero_extendqisi2
 773 003a A0F12003 		sub	r3, r0, #32
 774 003e 5E2B     		cmp	r3, #94
 775 0040 94BF     		ite	ls
 776 0042 C0B2     		uxtbls	r0, r0
 777 0044 2E20     		movhi	r0, #46
 778 0046 40B2     		sxtb	r0, r0
 779 0048 FFF7FEFF 		bl	xputc
 780              	.LVL105:
 246:src/xprintf.c **** 		for (i = 0; i < len; i++)		/* ASCII dump */
 781              		.loc 1 246 0
 782 004c 0136     		adds	r6, r6, #1
 783              	.LVL106:
 784 004e F1E7     		b	.L119
 785              	.LVL107:
 786              	.L122:
 248:src/xprintf.c **** 		break;
 249:src/xprintf.c **** 	case DW_SHORT:
 250:src/xprintf.c **** 		sp = buff;
 251:src/xprintf.c **** 		do								/* Hexdecimal dump */
 252:src/xprintf.c **** 			xprintf(" %04X", *sp++);
 787              		.loc 1 252 0 discriminator 1
 788 0050 0B48     		ldr	r0, .L130+8
 789 0052 35F8021B 		ldrh	r1, [r5], #2
 790              	.LVL108:
 791 0056 FFF7FEFF 		bl	xprintf
 792              	.LVL109:
 253:src/xprintf.c **** 		while (--len);
 793              		.loc 1 253 0 discriminator 1
 794 005a 013C     		subs	r4, r4, #1
 795              	.LVL110:
 796 005c F8D1     		bne	.L122
 797 005e 06E0     		b	.L114
 798              	.LVL111:
 799              	.L124:
 254:src/xprintf.c **** 		break;
 255:src/xprintf.c **** 	case DW_LONG:
 256:src/xprintf.c **** 		lp = buff;
 257:src/xprintf.c **** 		do								/* Hexdecimal dump */
 258:src/xprintf.c **** 			xprintf(" %08LX", *lp++);
 800              		.loc 1 258 0 discriminator 1
 801 0060 0848     		ldr	r0, .L130+12
 802 0062 55F8041B 		ldr	r1, [r5], #4
 803              	.LVL112:
 804 0066 FFF7FEFF 		bl	xprintf
 805              	.LVL113:
 259:src/xprintf.c **** 		while (--len);
 806              		.loc 1 259 0 discriminator 1
 807 006a 013C     		subs	r4, r4, #1
 808              	.LVL114:
 809 006c F8D1     		bne	.L124
 810              	.LVL115:
 811              	.L114:
 260:src/xprintf.c **** 		break;
 261:src/xprintf.c **** 	}
 262:src/xprintf.c **** 
 263:src/xprintf.c **** 	xputc('\n');
 812              		.loc 1 263 0
 813 006e 0A20     		movs	r0, #10
 264:src/xprintf.c **** }
 814              		.loc 1 264 0
 815 0070 BDE87040 		pop	{r4, r5, r6, lr}
 263:src/xprintf.c **** 	xputc('\n');
 816              		.loc 1 263 0
 817 0074 FFF7FEBF 		b	xputc
 818              	.LVL116:
 819              	.L131:
 820              		.align	2
 821              	.L130:
 822 0078 00000000 		.word	.LC0
 823 007c 07000000 		.word	.LC1
 824 0080 0D000000 		.word	.LC2
 825 0084 13000000 		.word	.LC3
 826              		.cfi_endproc
 827              	.LFE7:
 829              		.section	.text.xgets,"ax",%progbits
 830              		.align	1
 831              		.global	xgets
 832              		.thumb
 833              		.thumb_func
 835              	xgets:
 836              	.LFB8:
 265:src/xprintf.c **** 
 266:src/xprintf.c **** #endif /* _USE_XFUNC_OUT */
 267:src/xprintf.c **** 
 268:src/xprintf.c **** 
 269:src/xprintf.c **** 
 270:src/xprintf.c **** #if _USE_XFUNC_IN
 271:src/xprintf.c **** unsigned char (*xfunc_in)(void);	/* Pointer to the input stream */
 272:src/xprintf.c **** 
 273:src/xprintf.c **** /*----------------------------------------------*/
 274:src/xprintf.c **** /* Get a line from the input                    */
 275:src/xprintf.c **** /*----------------------------------------------*/
 276:src/xprintf.c **** 
 277:src/xprintf.c **** int xgets (		/* 0:End of stream, 1:A line arrived */
 278:src/xprintf.c **** 	char* buff,	/* Pointer to the buffer */
 279:src/xprintf.c **** 	int len		/* Buffer length */
 280:src/xprintf.c **** )
 281:src/xprintf.c **** {
 837              		.loc 1 281 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841              	.LVL117:
 842 0000 70B5     		push	{r4, r5, r6, lr}
 843              	.LCFI12:
 844              		.cfi_def_cfa_offset 16
 845              		.cfi_offset 4, -16
 846              		.cfi_offset 5, -12
 847              		.cfi_offset 6, -8
 848              		.cfi_offset 14, -4
 849 0002 0546     		mov	r5, r0
 850 0004 0E46     		mov	r6, r1
 282:src/xprintf.c **** 	int c, i;
 283:src/xprintf.c **** 
 284:src/xprintf.c **** 
 285:src/xprintf.c **** 	if (!xfunc_in) return 0;		/* No input function specified */
 851              		.loc 1 285 0
 852 0006 134B     		ldr	r3, .L150
 853 0008 1868     		ldr	r0, [r3, #0]
 854              	.LVL118:
 855 000a 08B9     		cbnz	r0, .L139
 856              	.LVL119:
 857              	.L135:
 858 000c 0020     		movs	r0, #0
 859 000e 70BD     		pop	{r4, r5, r6, pc}
 860              	.LVL120:
 861              	.L139:
 862 0010 0024     		movs	r4, #0
 863              	.LVL121:
 864              	.L148:
 286:src/xprintf.c **** 
 287:src/xprintf.c **** 	i = 0;
 288:src/xprintf.c **** 	for (;;) {
 289:src/xprintf.c **** 		c = xfunc_in();				/* Get a char from the incoming stream */
 865              		.loc 1 289 0
 866 0012 1049     		ldr	r1, .L150
 867 0014 0A68     		ldr	r2, [r1, #0]
 868 0016 9047     		blx	r2
 869              	.LVL122:
 290:src/xprintf.c **** 		if (!c) return 0;			/* End of stream? */
 870              		.loc 1 290 0
 871 0018 0346     		mov	r3, r0
 872 001a 0028     		cmp	r0, #0
 873 001c F6D0     		beq	.L135
 291:src/xprintf.c **** 		if (c == '\r') break;		/* End of line? */
 874              		.loc 1 291 0
 875 001e 0D28     		cmp	r0, #13
 876 0020 11D0     		beq	.L136
 292:src/xprintf.c **** 		if (c == '\b' && i) {		/* Back space? */
 877              		.loc 1 292 0
 878 0022 0828     		cmp	r0, #8
 879 0024 03D1     		bne	.L137
 880              		.loc 1 292 0 is_stmt 0 discriminator 1
 881 0026 002C     		cmp	r4, #0
 882 0028 F3D0     		beq	.L148
 293:src/xprintf.c **** 			i--;
 883              		.loc 1 293 0 is_stmt 1
 884 002a 013C     		subs	r4, r4, #1
 885              	.LVL123:
 886 002c 08E0     		b	.L149
 887              	.L137:
 294:src/xprintf.c **** 			if (_LINE_ECHO) xputc(c);
 295:src/xprintf.c **** 			continue;
 296:src/xprintf.c **** 		}
 297:src/xprintf.c **** 		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 888              		.loc 1 297 0
 889 002e 1F28     		cmp	r0, #31
 890 0030 EFDD     		ble	.L148
 891              		.loc 1 297 0 is_stmt 0 discriminator 1
 892 0032 701E     		subs	r0, r6, #1
 893              	.LVL124:
 894 0034 8442     		cmp	r4, r0
 895 0036 ECDA     		bge	.L148
 298:src/xprintf.c **** 			buff[i++] = c;
 896              		.loc 1 298 0 is_stmt 1
 897 0038 D9B2     		uxtb	r1, r3
 898 003a 2955     		strb	r1, [r5, r4]
 899 003c 0134     		adds	r4, r4, #1
 900              	.LVL125:
 299:src/xprintf.c **** 			if (_LINE_ECHO) xputc(c);
 901              		.loc 1 299 0
 902 003e 48B2     		sxtb	r0, r1
 903              	.L149:
 904 0040 FFF7FEFF 		bl	xputc
 905              	.LVL126:
 906 0044 E5E7     		b	.L148
 907              	.LVL127:
 908              	.L136:
 300:src/xprintf.c **** 		}
 301:src/xprintf.c **** 	}
 302:src/xprintf.c **** 	buff[i] = 0;	/* Terminate with a \0 */
 909              		.loc 1 302 0
 910 0046 0022     		movs	r2, #0
 911 0048 2A55     		strb	r2, [r5, r4]
 303:src/xprintf.c **** 	if (_LINE_ECHO) xputc('\n');
 912              		.loc 1 303 0
 913 004a 0A20     		movs	r0, #10
 914              	.LVL128:
 915 004c FFF7FEFF 		bl	xputc
 916              	.LVL129:
 304:src/xprintf.c **** 	return 1;
 917              		.loc 1 304 0
 918 0050 0120     		movs	r0, #1
 305:src/xprintf.c **** }
 919              		.loc 1 305 0
 920 0052 70BD     		pop	{r4, r5, r6, pc}
 921              	.L151:
 922              		.align	2
 923              	.L150:
 924 0054 00000000 		.word	.LANCHOR2
 925              		.cfi_endproc
 926              	.LFE8:
 928              		.section	.text.xfgets,"ax",%progbits
 929              		.align	1
 930              		.global	xfgets
 931              		.thumb
 932              		.thumb_func
 934              	xfgets:
 935              	.LFB9:
 306:src/xprintf.c **** 
 307:src/xprintf.c **** 
 308:src/xprintf.c **** int xfgets (	/* 0:End of stream, 1:A line arrived */
 309:src/xprintf.c **** 	unsigned char (*func)(void),	/* Pointer to the input stream function */
 310:src/xprintf.c **** 	char* buff,	/* Pointer to the buffer */
 311:src/xprintf.c **** 	int len		/* Buffer length */
 312:src/xprintf.c **** )
 313:src/xprintf.c **** {
 936              		.loc 1 313 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              	.LVL130:
 941 0000 38B5     		push	{r3, r4, r5, lr}
 942              	.LCFI13:
 943              		.cfi_def_cfa_offset 16
 944              		.cfi_offset 3, -16
 945              		.cfi_offset 4, -12
 946              		.cfi_offset 5, -8
 947              		.cfi_offset 14, -4
 314:src/xprintf.c **** 	unsigned char (*pf)(void);
 315:src/xprintf.c **** 	int n;
 316:src/xprintf.c **** 
 317:src/xprintf.c **** 
 318:src/xprintf.c **** 	pf = xfunc_in;			/* Save current input device */
 948              		.loc 1 318 0
 949 0002 044C     		ldr	r4, .L153
 950 0004 2568     		ldr	r5, [r4, #0]
 951              	.LVL131:
 319:src/xprintf.c **** 	xfunc_in = func;		/* Switch input to specified device */
 952              		.loc 1 319 0
 953 0006 2060     		str	r0, [r4, #0]
 320:src/xprintf.c **** 	n = xgets(buff, len);	/* Get a line */
 954              		.loc 1 320 0
 955 0008 0846     		mov	r0, r1
 956              	.LVL132:
 957 000a 1146     		mov	r1, r2
 958              	.LVL133:
 959 000c FFF7FEFF 		bl	xgets
 960              	.LVL134:
 321:src/xprintf.c **** 	xfunc_in = pf;			/* Restore input device */
 961              		.loc 1 321 0
 962 0010 2560     		str	r5, [r4, #0]
 322:src/xprintf.c **** 
 323:src/xprintf.c **** 	return n;
 324:src/xprintf.c **** }
 963              		.loc 1 324 0
 964 0012 38BD     		pop	{r3, r4, r5, pc}
 965              	.L154:
 966              		.align	2
 967              	.L153:
 968 0014 00000000 		.word	.LANCHOR2
 969              		.cfi_endproc
 970              	.LFE9:
 972              		.section	.text.xatoi,"ax",%progbits
 973              		.align	1
 974              		.global	xatoi
 975              		.thumb
 976              		.thumb_func
 978              	xatoi:
 979              	.LFB10:
 325:src/xprintf.c **** 
 326:src/xprintf.c **** 
 327:src/xprintf.c **** /*----------------------------------------------*/
 328:src/xprintf.c **** /* Get a value of the string                    */
 329:src/xprintf.c **** /*----------------------------------------------*/
 330:src/xprintf.c **** /*	"123 -5   0x3ff 0b1111 0377  w "
 331:src/xprintf.c **** 	    ^                           1st call returns 123 and next ptr
 332:src/xprintf.c **** 	       ^                        2nd call returns -5 and next ptr
 333:src/xprintf.c ****                    ^                3rd call returns 1023 and next ptr
 334:src/xprintf.c ****                           ^         4th call returns 15 and next ptr
 335:src/xprintf.c ****                                ^    5th call returns 255 and next ptr
 336:src/xprintf.c ****                                   ^ 6th call fails and returns 0
 337:src/xprintf.c **** */
 338:src/xprintf.c **** 
 339:src/xprintf.c **** int xatoi (			/* 0:Failed, 1:Successful */
 340:src/xprintf.c **** 	char **str,		/* Pointer to pointer to the string */
 341:src/xprintf.c **** 	long *res		/* Pointer to the valiable to store the value */
 342:src/xprintf.c **** )
 343:src/xprintf.c **** {
 980              		.loc 1 343 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984              	.LVL135:
 985 0000 70B5     		push	{r4, r5, r6, lr}
 986              	.LCFI14:
 987              		.cfi_def_cfa_offset 16
 988              		.cfi_offset 4, -16
 989              		.cfi_offset 5, -12
 990              		.cfi_offset 6, -8
 991              		.cfi_offset 14, -4
 992              	.LVL136:
 344:src/xprintf.c **** 	unsigned long val;
 345:src/xprintf.c **** 	unsigned char c, r, s = 0;
 346:src/xprintf.c **** 
 347:src/xprintf.c **** 
 348:src/xprintf.c **** 	*res = 0;
 993              		.loc 1 348 0
 994 0002 0023     		movs	r3, #0
 995 0004 0B60     		str	r3, [r1, #0]
 996              	.L156:
 349:src/xprintf.c **** 
 350:src/xprintf.c **** 	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
 997              		.loc 1 350 0 discriminator 1
 998 0006 0268     		ldr	r2, [r0, #0]
 999 0008 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1000              	.LVL137:
 1001 000a 202B     		cmp	r3, #32
 1002 000c 02D1     		bne	.L178
 1003              	.L157:
 1004              		.loc 1 350 0 is_stmt 0 discriminator 2
 1005 000e 561C     		adds	r6, r2, #1
 1006 0010 0660     		str	r6, [r0, #0]
 1007 0012 F8E7     		b	.L156
 1008              	.L178:
 351:src/xprintf.c **** 
 352:src/xprintf.c **** 	if (c == '-') {		/* negative? */
 1009              		.loc 1 352 0 is_stmt 1
 1010 0014 2D2B     		cmp	r3, #45
 1011 0016 04D1     		bne	.L171
 1012              	.LVL138:
 353:src/xprintf.c **** 		s = 1;
 354:src/xprintf.c **** 		c = *(++(*str));
 1013              		.loc 1 354 0
 1014 0018 561C     		adds	r6, r2, #1
 1015 001a 0660     		str	r6, [r0, #0]
 1016 001c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1017              	.LVL139:
 353:src/xprintf.c **** 		s = 1;
 1018              		.loc 1 353 0
 1019 001e 0126     		movs	r6, #1
 1020              	.LVL140:
 1021 0020 00E0     		b	.L158
 1022              	.LVL141:
 1023              	.L171:
 345:src/xprintf.c **** 	unsigned char c, r, s = 0;
 1024              		.loc 1 345 0
 1025 0022 0026     		movs	r6, #0
 1026              	.LVL142:
 1027              	.L158:
 355:src/xprintf.c **** 	}
 356:src/xprintf.c **** 
 357:src/xprintf.c **** 	if (c == '0') {
 1028              		.loc 1 357 0
 1029 0024 302B     		cmp	r3, #48
 1030 0026 19D1     		bne	.L159
 358:src/xprintf.c **** 		c = *(++(*str));
 1031              		.loc 1 358 0
 1032 0028 0268     		ldr	r2, [r0, #0]
 1033 002a 531C     		adds	r3, r2, #1
 1034              	.LVL143:
 1035 002c 0360     		str	r3, [r0, #0]
 1036 002e 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 1037              	.LVL144:
 359:src/xprintf.c **** 		switch (c) {
 1038              		.loc 1 359 0
 1039 0030 622B     		cmp	r3, #98
 1040 0032 06D0     		beq	.L161
 1041 0034 782B     		cmp	r3, #120
 1042 0036 09D1     		bne	.L177
 1043              	.LVL145:
 360:src/xprintf.c **** 		case 'x':		/* hexdecimal */
 361:src/xprintf.c **** 			r = 16; c = *(++(*str));
 1044              		.loc 1 361 0
 1045 0038 941C     		adds	r4, r2, #2
 1046 003a 0460     		str	r4, [r0, #0]
 1047 003c 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1048              	.LVL146:
 1049 003e 1024     		movs	r4, #16
 1050              	.LVL147:
 362:src/xprintf.c **** 			break;
 1051              		.loc 1 362 0
 1052 0040 13E0     		b	.L163
 1053              	.LVL148:
 1054              	.L161:
 363:src/xprintf.c **** 		case 'b':		/* binary */
 364:src/xprintf.c **** 			r = 2; c = *(++(*str));
 1055              		.loc 1 364 0
 1056 0042 931C     		adds	r3, r2, #2
 1057 0044 0360     		str	r3, [r0, #0]
 1058 0046 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1059 0048 0224     		movs	r4, #2
 365:src/xprintf.c **** 			break;
 1060              		.loc 1 365 0
 1061 004a 0EE0     		b	.L163
 1062              	.LVL149:
 1063              	.L177:
 366:src/xprintf.c **** 		default:
 367:src/xprintf.c **** 			if (c <= ' ') return 1;	/* single zero */
 1064              		.loc 1 367 0
 1065 004c 202B     		cmp	r3, #32
 1066 004e 28D9     		bls	.L172
 368:src/xprintf.c **** 			if (c < '0' || c > '9') return 0;	/* invalid char */
 1067              		.loc 1 368 0
 1068 0050 A3F13002 		sub	r2, r3, #48
 1069 0054 092A     		cmp	r2, #9
 1070 0056 07D9     		bls	.L173
 1071              	.LVL150:
 1072              	.L165:
 1073 0058 0020     		movs	r0, #0
 1074              	.LVL151:
 1075 005a 70BD     		pop	{r4, r5, r6, pc}
 1076              	.LVL152:
 1077              	.L159:
 369:src/xprintf.c **** 			r = 8;		/* octal */
 370:src/xprintf.c **** 		}
 371:src/xprintf.c **** 	} else {
 372:src/xprintf.c **** 		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
 1078              		.loc 1 372 0
 1079 005c A3F13002 		sub	r2, r3, #48
 1080 0060 092A     		cmp	r2, #9
 1081 0062 F9D8     		bhi	.L165
 373:src/xprintf.c **** 		r = 10;			/* decimal */
 1082              		.loc 1 373 0
 1083 0064 0A24     		movs	r4, #10
 1084 0066 00E0     		b	.L163
 1085              	.LVL153:
 1086              	.L173:
 369:src/xprintf.c **** 			r = 8;		/* octal */
 1087              		.loc 1 369 0
 1088 0068 0824     		movs	r4, #8
 1089              	.LVL154:
 1090              	.L163:
 374:src/xprintf.c **** 	}
 375:src/xprintf.c **** 
 376:src/xprintf.c **** 	val = 0;
 1091              		.loc 1 376 0
 1092 006a 0022     		movs	r2, #0
 1093              	.LVL155:
 1094              	.L166:
 377:src/xprintf.c **** 	while (c > ' ') {
 1095              		.loc 1 377 0 discriminator 1
 1096 006c 202B     		cmp	r3, #32
 1097 006e 15D9     		bls	.L179
 1098              	.L169:
 378:src/xprintf.c **** 		if (c >= 'a') c -= 0x20;
 1099              		.loc 1 378 0
 1100 0070 602B     		cmp	r3, #96
 1101 0072 01D9     		bls	.L167
 1102              		.loc 1 378 0 is_stmt 0 discriminator 1
 1103 0074 203B     		subs	r3, r3, #32
 1104              	.LVL156:
 1105 0076 DBB2     		uxtb	r3, r3
 1106              	.LVL157:
 1107              	.L167:
 379:src/xprintf.c **** 		c -= '0';
 1108              		.loc 1 379 0 is_stmt 1
 1109 0078 A3F13005 		sub	r5, r3, #48
 1110 007c EDB2     		uxtb	r5, r5
 1111              	.LVL158:
 380:src/xprintf.c **** 		if (c >= 17) {
 1112              		.loc 1 380 0
 1113 007e 102D     		cmp	r5, #16
 1114 0080 03D9     		bls	.L168
 381:src/xprintf.c **** 			c -= 7;
 1115              		.loc 1 381 0
 1116 0082 373B     		subs	r3, r3, #55
 1117 0084 DDB2     		uxtb	r5, r3
 1118              	.LVL159:
 382:src/xprintf.c **** 			if (c <= 9) return 0;	/* invalid char */
 1119              		.loc 1 382 0
 1120 0086 092D     		cmp	r5, #9
 1121 0088 E6D9     		bls	.L165
 1122              	.LVL160:
 1123              	.L168:
 383:src/xprintf.c **** 		}
 384:src/xprintf.c **** 		if (c >= r) return 0;		/* invalid char for current radix */
 1124              		.loc 1 384 0
 1125 008a A542     		cmp	r5, r4
 1126 008c E4D2     		bcs	.L165
 385:src/xprintf.c **** 		val = val * r + c;
 1127              		.loc 1 385 0
 1128 008e 04FB0252 		mla	r2, r4, r2, r5
 1129              	.LVL161:
 386:src/xprintf.c **** 		c = *(++(*str));
 1130              		.loc 1 386 0
 1131 0092 0368     		ldr	r3, [r0, #0]
 1132 0094 5D1C     		adds	r5, r3, #1
 1133              	.LVL162:
 1134 0096 0560     		str	r5, [r0, #0]
 1135 0098 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1136              	.LVL163:
 1137 009a E7E7     		b	.L166
 1138              	.LVL164:
 1139              	.L179:
 387:src/xprintf.c **** 	}
 388:src/xprintf.c **** 	if (s) val = 0 - val;			/* apply sign if needed */
 1140              		.loc 1 388 0
 1141 009c 06B1     		cbz	r6, .L170
 1142              		.loc 1 388 0 is_stmt 0 discriminator 1
 1143 009e 5242     		negs	r2, r2
 1144              	.LVL165:
 1145              	.L170:
 389:src/xprintf.c **** 
 390:src/xprintf.c **** 	*res = val;
 1146              		.loc 1 390 0 is_stmt 1
 1147 00a0 0A60     		str	r2, [r1, #0]
 1148              	.LVL166:
 1149              	.L172:
 367:src/xprintf.c **** 			if (c <= ' ') return 1;	/* single zero */
 1150              		.loc 1 367 0
 1151 00a2 0120     		movs	r0, #1
 1152              	.LVL167:
 391:src/xprintf.c **** 	return 1;
 392:src/xprintf.c **** }
 1153              		.loc 1 392 0
 1154 00a4 70BD     		pop	{r4, r5, r6, pc}
 1155              		.cfi_endproc
 1156              	.LFE10:
 1158              		.global	xfunc_in
 1159              		.global	xfunc_out
 1160              		.section	.bss.outptr,"aw",%nobits
 1161              		.align	2
 1162              		.set	.LANCHOR0,. + 0
 1165              	outptr:
 1166 0000 00000000 		.space	4
 1167              		.section	.bss.xfunc_out,"aw",%nobits
 1168              		.align	2
 1169              		.set	.LANCHOR1,. + 0
 1172              	xfunc_out:
 1173 0000 00000000 		.space	4
 1174              		.section	.rodata.str1.1,"aMS",%progbits,1
 1175              	.LC0:
 1176 0000 2530386C 		.ascii	"%08lX \000"
 1176      582000
 1177              	.LC1:
 1178 0007 20253032 		.ascii	" %02X\000"
 1178      5800
 1179              	.LC2:
 1180 000d 20253034 		.ascii	" %04X\000"
 1180      5800
 1181              	.LC3:
 1182 0013 20253038 		.ascii	" %08LX\000"
 1182      4C5800
 1183              		.section	.bss.xfunc_in,"aw",%nobits
 1184              		.align	2
 1185              		.set	.LANCHOR2,. + 0
 1188              	xfunc_in:
 1189 0000 00000000 		.space	4
 1190              		.text
 1191              	.Letext0:
 1192              		.file 2 "c:\\devz\\arm\\launchpad\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdarg.h"
 1193              		.file 3 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 xprintf.c
  R:\TEMP\ccbZ0Ifc.s:19     .text.xputc:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:24     .text.xputc:00000000 xputc
  R:\TEMP\ccbZ0Ifc.s:72     .text.xputc:00000028 $d
  R:\TEMP\ccbZ0Ifc.s:80     .text.xputs:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:85     .text.xputs:00000000 xputs
  R:\TEMP\ccbZ0Ifc.s:117    .text.xvprintf:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:121    .text.xvprintf:00000000 xvprintf
  R:\TEMP\ccbZ0Ifc.s:505    .text.xfputs:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:510    .text.xfputs:00000000 xfputs
  R:\TEMP\ccbZ0Ifc.s:551    .text.xfputs:00000020 $d
  R:\TEMP\ccbZ0Ifc.s:556    .text.xprintf:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:561    .text.xprintf:00000000 xprintf
  R:\TEMP\ccbZ0Ifc.s:597    .text.xsprintf:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:602    .text.xsprintf:00000000 xsprintf
  R:\TEMP\ccbZ0Ifc.s:648    .text.xsprintf:00000028 $d
  R:\TEMP\ccbZ0Ifc.s:653    .text.xfprintf:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:658    .text.xfprintf:00000000 xfprintf
  R:\TEMP\ccbZ0Ifc.s:703    .text.xfprintf:00000024 $d
  R:\TEMP\ccbZ0Ifc.s:708    .text.put_dump:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:713    .text.put_dump:00000000 put_dump
  R:\TEMP\ccbZ0Ifc.s:822    .text.put_dump:00000078 $d
  R:\TEMP\ccbZ0Ifc.s:830    .text.xgets:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:835    .text.xgets:00000000 xgets
  R:\TEMP\ccbZ0Ifc.s:924    .text.xgets:00000054 $d
  R:\TEMP\ccbZ0Ifc.s:929    .text.xfgets:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:934    .text.xfgets:00000000 xfgets
  R:\TEMP\ccbZ0Ifc.s:968    .text.xfgets:00000014 $d
  R:\TEMP\ccbZ0Ifc.s:973    .text.xatoi:00000000 $t
  R:\TEMP\ccbZ0Ifc.s:978    .text.xatoi:00000000 xatoi
  R:\TEMP\ccbZ0Ifc.s:1188   .bss.xfunc_in:00000000 xfunc_in
  R:\TEMP\ccbZ0Ifc.s:1172   .bss.xfunc_out:00000000 xfunc_out
  R:\TEMP\ccbZ0Ifc.s:1161   .bss.outptr:00000000 $d
  R:\TEMP\ccbZ0Ifc.s:1165   .bss.outptr:00000000 outptr
  R:\TEMP\ccbZ0Ifc.s:1168   .bss.xfunc_out:00000000 $d
  R:\TEMP\ccbZ0Ifc.s:1184   .bss.xfunc_in:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
