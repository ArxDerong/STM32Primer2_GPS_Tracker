   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"hw_config.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.IntToUnicode,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	IntToUnicode:
  24              	.LFB68:
  25              		.file 1 "src/hw_config.c"
   1:src/hw_config.c **** /********************************************************************************/
   2:src/hw_config.c **** /*!
   3:src/hw_config.c **** 	@file			hw_config.c
   4:src/hw_config.c **** 	@author         Nemui Trinomius (http://nemuisan.blog.bai.ne.jp)
   5:src/hw_config.c ****     @version        2.00
   6:src/hw_config.c ****     @date           2011.03.10
   7:src/hw_config.c **** 	@brief          Configure Basis System on STM32Primer2.
   8:src/hw_config.c **** 
   9:src/hw_config.c ****     @section HISTORY
  10:src/hw_config.c **** 		2010.12.31	V1.00	Restart Here.
  11:src/hw_config.c **** 		2011.03.10	V2.00	C++ Ready.
  12:src/hw_config.c **** 
  13:src/hw_config.c ****     @section LICENSE
  14:src/hw_config.c **** 		BSD License. See Copyright.txt
  15:src/hw_config.c **** */
  16:src/hw_config.c **** /********************************************************************************/
  17:src/hw_config.c **** 
  18:src/hw_config.c **** /* Includes ------------------------------------------------------------------*/
  19:src/hw_config.c **** #include "stm32f10x.h"
  20:src/hw_config.c **** #include "hw_config.h"
  21:src/hw_config.c **** 
  22:src/hw_config.c **** /* Defines -------------------------------------------------------------------*/
  23:src/hw_config.c **** 
  24:src/hw_config.c **** /* Variables -----------------------------------------------------------------*/
  25:src/hw_config.c **** __IO uint16_t CmdKey=0;
  26:src/hw_config.c **** 
  27:src/hw_config.c **** /* Constants -----------------------------------------------------------------*/
  28:src/hw_config.c **** 
  29:src/hw_config.c **** /* Function prototypes -------------------------------------------------------*/
  30:src/hw_config.c **** 
  31:src/hw_config.c **** /* Functions -----------------------------------------------------------------*/
  32:src/hw_config.c **** 
  33:src/hw_config.c **** /**************************************************************************/
  34:src/hw_config.c **** /*! 
  35:src/hw_config.c ****     @brief	Configures Main system clocks & power.
  36:src/hw_config.c **** 	@param	None.
  37:src/hw_config.c ****     @retval	None.
  38:src/hw_config.c **** */
  39:src/hw_config.c **** /**************************************************************************/
  40:src/hw_config.c **** void Set_System(void)
  41:src/hw_config.c **** {
  42:src/hw_config.c **** 	/* SystemInit was already executed in asm startup Since StdPeriph V3.2.0 */
  43:src/hw_config.c **** 	/* SystemInit(); */
  44:src/hw_config.c **** 
  45:src/hw_config.c **** 	/* Retrive SystemClock Frequency */
  46:src/hw_config.c **** 	SystemCoreClockUpdate();
  47:src/hw_config.c **** 
  48:src/hw_config.c **** 	/* NVIC configuration */
  49:src/hw_config.c **** 	NVIC_Configuration();
  50:src/hw_config.c **** 
  51:src/hw_config.c **** 	/* Configure the LED on STM32Primer2. */
  52:src/hw_config.c **** 	LED_Configuration();
  53:src/hw_config.c **** 
  54:src/hw_config.c **** 	/* Configure the KEY-Input on STM32Primer2. */
  55:src/hw_config.c **** 	KEY_Configuration();
  56:src/hw_config.c **** 
  57:src/hw_config.c **** 	/* Configure the PWRControl on STM32Primer2. */
  58:src/hw_config.c **** 	PWR_Configuration();
  59:src/hw_config.c **** 	
  60:src/hw_config.c **** 	/* Configure the RTCModule on STM32Primer2. */
  61:src/hw_config.c **** 	RTC_Configuration();
  62:src/hw_config.c **** 
  63:src/hw_config.c **** 	/* Configure the ADCControl on STM32Primer2. */
  64:src/hw_config.c **** 	ADC_DMA_Configuration();
  65:src/hw_config.c **** 
  66:src/hw_config.c **** }
  67:src/hw_config.c **** 
  68:src/hw_config.c **** 
  69:src/hw_config.c **** /**************************************************************************/
  70:src/hw_config.c **** /*! 
  71:src/hw_config.c ****     @brief	Configures the LED on STM32Primer2.
  72:src/hw_config.c **** 	@param	None.
  73:src/hw_config.c ****     @retval	None.
  74:src/hw_config.c **** */
  75:src/hw_config.c **** /**************************************************************************/
  76:src/hw_config.c **** void LED_Configuration(void)
  77:src/hw_config.c **** {
  78:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
  79:src/hw_config.c **** 
  80:src/hw_config.c **** 	/* Reduce Power Comsumption */
  81:src/hw_config.c ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
  82:src/hw_config.c **** 						   RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | 
  83:src/hw_config.c **** 						   RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO, ENABLE);
  84:src/hw_config.c **** 
  85:src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_All;
  86:src/hw_config.c ****     GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
  87:src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AIN;
  88:src/hw_config.c ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
  89:src/hw_config.c ****     GPIO_Init(GPIOB, &GPIO_InitStructure);
  90:src/hw_config.c ****     GPIO_Init(GPIOC, &GPIO_InitStructure);
  91:src/hw_config.c ****     GPIO_Init(GPIOD, &GPIO_InitStructure);
  92:src/hw_config.c ****     GPIO_Init(GPIOE, &GPIO_InitStructure);
  93:src/hw_config.c **** 	
  94:src/hw_config.c ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
  95:src/hw_config.c **** 						   RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | 
  96:src/hw_config.c **** 						   RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO, DISABLE);
  97:src/hw_config.c **** 
  98:src/hw_config.c **** 	/* Enable GPIO_LED clock */
  99:src/hw_config.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_LED | RCC_APB2Periph_GPIOB, ENABLE);
 100:src/hw_config.c **** 	
 101:src/hw_config.c **** 	/* Configure GPIO for LEDs as Output push-pull */
 102:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin 	= LED_GREEN | LED_RED;
 103:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 104:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
 105:src/hw_config.c **** 	GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 106:src/hw_config.c **** 	
 107:src/hw_config.c **** 	/* BackLight LED Control */
 108:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_8;
 109:src/hw_config.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 110:src/hw_config.c **** 	GPIO_ResetBits(GPIOB,GPIO_Pin_8);	/* LED Backlight is Always OFF in GPS Tracker */
 111:src/hw_config.c **** 	
 112:src/hw_config.c **** 	/* Init LED */
 113:src/hw_config.c **** 	LED_GRN_OFF();
 114:src/hw_config.c **** 	LED_RED_OFF();
 115:src/hw_config.c **** }
 116:src/hw_config.c **** 
 117:src/hw_config.c **** 
 118:src/hw_config.c **** /**************************************************************************/
 119:src/hw_config.c **** /*! 
 120:src/hw_config.c ****     @brief	Configures the KEY-Input on STM32Primer2.
 121:src/hw_config.c **** 	@param	None.
 122:src/hw_config.c ****     @retval	None.
 123:src/hw_config.c **** */
 124:src/hw_config.c **** /**************************************************************************/
 125:src/hw_config.c **** void KEY_Configuration(void)
 126:src/hw_config.c **** {
 127:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 128:src/hw_config.c **** 
 129:src/hw_config.c **** 	/* Enable 4 input clock */
 130:src/hw_config.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 131:src/hw_config.c **** 
 132:src/hw_config.c **** 	/* Configure GPIO for 4 input as Iutput PullDown */
 133:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin 	= KEY_L | KEY_R | KEY_U | KEY_D;
 134:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 135:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IPD;
 136:src/hw_config.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 137:src/hw_config.c **** 
 138:src/hw_config.c **** 
 139:src/hw_config.c **** 	/* Enable Center input clock */
 140:src/hw_config.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 141:src/hw_config.c **** 
 142:src/hw_config.c **** 	/* Configure GPIO for Center (PBUTTON) input as Input Floating */
 143:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin 	= KEY_CT;
 144:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 145:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN_FLOATING;
 146:src/hw_config.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 147:src/hw_config.c **** 
 148:src/hw_config.c **** }
 149:src/hw_config.c **** 
 150:src/hw_config.c **** 
 151:src/hw_config.c **** /**************************************************************************/
 152:src/hw_config.c **** /*! 
 153:src/hw_config.c ****     @brief	Configures Vector Table base location.
 154:src/hw_config.c **** 	@param	None.
 155:src/hw_config.c ****     @retval	None.
 156:src/hw_config.c **** */
 157:src/hw_config.c **** /**************************************************************************/
 158:src/hw_config.c **** #ifdef  VECT_TAB_RAM
 159:src/hw_config.c **** /* vector-offset (TBLOFF) from bottom of SRAM. defined in linker script */
 160:src/hw_config.c **** extern uint32_t _isr_vectorsram_offs;
 161:src/hw_config.c **** #endif
 162:src/hw_config.c **** void NVIC_Configuration(void)
 163:src/hw_config.c **** {
 164:src/hw_config.c **** 
 165:src/hw_config.c ****     /* 20090429Nemui */
 166:src/hw_config.c ****     #ifdef  VECT_TAB_RAM  
 167:src/hw_config.c ****       /* Set the Vector Table base location at 0x20000000 + _isr_vectorsram_offs */ 
 168:src/hw_config.c ****       NVIC_SetVectorTable(NVIC_VectTab_RAM, (uint32_t)&_isr_vectorsram_offs); 
 169:src/hw_config.c ****     #else  /* VECT_TAB_FLASH  */
 170:src/hw_config.c ****       /* Set the Vector Table base address at 0x08000000 */
 171:src/hw_config.c ****       NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0000);
 172:src/hw_config.c ****     #endif
 173:src/hw_config.c ****     /* 20090429Nemui */
 174:src/hw_config.c **** 
 175:src/hw_config.c **** /* #if defined(USE_STM32PRIMER2) || defined(USE_TIME_DISPLAY) */
 176:src/hw_config.c **** #if 0
 177:src/hw_config.c **** 	NVIC_InitTypeDef NVIC_InitStructure;
 178:src/hw_config.c **** 
 179:src/hw_config.c **** 	/* Configure the NVIC Preemption Priority Bits */
 180:src/hw_config.c **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 181:src/hw_config.c **** 
 182:src/hw_config.c **** 	/* Enable the RTC Interrupt */
 183:src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;
 184:src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 185:src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 186:src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 187:src/hw_config.c **** 	NVIC_Init(&NVIC_InitStructure);
 188:src/hw_config.c **** #endif
 189:src/hw_config.c **** }
 190:src/hw_config.c **** 
 191:src/hw_config.c **** 
 192:src/hw_config.c **** /**************************************************************************/
 193:src/hw_config.c **** /*! 
 194:src/hw_config.c ****     @brief	4+1inputs key on STM32Primer2.
 195:src/hw_config.c **** 	@param	None.
 196:src/hw_config.c ****     @retval	None.
 197:src/hw_config.c **** */
 198:src/hw_config.c **** /**************************************************************************/
 199:src/hw_config.c **** void JoyInp_Chk(void)
 200:src/hw_config.c **** {
 201:src/hw_config.c **** 	static uint32_t keycounts=0;
 202:src/hw_config.c **** 	static uint32_t prev,now;
 203:src/hw_config.c **** 	
 204:src/hw_config.c **** 	/* execute every 5mSec */
 205:src/hw_config.c **** 	if(++keycounts >= 5 ){
 206:src/hw_config.c **** 		keycounts =0;
 207:src/hw_config.c **** 		now  = GPIO_ReadInputData(GPIOE) & (KEY_L | KEY_R | KEY_U | KEY_D);
 208:src/hw_config.c **** 		now |= GPIO_ReadInputData(GPIOA) & (KEY_CT);
 209:src/hw_config.c **** 		
 210:src/hw_config.c **** 		prev = (prev ^ now) & now;
 211:src/hw_config.c **** 		if (prev) CmdKey = prev;
 212:src/hw_config.c **** 		prev = now;
 213:src/hw_config.c **** 	}
 214:src/hw_config.c **** 
 215:src/hw_config.c **** }
 216:src/hw_config.c **** 
 217:src/hw_config.c **** 
 218:src/hw_config.c **** 
 219:src/hw_config.c **** /**************************************************************************/
 220:src/hw_config.c **** /*! 
 221:src/hw_config.c ****     @brief	Set Available USB Clock Frequency.
 222:src/hw_config.c **** 	@param	None.
 223:src/hw_config.c ****     @retval	None.
 224:src/hw_config.c **** */
 225:src/hw_config.c **** /**************************************************************************/
 226:src/hw_config.c **** void Set72(void)
 227:src/hw_config.c **** {
 228:src/hw_config.c **** 	RCC_ClocksTypeDef    RCC_ClockFreq;
 229:src/hw_config.c **** 
 230:src/hw_config.c ****     /* Select PLL as system clock source */
 231:src/hw_config.c ****     RCC_SYSCLKConfig( RCC_SYSCLKSource_HSI );
 232:src/hw_config.c **** 
 233:src/hw_config.c ****     /* Enable PLL */
 234:src/hw_config.c ****     RCC_PLLCmd( DISABLE );
 235:src/hw_config.c **** 
 236:src/hw_config.c ****     /* PLLCLK = 12MHz * 6 = 72 MHz */
 237:src/hw_config.c ****     RCC_PLLConfig( RCC_PLLSource_HSE_Div1, RCC_PLLMul_6 );
 238:src/hw_config.c **** 
 239:src/hw_config.c ****     /* Enable PLL */
 240:src/hw_config.c ****     RCC_PLLCmd( ENABLE );
 241:src/hw_config.c **** 
 242:src/hw_config.c ****     /* Wait till PLL is ready */
 243:src/hw_config.c ****     while( RCC_GetFlagStatus( RCC_FLAG_PLLRDY ) == RESET )
 244:src/hw_config.c ****         { ; }
 245:src/hw_config.c **** 
 246:src/hw_config.c ****     /* Enable Prefetch Buffer */
 247:src/hw_config.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 248:src/hw_config.c **** 
 249:src/hw_config.c ****     /* Flash 2 wait state */
 250:src/hw_config.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 251:src/hw_config.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
 252:src/hw_config.c **** 
 253:src/hw_config.c ****     /* Select PLL as system clock source */
 254:src/hw_config.c ****     RCC_SYSCLKConfig( RCC_SYSCLKSource_PLLCLK );
 255:src/hw_config.c **** 
 256:src/hw_config.c ****     /* Wait till PLL is used as system clock source */
 257:src/hw_config.c ****     while( RCC_GetSYSCLKSource() != 0x08 )
 258:src/hw_config.c ****         { ; }
 259:src/hw_config.c **** 
 260:src/hw_config.c ****     /* This function fills a RCC_ClocksTypeDef structure with the current frequencies
 261:src/hw_config.c ****     of different on chip clocks (for debug purpose) */
 262:src/hw_config.c ****     RCC_GetClocksFreq( &RCC_ClockFreq );
 263:src/hw_config.c **** }
 264:src/hw_config.c **** 
 265:src/hw_config.c **** /**************************************************************************/
 266:src/hw_config.c **** /*! 
 267:src/hw_config.c ****     @brief	Disconnect pin configuration.
 268:src/hw_config.c **** 	@param	None.
 269:src/hw_config.c ****     @retval	None.
 270:src/hw_config.c **** */
 271:src/hw_config.c **** /**************************************************************************/
 272:src/hw_config.c **** void USB_Disconnect_Config(void)
 273:src/hw_config.c **** {
 274:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 275:src/hw_config.c **** 
 276:src/hw_config.c **** 	/* Enable USB_DISCONNECT GPIO clock */
 277:src/hw_config.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_DISCONNECT, ENABLE);
 278:src/hw_config.c **** 
 279:src/hw_config.c **** 	/* USB_DISCONNECT_PIN used as USB pull-up */
 280:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
 281:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 282:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 283:src/hw_config.c **** 	GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
 284:src/hw_config.c **** }
 285:src/hw_config.c **** 
 286:src/hw_config.c **** 
 287:src/hw_config.c **** /**************************************************************************/
 288:src/hw_config.c **** /*! 
 289:src/hw_config.c ****     @brief	Configures USB Clock input (48MHz).
 290:src/hw_config.c **** 	@param	None.
 291:src/hw_config.c ****     @retval	None.
 292:src/hw_config.c **** */
 293:src/hw_config.c **** /**************************************************************************/
 294:src/hw_config.c **** void Set_USBClock(void)
 295:src/hw_config.c **** {
 296:src/hw_config.c **** 	/* Select USBCLK source */
 297:src/hw_config.c **** 	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 298:src/hw_config.c **** 
 299:src/hw_config.c **** 	/* Enable the USB clock */
 300:src/hw_config.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 301:src/hw_config.c **** }
 302:src/hw_config.c **** 
 303:src/hw_config.c **** 
 304:src/hw_config.c **** /**************************************************************************/
 305:src/hw_config.c **** /*! 
 306:src/hw_config.c ****     @brief	Software Connection/Disconnection of USB Cable.
 307:src/hw_config.c **** 	@param	None.
 308:src/hw_config.c ****     @retval	None.
 309:src/hw_config.c **** */
 310:src/hw_config.c **** /**************************************************************************/
 311:src/hw_config.c **** void USB_Cable_Config (FunctionalState NewState)
 312:src/hw_config.c **** {
 313:src/hw_config.c **** 
 314:src/hw_config.c **** 	if (NewState != DISABLE)
 315:src/hw_config.c **** 	{
 316:src/hw_config.c **** 		GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 317:src/hw_config.c **** 	}
 318:src/hw_config.c **** 	else
 319:src/hw_config.c **** 	{
 320:src/hw_config.c **** 		GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 321:src/hw_config.c **** 	}
 322:src/hw_config.c ****   
 323:src/hw_config.c **** }
 324:src/hw_config.c **** 
 325:src/hw_config.c **** 
 326:src/hw_config.c **** /**************************************************************************/
 327:src/hw_config.c **** /*! 
 328:src/hw_config.c ****     @brief	Power-off system clocks and power while entering suspend mode.
 329:src/hw_config.c **** 	@param	None.
 330:src/hw_config.c ****     @retval	None.
 331:src/hw_config.c **** */
 332:src/hw_config.c **** /**************************************************************************/
 333:src/hw_config.c **** void Enter_LowPowerMode(void)
 334:src/hw_config.c **** {
 335:src/hw_config.c **** 	/* Set the device state to suspend */
 336:src/hw_config.c **** 	bDeviceState = SUSPENDED;
 337:src/hw_config.c **** }
 338:src/hw_config.c **** 
 339:src/hw_config.c **** 
 340:src/hw_config.c **** /**************************************************************************/
 341:src/hw_config.c **** /*! 
 342:src/hw_config.c ****     @brief	Restores system clocks and power while exiting suspend mode.
 343:src/hw_config.c **** 	@param	None.
 344:src/hw_config.c ****     @retval	None.
 345:src/hw_config.c **** */
 346:src/hw_config.c **** /**************************************************************************/
 347:src/hw_config.c **** void Leave_LowPowerMode(void)
 348:src/hw_config.c **** {
 349:src/hw_config.c **** 	DEVICE_INFO *pInfo = &Device_Info;
 350:src/hw_config.c **** 
 351:src/hw_config.c **** 	/* Set the device state to the correct state */
 352:src/hw_config.c **** 	if (pInfo->Current_Configuration != 0)
 353:src/hw_config.c **** 	{
 354:src/hw_config.c **** 		/* Device configured */
 355:src/hw_config.c **** 		bDeviceState = CONFIGURED;
 356:src/hw_config.c **** 	}
 357:src/hw_config.c **** 	else
 358:src/hw_config.c **** 	{
 359:src/hw_config.c **** 		bDeviceState = ATTACHED;
 360:src/hw_config.c **** 	}
 361:src/hw_config.c **** 
 362:src/hw_config.c **** }
 363:src/hw_config.c **** 
 364:src/hw_config.c **** /**************************************************************************/
 365:src/hw_config.c **** /*! 
 366:src/hw_config.c ****     @brief	Convert Hex 32Bits value into char.
 367:src/hw_config.c **** 	@param	value: Target valiable to change 32Bit HEX.
 368:src/hw_config.c **** 	@param	pbuf:  Receive Buffer for 32Bit HEX Stings.
 369:src/hw_config.c **** 	@param	value: Receive Buffer length.
 370:src/hw_config.c ****     @retval	None.
 371:src/hw_config.c **** */
 372:src/hw_config.c **** /**************************************************************************/
 373:src/hw_config.c **** static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 374:src/hw_config.c **** {
  26              		.loc 1 374 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36              	.LVL1:
 373:src/hw_config.c **** {
  37              		.loc 1 373 0
  38 0002 0131     		adds	r1, r1, #1
  39              	.LVL2:
 375:src/hw_config.c **** 	uint8_t idx = 0;
 376:src/hw_config.c **** 
 377:src/hw_config.c **** 	for( idx = 0 ; idx < len ; idx ++)
  40              		.loc 1 377 0
  41 0004 0023     		movs	r3, #0
  42              	.LVL3:
  43              	.L2:
  44              		.loc 1 377 0 is_stmt 0 discriminator 1
  45 0006 9342     		cmp	r3, r2
  46 0008 0ED0     		beq	.L8
  47              	.L5:
 378:src/hw_config.c **** 	{
 379:src/hw_config.c **** 		if( ((value >> 28)) < 0xA )
  48              		.loc 1 379 0 is_stmt 1
  49 000a 040F     		lsrs	r4, r0, #28
  50 000c 092C     		cmp	r4, #9
  51 000e 01D8     		bhi	.L3
 380:src/hw_config.c **** 		{
 381:src/hw_config.c **** 			pbuf[ 2* idx] = (value >> 28) + '0';
  52              		.loc 1 381 0
  53 0010 3034     		adds	r4, r4, #48
  54 0012 00E0     		b	.L6
  55              	.L3:
 382:src/hw_config.c **** 		}
 383:src/hw_config.c **** 		else
 384:src/hw_config.c **** 		{
 385:src/hw_config.c **** 			pbuf[2* idx] = (value >> 28) + 'A' - 10; 
  56              		.loc 1 385 0
  57 0014 3734     		adds	r4, r4, #55
  58              	.L6:
  59 0016 01F8014C 		strb	r4, [r1, #-1]
 386:src/hw_config.c **** 		}
 387:src/hw_config.c **** 
 388:src/hw_config.c **** 		value = value << 4;
  60              		.loc 1 388 0
  61 001a 0001     		lsls	r0, r0, #4
  62              	.LVL4:
 389:src/hw_config.c **** 		pbuf[ 2* idx + 1] = 0;
  63              		.loc 1 389 0
  64 001c 0024     		movs	r4, #0
  65 001e 01F8024B 		strb	r4, [r1], #2
 377:src/hw_config.c **** 	{
  66              		.loc 1 377 0
  67 0022 0133     		adds	r3, r3, #1
  68              	.LVL5:
  69 0024 DBB2     		uxtb	r3, r3
  70              	.LVL6:
  71 0026 EEE7     		b	.L2
  72              	.L8:
 390:src/hw_config.c **** 	}
 391:src/hw_config.c **** }
  73              		.loc 1 391 0
  74 0028 10BD     		pop	{r4, pc}
  75              		.cfi_endproc
  76              	.LFE68:
  78              		.section	.text.LED_Configuration,"ax",%progbits
  79              		.align	1
  80              		.global	LED_Configuration
  81              		.thumb
  82              		.thumb_func
  84              	LED_Configuration:
  85              	.LFB58:
  77:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
  86              		.loc 1 77 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 8
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  91              	.LCFI1:
  92              		.cfi_def_cfa_offset 32
  93              		.cfi_offset 0, -32
  94              		.cfi_offset 1, -28
  95              		.cfi_offset 2, -24
  96              		.cfi_offset 4, -20
  97              		.cfi_offset 5, -16
  98              		.cfi_offset 6, -12
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
  81:src/hw_config.c **** 						   RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | 
 101              		.loc 1 81 0
 102 0002 7D20     		movs	r0, #125
 103 0004 0121     		movs	r1, #1
 104 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 105              	.LVL7:
  85:src/hw_config.c ****     GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 106              		.loc 1 85 0
 107 000a 4FF6FF73 		movw	r3, #65535
 108 000e ADF80430 		strh	r3, [sp, #4]	@ movhi
  86:src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AIN;
 109              		.loc 1 86 0
 110 0012 0326     		movs	r6, #3
 111 0014 8DF80660 		strb	r6, [sp, #6]
  87:src/hw_config.c ****     GPIO_Init(GPIOA, &GPIO_InitStructure);
 112              		.loc 1 87 0
 113 0018 0027     		movs	r7, #0
 114 001a 8DF80770 		strb	r7, [sp, #7]
  88:src/hw_config.c ****     GPIO_Init(GPIOB, &GPIO_InitStructure);
 115              		.loc 1 88 0
 116 001e 1F48     		ldr	r0, .L10
 117 0020 01A9     		add	r1, sp, #4
 118 0022 FFF7FEFF 		bl	GPIO_Init
 119              	.LVL8:
  89:src/hw_config.c ****     GPIO_Init(GPIOC, &GPIO_InitStructure);
 120              		.loc 1 89 0
 121 0026 1E4D     		ldr	r5, .L10+4
 122 0028 2846     		mov	r0, r5
 123 002a 01A9     		add	r1, sp, #4
 124 002c FFF7FEFF 		bl	GPIO_Init
 125              	.LVL9:
  90:src/hw_config.c ****     GPIO_Init(GPIOD, &GPIO_InitStructure);
 126              		.loc 1 90 0
 127 0030 1C48     		ldr	r0, .L10+8
 128 0032 01A9     		add	r1, sp, #4
 129 0034 FFF7FEFF 		bl	GPIO_Init
 130              	.LVL10:
  91:src/hw_config.c ****     GPIO_Init(GPIOE, &GPIO_InitStructure);
 131              		.loc 1 91 0
 132 0038 1B48     		ldr	r0, .L10+12
 133 003a 01A9     		add	r1, sp, #4
 134 003c FFF7FEFF 		bl	GPIO_Init
 135              	.LVL11:
  92:src/hw_config.c **** 	
 136              		.loc 1 92 0
 137 0040 1A4C     		ldr	r4, .L10+16
 138 0042 2046     		mov	r0, r4
 139 0044 01A9     		add	r1, sp, #4
 140 0046 FFF7FEFF 		bl	GPIO_Init
 141              	.LVL12:
  94:src/hw_config.c **** 						   RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | 
 142              		.loc 1 94 0
 143 004a 7D20     		movs	r0, #125
 144 004c 3946     		mov	r1, r7
 145 004e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 146              	.LVL13:
  99:src/hw_config.c **** 	
 147              		.loc 1 99 0
 148 0052 4820     		movs	r0, #72
 149 0054 0121     		movs	r1, #1
 150 0056 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 151              	.LVL14:
 102:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 152              		.loc 1 102 0
 153 005a ADF80460 		strh	r6, [sp, #4]	@ movhi
 103:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
 154              		.loc 1 103 0
 155 005e 8DF80660 		strb	r6, [sp, #6]
 104:src/hw_config.c **** 	GPIO_Init(GPIO_LED, &GPIO_InitStructure);
 156              		.loc 1 104 0
 157 0062 1020     		movs	r0, #16
 158 0064 8DF80700 		strb	r0, [sp, #7]
 105:src/hw_config.c **** 	
 159              		.loc 1 105 0
 160 0068 2046     		mov	r0, r4
 161 006a 01A9     		add	r1, sp, #4
 162 006c FFF7FEFF 		bl	GPIO_Init
 163              	.LVL15:
 108:src/hw_config.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 164              		.loc 1 108 0
 165 0070 4FF48076 		mov	r6, #256
 166 0074 ADF80460 		strh	r6, [sp, #4]	@ movhi
 109:src/hw_config.c **** 	GPIO_ResetBits(GPIOB,GPIO_Pin_8);	/* LED Backlight is Always OFF in GPS Tracker */
 167              		.loc 1 109 0
 168 0078 2846     		mov	r0, r5
 169 007a 01A9     		add	r1, sp, #4
 170 007c FFF7FEFF 		bl	GPIO_Init
 171              	.LVL16:
 110:src/hw_config.c **** 	
 172              		.loc 1 110 0
 173 0080 2846     		mov	r0, r5
 174 0082 3146     		mov	r1, r6
 175 0084 FFF7FEFF 		bl	GPIO_ResetBits
 176              	.LVL17:
 113:src/hw_config.c **** 	LED_RED_OFF();
 177              		.loc 1 113 0
 178 0088 2046     		mov	r0, r4
 179 008a 0121     		movs	r1, #1
 180 008c FFF7FEFF 		bl	GPIO_ResetBits
 181              	.LVL18:
 114:src/hw_config.c **** }
 182              		.loc 1 114 0
 183 0090 2046     		mov	r0, r4
 184 0092 0221     		movs	r1, #2
 185 0094 FFF7FEFF 		bl	GPIO_ResetBits
 186              	.LVL19:
 115:src/hw_config.c **** 
 187              		.loc 1 115 0
 188 0098 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 189              	.L11:
 190 009a 00BF     		.align	2
 191              	.L10:
 192 009c 00080140 		.word	1073809408
 193 00a0 000C0140 		.word	1073810432
 194 00a4 00100140 		.word	1073811456
 195 00a8 00140140 		.word	1073812480
 196 00ac 00180140 		.word	1073813504
 197              		.cfi_endproc
 198              	.LFE58:
 200              		.section	.text.KEY_Configuration,"ax",%progbits
 201              		.align	1
 202              		.global	KEY_Configuration
 203              		.thumb
 204              		.thumb_func
 206              	KEY_Configuration:
 207              	.LFB59:
 126:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 208              		.loc 1 126 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212 0000 13B5     		push	{r0, r1, r4, lr}
 213              	.LCFI2:
 214              		.cfi_def_cfa_offset 16
 215              		.cfi_offset 0, -16
 216              		.cfi_offset 1, -12
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
 130:src/hw_config.c **** 
 219              		.loc 1 130 0
 220 0002 4020     		movs	r0, #64
 221 0004 0121     		movs	r1, #1
 222 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 223              	.LVL20:
 133:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 224              		.loc 1 133 0
 225 000a 7823     		movs	r3, #120
 226 000c ADF80430 		strh	r3, [sp, #4]	@ movhi
 134:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IPD;
 227              		.loc 1 134 0
 228 0010 0324     		movs	r4, #3
 229 0012 8DF80640 		strb	r4, [sp, #6]
 135:src/hw_config.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 230              		.loc 1 135 0
 231 0016 2820     		movs	r0, #40
 232 0018 8DF80700 		strb	r0, [sp, #7]
 136:src/hw_config.c **** 
 233              		.loc 1 136 0
 234 001c 0B48     		ldr	r0, .L13
 235 001e 01A9     		add	r1, sp, #4
 236 0020 FFF7FEFF 		bl	GPIO_Init
 237              	.LVL21:
 140:src/hw_config.c **** 
 238              		.loc 1 140 0
 239 0024 0420     		movs	r0, #4
 240 0026 0121     		movs	r1, #1
 241 0028 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 242              	.LVL22:
 143:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 243              		.loc 1 143 0
 244 002c 4FF48071 		mov	r1, #256
 245 0030 ADF80410 		strh	r1, [sp, #4]	@ movhi
 144:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_IN_FLOATING;
 246              		.loc 1 144 0
 247 0034 8DF80640 		strb	r4, [sp, #6]
 145:src/hw_config.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 248              		.loc 1 145 0
 249 0038 0422     		movs	r2, #4
 250 003a 8DF80720 		strb	r2, [sp, #7]
 146:src/hw_config.c **** 
 251              		.loc 1 146 0
 252 003e 0448     		ldr	r0, .L13+4
 253 0040 0DEB0201 		add	r1, sp, r2
 254 0044 FFF7FEFF 		bl	GPIO_Init
 255              	.LVL23:
 148:src/hw_config.c **** 
 256              		.loc 1 148 0
 257 0048 1CBD     		pop	{r2, r3, r4, pc}
 258              	.L14:
 259 004a 00BF     		.align	2
 260              	.L13:
 261 004c 00180140 		.word	1073813504
 262 0050 00080140 		.word	1073809408
 263              		.cfi_endproc
 264              	.LFE59:
 266              		.section	.text.NVIC_Configuration,"ax",%progbits
 267              		.align	1
 268              		.global	NVIC_Configuration
 269              		.thumb
 270              		.thumb_func
 272              	NVIC_Configuration:
 273              	.LFB60:
 163:src/hw_config.c **** 
 274              		.loc 1 163 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 171:src/hw_config.c ****     #endif
 279              		.loc 1 171 0
 280 0000 4FF00060 		mov	r0, #134217728
 281 0004 0021     		movs	r1, #0
 189:src/hw_config.c **** 
 282              		.loc 1 189 0
 171:src/hw_config.c ****     #endif
 283              		.loc 1 171 0
 284 0006 FFF7FEBF 		b	NVIC_SetVectorTable
 285              	.LVL24:
 286              		.cfi_endproc
 287              	.LFE60:
 289              		.section	.text.Set_System,"ax",%progbits
 290              		.align	1
 291              		.global	Set_System
 292              		.thumb
 293              		.thumb_func
 295              	Set_System:
 296              	.LFB57:
  41:src/hw_config.c **** 	/* SystemInit was already executed in asm startup Since StdPeriph V3.2.0 */
 297              		.loc 1 41 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301 0000 08B5     		push	{r3, lr}
 302              	.LCFI3:
 303              		.cfi_def_cfa_offset 8
 304              		.cfi_offset 3, -8
 305              		.cfi_offset 14, -4
  46:src/hw_config.c **** 
 306              		.loc 1 46 0
 307 0002 FFF7FEFF 		bl	SystemCoreClockUpdate
 308              	.LVL25:
  49:src/hw_config.c **** 
 309              		.loc 1 49 0
 310 0006 FFF7FEFF 		bl	NVIC_Configuration
 311              	.LVL26:
  52:src/hw_config.c **** 
 312              		.loc 1 52 0
 313 000a FFF7FEFF 		bl	LED_Configuration
 314              	.LVL27:
  55:src/hw_config.c **** 
 315              		.loc 1 55 0
 316 000e FFF7FEFF 		bl	KEY_Configuration
 317              	.LVL28:
  58:src/hw_config.c **** 	
 318              		.loc 1 58 0
 319 0012 FFF7FEFF 		bl	PWR_Configuration
 320              	.LVL29:
  61:src/hw_config.c **** 
 321              		.loc 1 61 0
 322 0016 FFF7FEFF 		bl	RTC_Configuration
 323              	.LVL30:
  66:src/hw_config.c **** 
 324              		.loc 1 66 0
 325 001a BDE80840 		pop	{r3, lr}
  64:src/hw_config.c **** 
 326              		.loc 1 64 0
 327 001e FFF7FEBF 		b	ADC_DMA_Configuration
 328              	.LVL31:
 329              		.cfi_endproc
 330              	.LFE57:
 332              		.section	.text.JoyInp_Chk,"ax",%progbits
 333              		.align	1
 334              		.global	JoyInp_Chk
 335              		.thumb
 336              		.thumb_func
 338              	JoyInp_Chk:
 339              	.LFB61:
 200:src/hw_config.c **** 	static uint32_t keycounts=0;
 340              		.loc 1 200 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344 0000 38B5     		push	{r3, r4, r5, lr}
 345              	.LCFI4:
 346              		.cfi_def_cfa_offset 16
 347              		.cfi_offset 3, -16
 348              		.cfi_offset 4, -12
 349              		.cfi_offset 5, -8
 350              		.cfi_offset 14, -4
 205:src/hw_config.c **** 		keycounts =0;
 351              		.loc 1 205 0
 352 0002 114B     		ldr	r3, .L24
 353 0004 1A68     		ldr	r2, [r3, #0]
 354 0006 501C     		adds	r0, r2, #1
 355 0008 0428     		cmp	r0, #4
 356 000a 01D8     		bhi	.L18
 357 000c 1860     		str	r0, [r3, #0]
 358 000e 38BD     		pop	{r3, r4, r5, pc}
 359              	.L18:
 206:src/hw_config.c **** 		now  = GPIO_ReadInputData(GPIOE) & (KEY_L | KEY_R | KEY_U | KEY_D);
 360              		.loc 1 206 0
 361 0010 0021     		movs	r1, #0
 362 0012 1960     		str	r1, [r3, #0]
 207:src/hw_config.c **** 		now |= GPIO_ReadInputData(GPIOA) & (KEY_CT);
 363              		.loc 1 207 0
 364 0014 0D48     		ldr	r0, .L24+4
 365 0016 FFF7FEFF 		bl	GPIO_ReadInputData
 366              	.LVL32:
 367 001a 00F07805 		and	r5, r0, #120
 368 001e 0C4C     		ldr	r4, .L24+8
 369 0020 2560     		str	r5, [r4, #0]
 208:src/hw_config.c **** 		
 370              		.loc 1 208 0
 371 0022 0C48     		ldr	r0, .L24+12
 372 0024 FFF7FEFF 		bl	GPIO_ReadInputData
 373              	.LVL33:
 374 0028 00F48073 		and	r3, r0, #256
 375 002c 45EA0300 		orr	r0, r5, r3
 376 0030 2060     		str	r0, [r4, #0]
 210:src/hw_config.c **** 		if (prev) CmdKey = prev;
 377              		.loc 1 210 0
 378 0032 094A     		ldr	r2, .L24+16
 379 0034 1168     		ldr	r1, [r2, #0]
 211:src/hw_config.c **** 		prev = now;
 380              		.loc 1 211 0
 381 0036 30EA0103 		bics	r3, r0, r1
 382 003a 02D0     		beq	.L20
 211:src/hw_config.c **** 		prev = now;
 383              		.loc 1 211 0 is_stmt 0 discriminator 1
 384 003c 9BB2     		uxth	r3, r3
 385 003e 0749     		ldr	r1, .L24+20
 386 0040 0B80     		strh	r3, [r1, #0]	@ movhi
 387              	.L20:
 212:src/hw_config.c **** 	}
 388              		.loc 1 212 0 is_stmt 1
 389 0042 1060     		str	r0, [r2, #0]
 390 0044 38BD     		pop	{r3, r4, r5, pc}
 391              	.L25:
 392 0046 00BF     		.align	2
 393              	.L24:
 394 0048 00000000 		.word	.LANCHOR0
 395 004c 00180140 		.word	1073813504
 396 0050 00000000 		.word	.LANCHOR1
 397 0054 00080140 		.word	1073809408
 398 0058 00000000 		.word	.LANCHOR2
 399 005c 00000000 		.word	.LANCHOR3
 400              		.cfi_endproc
 401              	.LFE61:
 403              		.section	.text.Set72,"ax",%progbits
 404              		.align	1
 405              		.global	Set72
 406              		.thumb
 407              		.thumb_func
 409              	Set72:
 410              	.LFB62:
 227:src/hw_config.c **** 	RCC_ClocksTypeDef    RCC_ClockFreq;
 411              		.loc 1 227 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 24
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 416              	.LCFI5:
 417              		.cfi_def_cfa_offset 32
 418              		.cfi_offset 0, -32
 419              		.cfi_offset 1, -28
 420              		.cfi_offset 2, -24
 421              		.cfi_offset 3, -20
 422              		.cfi_offset 4, -16
 423              		.cfi_offset 5, -12
 424              		.cfi_offset 6, -8
 425              		.cfi_offset 14, -4
 231:src/hw_config.c **** 
 426              		.loc 1 231 0
 427 0002 0020     		movs	r0, #0
 428 0004 FFF7FEFF 		bl	RCC_SYSCLKConfig
 429              	.LVL34:
 234:src/hw_config.c **** 
 430              		.loc 1 234 0
 431 0008 0020     		movs	r0, #0
 432 000a FFF7FEFF 		bl	RCC_PLLCmd
 433              	.LVL35:
 237:src/hw_config.c **** 
 434              		.loc 1 237 0
 435 000e 4FF48030 		mov	r0, #65536
 436 0012 4FF48011 		mov	r1, #1048576
 437 0016 FFF7FEFF 		bl	RCC_PLLConfig
 438              	.LVL36:
 240:src/hw_config.c **** 
 439              		.loc 1 240 0
 440 001a 0120     		movs	r0, #1
 441 001c FFF7FEFF 		bl	RCC_PLLCmd
 442              	.LVL37:
 443              	.L27:
 243:src/hw_config.c ****         { ; }
 444              		.loc 1 243 0 discriminator 1
 445 0020 3920     		movs	r0, #57
 446 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 447              	.LVL38:
 448 0026 0028     		cmp	r0, #0
 449 0028 FAD0     		beq	.L27
 247:src/hw_config.c **** 
 450              		.loc 1 247 0
 451 002a 0C4B     		ldr	r3, .L34
 452 002c 1A68     		ldr	r2, [r3, #0]
 453 002e 42F01000 		orr	r0, r2, #16
 454 0032 1860     		str	r0, [r3, #0]
 250:src/hw_config.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
 455              		.loc 1 250 0
 456 0034 1968     		ldr	r1, [r3, #0]
 457 0036 21F00302 		bic	r2, r1, #3
 458 003a 1A60     		str	r2, [r3, #0]
 251:src/hw_config.c **** 
 459              		.loc 1 251 0
 460 003c 1868     		ldr	r0, [r3, #0]
 461 003e 40F00201 		orr	r1, r0, #2
 462 0042 1960     		str	r1, [r3, #0]
 254:src/hw_config.c **** 
 463              		.loc 1 254 0
 464 0044 0220     		movs	r0, #2
 465 0046 FFF7FEFF 		bl	RCC_SYSCLKConfig
 466              	.LVL39:
 467              	.L28:
 257:src/hw_config.c ****         { ; }
 468              		.loc 1 257 0 discriminator 1
 469 004a FFF7FEFF 		bl	RCC_GetSYSCLKSource
 470              	.LVL40:
 471 004e 0828     		cmp	r0, #8
 472 0050 FBD1     		bne	.L28
 262:src/hw_config.c **** }
 473              		.loc 1 262 0
 474 0052 01A8     		add	r0, sp, #4
 475 0054 FFF7FEFF 		bl	RCC_GetClocksFreq
 476              	.LVL41:
 263:src/hw_config.c **** 
 477              		.loc 1 263 0
 478 0058 07B0     		add	sp, sp, #28
 479 005a 00BD     		pop	{pc}
 480              	.L35:
 481              		.align	2
 482              	.L34:
 483 005c 00200240 		.word	1073881088
 484              		.cfi_endproc
 485              	.LFE62:
 487              		.section	.text.USB_Disconnect_Config,"ax",%progbits
 488              		.align	1
 489              		.global	USB_Disconnect_Config
 490              		.thumb
 491              		.thumb_func
 493              	USB_Disconnect_Config:
 494              	.LFB63:
 273:src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 495              		.loc 1 273 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 8
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499 0000 07B5     		push	{r0, r1, r2, lr}
 500              	.LCFI6:
 501              		.cfi_def_cfa_offset 16
 502              		.cfi_offset 0, -16
 503              		.cfi_offset 1, -12
 504              		.cfi_offset 2, -8
 505              		.cfi_offset 14, -4
 277:src/hw_config.c **** 
 506              		.loc 1 277 0
 507 0002 2020     		movs	r0, #32
 508 0004 0121     		movs	r1, #1
 509 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 510              	.LVL42:
 280:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 511              		.loc 1 280 0
 512 000a 0823     		movs	r3, #8
 513 000c ADF80430 		strh	r3, [sp, #4]	@ movhi
 281:src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 514              		.loc 1 281 0
 515 0010 0320     		movs	r0, #3
 516 0012 8DF80600 		strb	r0, [sp, #6]
 282:src/hw_config.c **** 	GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
 517              		.loc 1 282 0
 518 0016 1421     		movs	r1, #20
 519 0018 8DF80710 		strb	r1, [sp, #7]
 283:src/hw_config.c **** }
 520              		.loc 1 283 0
 521 001c 0248     		ldr	r0, .L37
 522 001e 01A9     		add	r1, sp, #4
 523 0020 FFF7FEFF 		bl	GPIO_Init
 524              	.LVL43:
 284:src/hw_config.c **** 
 525              		.loc 1 284 0
 526 0024 0EBD     		pop	{r1, r2, r3, pc}
 527              	.L38:
 528 0026 00BF     		.align	2
 529              	.L37:
 530 0028 00140140 		.word	1073812480
 531              		.cfi_endproc
 532              	.LFE63:
 534              		.section	.text.Set_USBClock,"ax",%progbits
 535              		.align	1
 536              		.global	Set_USBClock
 537              		.thumb
 538              		.thumb_func
 540              	Set_USBClock:
 541              	.LFB64:
 295:src/hw_config.c **** 	/* Select USBCLK source */
 542              		.loc 1 295 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546 0000 08B5     		push	{r3, lr}
 547              	.LCFI7:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 3, -8
 550              		.cfi_offset 14, -4
 297:src/hw_config.c **** 
 551              		.loc 1 297 0
 552 0002 0020     		movs	r0, #0
 553 0004 FFF7FEFF 		bl	RCC_USBCLKConfig
 554              	.LVL44:
 300:src/hw_config.c **** }
 555              		.loc 1 300 0
 556 0008 4FF40000 		mov	r0, #8388608
 557 000c 0121     		movs	r1, #1
 301:src/hw_config.c **** 
 558              		.loc 1 301 0
 559 000e BDE80840 		pop	{r3, lr}
 300:src/hw_config.c **** }
 560              		.loc 1 300 0
 561 0012 FFF7FEBF 		b	RCC_APB1PeriphClockCmd
 562              	.LVL45:
 563              		.cfi_endproc
 564              	.LFE64:
 566              		.section	.text.USB_Cable_Config,"ax",%progbits
 567              		.align	1
 568              		.global	USB_Cable_Config
 569              		.thumb
 570              		.thumb_func
 572              	USB_Cable_Config:
 573              	.LFB65:
 312:src/hw_config.c **** 
 574              		.loc 1 312 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579              	.LVL46:
 314:src/hw_config.c **** 	{
 580              		.loc 1 314 0
 581 0000 18B1     		cbz	r0, .L41
 316:src/hw_config.c **** 	}
 582              		.loc 1 316 0
 583 0002 0448     		ldr	r0, .L42
 584              	.LVL47:
 585 0004 0821     		movs	r1, #8
 323:src/hw_config.c **** 
 586              		.loc 1 323 0
 316:src/hw_config.c **** 	}
 587              		.loc 1 316 0
 588 0006 FFF7FEBF 		b	GPIO_ResetBits
 589              	.LVL48:
 590              	.L41:
 320:src/hw_config.c **** 	}
 591              		.loc 1 320 0
 592 000a 0248     		ldr	r0, .L42
 593              	.LVL49:
 594 000c 0821     		movs	r1, #8
 323:src/hw_config.c **** 
 595              		.loc 1 323 0
 320:src/hw_config.c **** 	}
 596              		.loc 1 320 0
 597 000e FFF7FEBF 		b	GPIO_SetBits
 598              	.LVL50:
 599              	.L43:
 600 0012 00BF     		.align	2
 601              	.L42:
 602 0014 00140140 		.word	1073812480
 603              		.cfi_endproc
 604              	.LFE65:
 606              		.section	.text.Enter_LowPowerMode,"ax",%progbits
 607              		.align	1
 608              		.global	Enter_LowPowerMode
 609              		.thumb
 610              		.thumb_func
 612              	Enter_LowPowerMode:
 613              	.LFB66:
 334:src/hw_config.c **** 	/* Set the device state to suspend */
 614              		.loc 1 334 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 336:src/hw_config.c **** }
 619              		.loc 1 336 0
 620 0000 0322     		movs	r2, #3
 621 0002 014B     		ldr	r3, .L45
 622 0004 1A60     		str	r2, [r3, #0]
 623 0006 7047     		bx	lr
 624              	.L46:
 625              		.align	2
 626              	.L45:
 627 0008 00000000 		.word	bDeviceState
 628              		.cfi_endproc
 629              	.LFE66:
 631              		.section	.text.Leave_LowPowerMode,"ax",%progbits
 632              		.align	1
 633              		.global	Leave_LowPowerMode
 634              		.thumb
 635              		.thumb_func
 637              	Leave_LowPowerMode:
 638              	.LFB67:
 348:src/hw_config.c **** 	DEVICE_INFO *pInfo = &Device_Info;
 639              		.loc 1 348 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 644              	.LVL51:
 352:src/hw_config.c **** 	{
 645              		.loc 1 352 0
 646 0000 044B     		ldr	r3, .L51
 647 0002 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 648 0004 0448     		ldr	r0, .L51+4
 649 0006 0AB1     		cbz	r2, .L48
 355:src/hw_config.c **** 	}
 650              		.loc 1 355 0
 651 0008 0521     		movs	r1, #5
 652 000a 00E0     		b	.L50
 653              	.L48:
 359:src/hw_config.c **** 	}
 654              		.loc 1 359 0
 655 000c 0121     		movs	r1, #1
 656              	.L50:
 657 000e 0160     		str	r1, [r0, #0]
 658 0010 7047     		bx	lr
 659              	.L52:
 660 0012 00BF     		.align	2
 661              	.L51:
 662 0014 00000000 		.word	Device_Info
 663 0018 00000000 		.word	bDeviceState
 664              		.cfi_endproc
 665              	.LFE67:
 667              		.section	.text.Get_SerialNum,"ax",%progbits
 668              		.align	1
 669              		.global	Get_SerialNum
 670              		.thumb
 671              		.thumb_func
 673              	Get_SerialNum:
 674              	.LFB69:
 392:src/hw_config.c **** 
 393:src/hw_config.c **** /**************************************************************************/
 394:src/hw_config.c **** /*! 
 395:src/hw_config.c ****     @brief	Create the serial number for StringDescriptor.
 396:src/hw_config.c **** 	@param	None.
 397:src/hw_config.c ****     @retval	None.
 398:src/hw_config.c **** */
 399:src/hw_config.c **** /**************************************************************************/
 400:src/hw_config.c **** void Get_SerialNum(uint8_t* string0,uint8_t* string1)
 401:src/hw_config.c **** {
 675              		.loc 1 401 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              	.LVL52:
 680 0000 70B5     		push	{r4, r5, r6, lr}
 681              	.LCFI8:
 682              		.cfi_def_cfa_offset 16
 683              		.cfi_offset 4, -16
 684              		.cfi_offset 5, -12
 685              		.cfi_offset 6, -8
 686              		.cfi_offset 14, -4
 687 0002 0646     		mov	r6, r0
 688 0004 0D46     		mov	r5, r1
 402:src/hw_config.c **** 	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
 403:src/hw_config.c **** 
 404:src/hw_config.c **** 	Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 689              		.loc 1 404 0
 690 0006 0A4B     		ldr	r3, .L55
 691 0008 1868     		ldr	r0, [r3, #0]
 692              	.LVL53:
 405:src/hw_config.c **** 	Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 693              		.loc 1 405 0
 694 000a 0A4A     		ldr	r2, .L55+4
 695 000c 1468     		ldr	r4, [r2, #0]
 696              	.LVL54:
 406:src/hw_config.c **** 	Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 697              		.loc 1 406 0
 698 000e 111D     		adds	r1, r2, #4
 699              	.LVL55:
 700 0010 0B68     		ldr	r3, [r1, #0]
 701              	.LVL56:
 407:src/hw_config.c **** 
 408:src/hw_config.c **** 	Device_Serial0 += Device_Serial2;
 409:src/hw_config.c **** 
 410:src/hw_config.c **** 	if (Device_Serial0 != 0)
 702              		.loc 1 410 0
 703 0012 1818     		adds	r0, r3, r0
 704              	.LVL57:
 705 0014 0AD0     		beq	.L53
 411:src/hw_config.c **** 	{
 412:src/hw_config.c **** 		IntToUnicode (Device_Serial0, string0, 8);
 706              		.loc 1 412 0
 707 0016 3146     		mov	r1, r6
 708 0018 0822     		movs	r2, #8
 709 001a FFF7FEFF 		bl	IntToUnicode
 710              	.LVL58:
 413:src/hw_config.c **** 		IntToUnicode (Device_Serial1, string1, 4);
 711              		.loc 1 413 0
 712 001e 2046     		mov	r0, r4
 713 0020 2946     		mov	r1, r5
 714 0022 0422     		movs	r2, #4
 414:src/hw_config.c **** 	}
 415:src/hw_config.c **** }
 715              		.loc 1 415 0
 716 0024 BDE87040 		pop	{r4, r5, r6, lr}
 413:src/hw_config.c **** 		IntToUnicode (Device_Serial1, string1, 4);
 717              		.loc 1 413 0
 718 0028 FFF7FEBF 		b	IntToUnicode
 719              	.LVL59:
 720              	.L53:
 721 002c 70BD     		pop	{r4, r5, r6, pc}
 722              	.L56:
 723 002e 00BF     		.align	2
 724              	.L55:
 725 0030 E8F7FF1F 		.word	536868840
 726 0034 ECF7FF1F 		.word	536868844
 727              		.cfi_endproc
 728              	.LFE69:
 730              		.global	CmdKey
 731              		.section	.bss.keycounts.8838,"aw",%nobits
 732              		.align	2
 733              		.set	.LANCHOR0,. + 0
 736              	keycounts.8838:
 737 0000 00000000 		.space	4
 738              		.section	.bss.prev.8839,"aw",%nobits
 739              		.align	2
 740              		.set	.LANCHOR2,. + 0
 743              	prev.8839:
 744 0000 00000000 		.space	4
 745              		.section	.bss.CmdKey,"aw",%nobits
 746              		.align	1
 747              		.set	.LANCHOR3,. + 0
 750              	CmdKey:
 751 0000 0000     		.space	2
 752              		.section	.bss.now.8840,"aw",%nobits
 753              		.align	2
 754              		.set	.LANCHOR1,. + 0
 757              	now.8840:
 758 0000 00000000 		.space	4
 759              		.text
 760              	.Letext0:
 761              		.file 2 "c:\\devz\\arm\\bleeding-edge\\bin\\../lib/gcc/arm-none-eabi/4.7.3/include/stdint-gcc.h"
 762              		.file 3 "./lib/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 763              		.file 4 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 764              		.file 5 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
 765              		.file 6 "./lib/STM32_USB-FS-Device_Driver/inc/usb_core.h"
 766              		.file 7 "./lib/CMSIS/Include/core_cm3.h"
 767              		.file 8 "./inc/systick.h"
 768              		.file 9 "./lib/USB_Functions/usb_pwr.h"
 769              		.file 10 "./lib/STM32F10x_StdPeriph_Driver/inc/misc.h"
 770              		.file 11 "./lib/CMSIS/Device/ST/STM32F10x/Include/system_stm32f10x.h"
 771              		.file 12 "./inc/power.h"
 772              		.file 13 "./inc/rtc_support.h"
 773              		.file 14 "./inc/adc_support.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hw_config.c
  R:\TEMP\ccd1dKQ1.s:19     .text.IntToUnicode:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:23     .text.IntToUnicode:0000000000000000 IntToUnicode
  R:\TEMP\ccd1dKQ1.s:79     .text.LED_Configuration:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:84     .text.LED_Configuration:0000000000000000 LED_Configuration
  R:\TEMP\ccd1dKQ1.s:192    .text.LED_Configuration:000000000000009c $d
  R:\TEMP\ccd1dKQ1.s:201    .text.KEY_Configuration:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:206    .text.KEY_Configuration:0000000000000000 KEY_Configuration
  R:\TEMP\ccd1dKQ1.s:261    .text.KEY_Configuration:000000000000004c $d
  R:\TEMP\ccd1dKQ1.s:267    .text.NVIC_Configuration:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:272    .text.NVIC_Configuration:0000000000000000 NVIC_Configuration
  R:\TEMP\ccd1dKQ1.s:290    .text.Set_System:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:295    .text.Set_System:0000000000000000 Set_System
  R:\TEMP\ccd1dKQ1.s:333    .text.JoyInp_Chk:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:338    .text.JoyInp_Chk:0000000000000000 JoyInp_Chk
  R:\TEMP\ccd1dKQ1.s:394    .text.JoyInp_Chk:0000000000000048 $d
  R:\TEMP\ccd1dKQ1.s:404    .text.Set72:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:409    .text.Set72:0000000000000000 Set72
  R:\TEMP\ccd1dKQ1.s:483    .text.Set72:000000000000005c $d
  R:\TEMP\ccd1dKQ1.s:488    .text.USB_Disconnect_Config:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:493    .text.USB_Disconnect_Config:0000000000000000 USB_Disconnect_Config
  R:\TEMP\ccd1dKQ1.s:530    .text.USB_Disconnect_Config:0000000000000028 $d
  R:\TEMP\ccd1dKQ1.s:535    .text.Set_USBClock:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:540    .text.Set_USBClock:0000000000000000 Set_USBClock
  R:\TEMP\ccd1dKQ1.s:567    .text.USB_Cable_Config:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:572    .text.USB_Cable_Config:0000000000000000 USB_Cable_Config
  R:\TEMP\ccd1dKQ1.s:602    .text.USB_Cable_Config:0000000000000014 $d
  R:\TEMP\ccd1dKQ1.s:607    .text.Enter_LowPowerMode:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:612    .text.Enter_LowPowerMode:0000000000000000 Enter_LowPowerMode
  R:\TEMP\ccd1dKQ1.s:627    .text.Enter_LowPowerMode:0000000000000008 $d
  R:\TEMP\ccd1dKQ1.s:632    .text.Leave_LowPowerMode:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:637    .text.Leave_LowPowerMode:0000000000000000 Leave_LowPowerMode
  R:\TEMP\ccd1dKQ1.s:662    .text.Leave_LowPowerMode:0000000000000014 $d
  R:\TEMP\ccd1dKQ1.s:668    .text.Get_SerialNum:0000000000000000 $t
  R:\TEMP\ccd1dKQ1.s:673    .text.Get_SerialNum:0000000000000000 Get_SerialNum
  R:\TEMP\ccd1dKQ1.s:725    .text.Get_SerialNum:0000000000000030 $d
  R:\TEMP\ccd1dKQ1.s:750    .bss.CmdKey:0000000000000000 CmdKey
  R:\TEMP\ccd1dKQ1.s:732    .bss.keycounts.8838:0000000000000000 $d
  R:\TEMP\ccd1dKQ1.s:736    .bss.keycounts.8838:0000000000000000 keycounts.8838
  R:\TEMP\ccd1dKQ1.s:739    .bss.prev.8839:0000000000000000 $d
  R:\TEMP\ccd1dKQ1.s:743    .bss.prev.8839:0000000000000000 prev.8839
  R:\TEMP\ccd1dKQ1.s:746    .bss.CmdKey:0000000000000000 $d
  R:\TEMP\ccd1dKQ1.s:753    .bss.now.8840:0000000000000000 $d
  R:\TEMP\ccd1dKQ1.s:757    .bss.now.8840:0000000000000000 now.8840
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_ResetBits
NVIC_SetVectorTable
SystemCoreClockUpdate
PWR_Configuration
RTC_Configuration
ADC_DMA_Configuration
GPIO_ReadInputData
RCC_SYSCLKConfig
RCC_PLLCmd
RCC_PLLConfig
RCC_GetFlagStatus
RCC_GetSYSCLKSource
RCC_GetClocksFreq
RCC_USBCLKConfig
RCC_APB1PeriphClockCmd
GPIO_SetBits
bDeviceState
Device_Info
